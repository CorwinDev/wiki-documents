"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[15623],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var i=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?i.createElement(g,a(a({ref:t},c),{},{components:n})):i.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var d=2;d<o;d++)a[d]=n[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},51628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=n(58168),r=(n(96540),n(15680));const o={description:"MQTT Audio Streaming",title:"MQTT Audio Streaming",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/steams_mqtt",last_update:{date:"7/1/2024",author:"Jessie"}},a=void 0,s={unversionedId:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/streams_mqtt",id:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/streams_mqtt",title:"MQTT Audio Streaming",description:"MQTT Audio Streaming",source:"@site/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/streams_mqtt.md",sourceDirName:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3",slug:"/steams_mqtt",permalink:"/steams_mqtt",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/streams_mqtt.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:1719792e3,formattedLastUpdatedAt:"Jul 1, 2024",frontMatter:{description:"MQTT Audio Streaming",title:"MQTT Audio Streaming",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/steams_mqtt",last_update:{date:"7/1/2024",author:"Jessie"}},sidebar:"ProductSidebar",previous:{title:"MP3 Player",permalink:"/player_spiffs"},next:{title:"Keyword Spotting",permalink:"/streams_i2s_tflite"}},l={},d=[{value:"Library Required",id:"library-required",level:3},{value:"Functionality",id:"functionality",level:3},{value:"Code",id:"code",level:3},{value:"Customization",id:"customization",level:3}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,i.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"This project demonstrates how to use the reSpeaker Lite board, which includes an integrated XIAO ESP32S3 microcontroller, to generate and send audio data to an MQTT broker."),(0,r.yg)("h3",{id:"library-required"},"Library Required"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://www.arduino.cc/reference/en/libraries/arduinomqttclient/"},"ArduinoMqttClient"))),(0,r.yg)("h3",{id:"functionality"},"Functionality"),(0,r.yg)("p",null,"The sketch performs the following tasks:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Connects to the specified WiFi network."),(0,r.yg)("li",{parentName:"ul"},"Connects to the specified MQTT broker."),(0,r.yg)("li",{parentName:"ul"},"Generates white noise audio using the WhiteNoiseGenerator class from the reSpeaker Lite library."),(0,r.yg)("li",{parentName:"ul"},"Encodes the audio data as a WAV file using the WAVEncoder class from the reSpeaker Lite library."),(0,r.yg)("li",{parentName:"ul"},"Sends the encoded audio data to the specified MQTT topic using the MqttClient class from the ArduinoMqttClient library."),(0,r.yg)("li",{parentName:"ul"},"Maintains the MQTT connection by regularly calling the poll() function.")),(0,r.yg)("h3",{id:"code"},"Code"),(0,r.yg)("p",null,"Modify the following lines in the sketch to match your WiFi and MQTT broker settings:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'const char* ssid = "SSID";    // your Wi-FI SSID (name)\nconst char* password = "PASSWORD";    // your Wi-Fi password (use for WPA, or use as key for WEP)\nconst char* broker = "test.mosquitto.org"; \nconst char* topic = "audio.wav";\nint port = 1883;\n')),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Code"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "WiFi.h"\n#include "ArduinoMqttClient.h"\n#include "AudioTools.h"\n\n#define SIZE 1024\n#define N 100\n\n// Communication\nconst char* ssid = "SSID";    // your Wi-FI SSID (name)\nconst char* password = "PASSWORD";    // your Wi-Fi password (use for WPA, or use as key for WEP)\nconst char* broker = "test.mosquitto.org"; \nconst char* topic = "audio.wav";\nint port = 1883;\nWiFiClient wifiClient;\nMqttClient mqttClient(wifiClient);\n\n// Audio\nAudioInfo info(16000, 1, 32);\nWhiteNoiseGenerator<int16_t> noise(32000);                        // subclass of SoundGenerator with max amplitude of 32000\nGeneratedSoundStream<int16_t> in_stream(noise);                   // Stream generated from noise\nEncodedAudioStream out_stream(&mqttClient, new WAVEncoder());     // encode as wav file\nStreamCopy copier(out_stream, in_stream, SIZE);                   // copies sound to MQTT client\n\n// Connect to Wifi\nvoid connectWIFI() {\n  // attempt to connect to WiFi network:\n  Serial.print("Attempting to connect to WPA SSID: ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n\n  Serial.print("Connecting to WiFi ..");\n  while (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\'.\');\n    delay(1000);\n  }\n\n  Serial.println("You\'re connected to the network");\n  Serial.println();  \n}\n\n// Connect to MQTT Server\nvoid connectMQTT() {\n  // You can provide a unique client ID, if not set the library uses Arduino-millis()\n  // Each client must have a unique client ID\n  mqttClient.setId("reSpeaker");\n\n  // You can provide a username and password for authentication\n  // mqttClient.setUsernamePassword("username", "password");\n\n  Serial.print("Attempting to connect to the MQTT broker: ");\n  Serial.println(broker);\n\n  if (!mqttClient.connect(broker, port)) {\n    Serial.print("MQTT connection failed! Error code = ");\n    Serial.println(mqttClient.connectError());\n\n    stop();\n  }\n\n  Serial.println("You\'re connected to the MQTT broker!");\n  Serial.println();\n}  \n\n// Send audio to MQTT Server\nvoid sendMQTT() {\n    // make sure that we write wav header\n    out_stream.begin(info);\n\n    // send message, the Print interface can be used to set the message contents\n    mqttClient.beginMessage(topic, SIZE * N, true);\n\n    // copy audio data to mqtt: 100 * 1024 bytes\n    copier.copyN(N);\n\n    mqttClient.endMessage();\n}\n\n\nvoid setup() {\n  // Initialize logger \n  Serial.begin(115200);\n  AudioLogger::instance().begin(Serial, AudioLogger::Info);\n\n  // connect\n  connectWIFI();\n  connectMQTT();\n\n  // setup audio\n  noise.begin(info);\n  in_stream.begin(info);\n\n  // send Audio\n  sendMQTT();\n}\n\nvoid loop() {\n  // call poll() regularly to allow the library to send MQTT keep alives which\n  // avoids being disconnected by the broker\n  mqttClient.poll();\n  delay(10000);\n}\n'))),(0,r.yg)("p",null,"Open the ",(0,r.yg)("inlineCode",{parentName:"p"},"Serial Monitor")," to check the output and logs."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/respeaker/mqtt-log.png",alt:"pir",width:600,height:"auto"})),(0,r.yg)("p",null,"Then you can see the data on your MQTT server."),(0,r.yg)("p",{style:{textAlign:"center"}},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/respeaker/mqtt-data.png",alt:"pir",width:800,height:"auto"})),(0,r.yg)("h3",{id:"customization"},"Customization"),(0,r.yg)("p",null,"You can customize the audio generation and encoding by modifying the following lines in the sketch:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"WhiteNoiseGenerator<int16_t> noise(32000);\nGeneratedSoundStream<int16_t> in_stream(noise);\nEncodedAudioStream out_stream(&mqttClient, new WAVEncoder());\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"WhiteNoiseGenerator")," generates white noise audio with a specified maximum amplitude."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"GeneratedSoundStream")," creates an input stream from the generated audio."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"EncodedAudioStream")," encodes the audio data using the specified encoder (WAV in this case).")),(0,r.yg)("p",null,"You can also adjust the size of the audio data being sent by modifying the SIZE and N constants:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"#define SIZE 1024\n#define N 100\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"SIZE")," represents the size of each audio data chunk."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"N")," represents the number of audio data chunks to send.")))}p.isMDXComponent=!0}}]);