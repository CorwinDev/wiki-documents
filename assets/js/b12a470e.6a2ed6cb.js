"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[54773],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var r=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(t),h=i,g=d["".concat(s,".").concat(h)]||d[h]||u[h]||a;return t?r.createElement(g,l(l({ref:n},c),{},{components:t})):r.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=h;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},57352:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=t(58168),i=(t(96540),t(15680));const a={description:"\u4ee5\u592a\u7f51\u62d3\u5c55\u7248",title:"\u4ee5\u592a\u7f51\u62d3\u5c55\u7248",keywords:["Wio_terminal Extension_Board"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-Terminal-Ethernet",last_update:{date:"3/05/2024",author:"jessie"}},l="Wio Terminal\u7684\u4ee5\u592a\u7f51\u8fde\u63a5",o={unversionedId:"zh-CN/Sensor/Wio_Terminal/Extension_Board-7/CN-Wio-Terminal-Ethernet",id:"zh-CN/Sensor/Wio_Terminal/Extension_Board-7/CN-Wio-Terminal-Ethernet",title:"\u4ee5\u592a\u7f51\u62d3\u5c55\u7248",description:"\u4ee5\u592a\u7f51\u62d3\u5c55\u7248",source:"@site/docs/zh-CN/Sensor/Wio_Terminal/Extension_Board-7/CN-Wio-Terminal-Ethernet.md",sourceDirName:"zh-CN/Sensor/Wio_Terminal/Extension_Board-7",slug:"/cn/Wio-Terminal-Ethernet",permalink:"/cn/Wio-Terminal-Ethernet",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/Wio_Terminal/Extension_Board-7/CN-Wio-Terminal-Ethernet.md",tags:[],version:"current",lastUpdatedBy:"jessie",lastUpdatedAt:1709596800,formattedLastUpdatedAt:"Mar 5, 2024",frontMatter:{description:"\u4ee5\u592a\u7f51\u62d3\u5c55\u7248",title:"\u4ee5\u592a\u7f51\u62d3\u5c55\u7248",keywords:["Wio_terminal Extension_Board"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-Terminal-Ethernet",last_update:{date:"3/05/2024",author:"jessie"}},sidebar:"CNSidebar",previous:{title:"\u5177\u6709\u5185\u7f6eLoRa-E5\u548cGNSS\u5929\u7ebf\u7684Wio Terminal LoRaWan\u5e95\u5ea7, EU868/US915",permalink:"/cn/Wio_Terminal_LoRaWan_Chassis_with_Antenna-built-in_LoRa-E5_and_GNSS_EU868_US915"},next:{title:"Wio Terminal\u97f3\u9891\u5e93\u6982\u8ff0",permalink:"/cn/Wio-Terminal-Audio-Overview"}},s={},p=[{value:"\u6240\u9700\u786c\u4ef6",id:"\u6240\u9700\u786c\u4ef6",level:2},{value:"\u786c\u4ef6\u8fde\u63a5",id:"\u786c\u4ef6\u8fde\u63a5",level:2},{value:"\u5b89\u88c5UIPEthernet Arduino\u5e93",id:"\u5b89\u88c5uipethernet-arduino\u5e93",level:2},{value:"\u7b80\u5355\u7684DHCP\u793a\u4f8b",id:"\u7b80\u5355\u7684dhcp\u793a\u4f8b",level:2},{value:"\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801",level:3},{value:"\u901a\u8fc7\u9759\u6001IP\u8fde\u63a5\u7f51\u7edc",id:"\u901a\u8fc7\u9759\u6001ip\u8fde\u63a5\u7f51\u7edc",level:2},{value:"\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801-1",level:3},{value:"\u7b80\u5355\u7684Web\u5ba2\u6237\u7aef",id:"\u7b80\u5355\u7684web\u5ba2\u6237\u7aef",level:2},{value:"\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801-2",level:3},{value:"Web\u670d\u52a1\u5668\u793a\u4f8b",id:"web\u670d\u52a1\u5668\u793a\u4f8b",level:2},{value:"\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801-3",level:3},{value:"Web\u670d\u52a1\u5668\u6d4b\u8bd5",id:"web\u670d\u52a1\u5668\u6d4b\u8bd5",level:3},{value:"\u4f7f\u7528UDP\u8fdb\u884cNTP\u65f6\u95f4\u540c\u6b65",id:"\u4f7f\u7528udp\u8fdb\u884cntp\u65f6\u95f4\u540c\u6b65",level:2},{value:"\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801-4",level:3},{value:"\u53d1\u9001 Twitter \u793a\u4f8b",id:"\u53d1\u9001-twitter-\u793a\u4f8b",level:2},{value:"\u5b89\u88c5Arduino\u7684Tweet Library",id:"\u5b89\u88c5arduino\u7684tweet-library",level:3},{value:"\u83b7\u53d6\u4ee4\u724c",id:"\u83b7\u53d6\u4ee4\u724c",level:3},{value:"\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801-5",level:3}],c={toc:p},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.yg)(d,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"wio-terminal\u7684\u4ee5\u592a\u7f51\u8fde\u63a5"},"Wio Terminal\u7684\u4ee5\u592a\u7f51\u8fde\u63a5"),(0,i.yg)("p",null,"\u8fd9\u4e2awiki\u4ecb\u7ecd\u4e86\u5982\u4f55\u5728Wio Terminal\u4e0a\u4f7f\u7528 ",(0,i.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/ENC28J60-OVERLAYS-HAT-for-Raspberry-pi-p-3045.html"},(0,i.yg)("strong",{parentName:"a"},"ENC28J60 OVERLAYS HAT for Raspberry Pi"))," \u6765\u5b9e\u73b0\u7a33\u5b9a\u7684\u7f51\u7edc\u8fde\u63a5\u3002\u8fd9\u662f\u5728Wio Terminal\u4e0a\u4f7f\u7528\u6811\u8393\u6d3e40 Pi\u6269\u5c55\u677f\u7684\u5b8c\u7f8e\u793a\u4f8b\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal-Ethernet/twitter.png"})),(0,i.yg)("h2",{id:"\u6240\u9700\u786c\u4ef6"},"\u6240\u9700\u786c\u4ef6"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Terminal-p-4509.html"},(0,i.yg)("strong",{parentName:"a"},"Wio Terminal")))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/ENC28J60-OVERLAYS-HAT-for-Raspberry-pi-p-3045.html"},(0,i.yg)("strong",{parentName:"a"},"ENC28J60 OVERLAYS HAT for Raspberry Pi")))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("em",{parentName:"p"},"40 Pin Pi HAT Adapter board for Wio Terminal (\u5c1a\u672a\u53d1\u5e03)")))),(0,i.yg)("h2",{id:"\u786c\u4ef6\u8fde\u63a5"},"\u786c\u4ef6\u8fde\u63a5"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"\u76ee\u524d\uff0c\u5982\u679c\u60a8\u60f3\u6d4b\u8bd5\u8f6f\u4ef6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5bfc\u7ebf\u8fde\u63a5\u3002")),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal-Ethernet/enc-wio.png"})),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\u5c06\u4ee5\u592a\u7f51\u7535\u7f06\u63d2\u5165ENC28J60 Overlays Hat\u3002")),(0,i.yg)("h2",{id:"\u5b89\u88c5uipethernet-arduino\u5e93"},"\u5b89\u88c5UIPEthernet Arduino\u5e93"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"\u8bbf\u95ee ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/UIPEthernet/UIPEthernet"},"UIPEthernet")," \u5b58\u50a8\u5e93\uff0c\u5e76\u5c06\u6574\u4e2a\u5b58\u50a8\u5e93\u4e0b\u8f7d\u5230\u672c\u5730\u9a71\u52a8\u5668\u3002")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"\u73b0\u5728\uff0c\u53ef\u4ee5\u5c06\u5e93\u5b89\u88c5\u5230Arduino IDE\u3002\u6253\u5f00Arduino IDE\uff0c\u70b9\u51fb ",(0,i.yg)("inlineCode",{parentName:"p"},"sketch")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Include Library")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Add .ZIP Library"),", \u9009\u62e9\u521a\u521a\u4e0b\u8f7d\u7684 ",(0,i.yg)("inlineCode",{parentName:"p"},"UIPEthernet")," UIPEthernet\u6587\u4ef6\u3002"))),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/Xnip2019-11-21_15-50-13.jpg",alt:"InstallLibrary"})),(0,i.yg)("h2",{id:"\u7b80\u5355\u7684dhcp\u793a\u4f8b"},"\u7b80\u5355\u7684DHCP\u793a\u4f8b"),(0,i.yg)("p",null,"\u8fd9\u4e2a\u793a\u4f8b\u4f7f\u7528DHCP\u81ea\u52a8\u4ece\u7f51\u7edc\u4e3b\u673a\u83b7\u53d6\u7f51\u7edc\u914d\u7f6e\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal-Ethernet/DHCP.png"})),(0,i.yg)("h3",{id:"\u793a\u4f8b\u4ee3\u7801"},"\u793a\u4f8b\u4ee3\u7801"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <UIPEthernet.h>\n\nuint8_t mac[6] = {0x74,0x69,0x69,0x2D,0x30,0x31};\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n  while(!Serial);\n  Serial.println(F("[testDHCP]"));\n  \n  Serial.print("MAC: ");\n  for (byte i = 0; i < 6; ++i) {\n    Serial.print(mac[i], HEX);\n    if (i < 5)\n      Serial.print(\':\');\n  }\n  Serial.println();\n  \n  if (Ethernet.begin(mac) != 1) {\n     Serial.println("Failed to configure Ethernet using DHCP");\n     while (true) {\n        delay(1); // do nothing, no point running without Ethernet hardware\n     }\n  }\n  \n  Serial.print("My IP: ");\n  Serial.println(Ethernet.localIP());\n  Serial.print("Netmask: ");\n  Serial.println(Ethernet.subnetMask());\n  Serial.print("Gateway IP: ");\n  Serial.println(Ethernet.gatewayIP());\n  Serial.print("DNS: ");\n  Serial.println(Ethernet.dnsServerIP());\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n}\n')),(0,i.yg)("h2",{id:"\u901a\u8fc7\u9759\u6001ip\u8fde\u63a5\u7f51\u7edc"},"\u901a\u8fc7\u9759\u6001IP\u8fde\u63a5\u7f51\u7edc"),(0,i.yg)("p",null,"\u9664\u4e86\u4f7f\u7528DHCP\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u9759\u6001IP\u624b\u52a8\u8fde\u63a5\u5230\u7f51\u7edc\u4e3b\u673a\u4ee5\u6ee1\u8db3\u4e0d\u540c\u7684\u9700\u6c42\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u9759\u6001IP\u3001\u5b50\u7f51\u63a9\u7801\u3001\u7f51\u5173\u548cDNS\u6765\u624b\u52a8\u914d\u7f6e\u5982\u4f55\u8fde\u63a5\u5230\u7f51\u7edc\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal-Ethernet/Static.png"})),(0,i.yg)("h3",{id:"\u793a\u4f8b\u4ee3\u7801-1"},"\u793a\u4f8b\u4ee3\u7801"),(0,i.yg)("p",null,":::\u6ce8\n\u5f53\u60a8\u9700\u8981\u5c06\u8bbe\u5907\u8fde\u63a5\u5230\u7279\u5b9a\u7684\u7f51\u5173\u548cDNS\uff08\u4f8b\u5982\uff0c\u65c1\u8def\u6a21\u5f0f\u8def\u7531\u5668/\u7f51\u5173\uff09\u65f6\uff0c\u8fd9\u5c06\u975e\u5e38\u6709\u7528\u3002\n:::"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <UIPEthernet.h>\n\n// Static Set-up, change the following according to your network\nuint8_t mac[6] = {0x74,0x69,0x69,0x2D,0x30,0x31};\nIPAddress myIP = {10,0,0,111};\nIPAddress myMask = {255,255,255,0};\nIPAddress myGatewayIP = {10,0,0,127};\nIPAddress myDNS = {10,0,0,127};\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Serial.begin(9600);\n  while(!Serial);\n  Serial.println(F("[getStaticIP]"));\n  \n  Serial.print("MAC: ");\n  for (byte i = 0; i < 6; ++i) {\n    Serial.print(mac[i], HEX);\n    if (i < 5)\n      Serial.print(\':\');\n  }\n  Serial.println();\n  \n  Ethernet.begin(mac,myIP, myDNS, myGatewayIP, myMask);\n\n  Serial.print("My IP: ");\n  Serial.println(Ethernet.localIP());\n  Serial.print("Netmask: ");\n  Serial.println(Ethernet.subnetMask());\n  Serial.print("Gateway IP: ");\n  Serial.println(Ethernet.gatewayIP());\n  Serial.print("DNS: ");\n  Serial.println(Ethernet.dnsServerIP());  \n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n}\n')),(0,i.yg)("h2",{id:"\u7b80\u5355\u7684web\u5ba2\u6237\u7aef"},"\u7b80\u5355\u7684Web\u5ba2\u6237\u7aef"),(0,i.yg)("p",null,"\u4e00\u65e6\u6211\u4eec\u901a\u8fc7\u4ee5\u592a\u7f51\u5efa\u7acb\u4e86\u7f51\u7edc\u8fde\u63a5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5176\u7528\u4e8eTCP\u5ba2\u6237\u7aef\u3002\u4f8b\u5982\uff0c\u4ece\u4e92\u8054\u7f51\u83b7\u53d6\u6570\u636e\uff08HTTP\uff09\u6216\u4ece\u540c\u4e00\u7f51\u7edc\u4e2d\u7684\u670d\u52a1\u5668\u83b7\u53d6\u6570\u636e\u3002"),(0,i.yg)("p",null,"\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u5b83\u9996\u5148\u4f7f\u7528DHCP\u8fdb\u884c\u8bbe\u7f6e\uff0c\u5982\u679c\u5931\u8d25\uff0c\u5219\u4f7f\u7528\u9759\u6001IP\u8fdb\u884c\u5206\u914d\u3002\u6b64\u793a\u4f8b\u8fde\u63a5\u5230 ",(0,i.yg)("inlineCode",{parentName:"p"},"www.bing.com")," \u5e76\u5c06\u6570\u636e\u6253\u5370\u5230\u4e32\u884c\u76d1\u89c6\u5668\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal-Ethernet/TCPclient.png"})),(0,i.yg)("h3",{id:"\u793a\u4f8b\u4ee3\u7801-2"},"\u793a\u4f8b\u4ee3\u7801"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <UIPEthernet.h>\n\n// Enter a MAC address for your controller below.\nbyte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };\n\nchar server[] = "www.bing.com";\n\n// Set the static IP address to use if the DHCP fails to assign\nIPAddress myIP(10, 0, 0, 187);\nIPAddress myMask = {255,255,255,0};\nIPAddress myGatewayIP = {10,0,0,127};\nIPAddress dnsIP(10, 0, 0, 127);\n\n// Initialize the Ethernet client library\n// with the IP address and port of the server\n// that you want to connect to (port 80 is default for HTTP):\nEthernetClient client;\n\n// Variables to measure the speed\nunsigned long beginMicros, endMicros;\nunsigned long byteCount = 0;\nbool printWebData = true;  // set to false for better speed measurement\n\nvoid setup() {\n  // Open serial communications and wait for port to open:\n  Serial.begin(9600);\n  while (!Serial) {\n    ; // wait for serial port to connect. Needed for native USB port only\n  }\n\n  // start the Ethernet connection:\n  Serial.println("Initialize Ethernet with DHCP:");\n  if (Ethernet.begin(mac) == 0) {\n    Serial.println("Failed to configure Ethernet using DHCP");\n    // Check for Ethernet hardware present\n    if (Ethernet.hardwareStatus() == EthernetNoHardware) {\n      Serial.println("Ethernet shield was not found.  Sorry, can\'t run without hardware. :(");\n      while (true) {\n        delay(1); // do nothing, no point running without Ethernet hardware\n      }\n    }\n    if (Ethernet.linkStatus() == LinkOFF) {\n      Serial.println("Ethernet cable is not connected.");\n    }\n    // try to congifure using IP address instead of DHCP:\n    Ethernet.begin(mac,myIP, dnsIP, myGatewayIP, myMask);\n  } else {\n    Serial.print("  DHCP assigned IP ");\n    Serial.println(Ethernet.localIP());\n  }\n  // give the Ethernet shield a second to initialize:\n  delay(1000);\n  Serial.print("connecting to ");\n  Serial.print(server);\n  Serial.println("...");\n\n  // if you get a connection, report back via serial:\n  if (client.connect(server, 80)) {\n    Serial.print("connected to ");\n    Serial.println(client.remoteIP());\n    // Make a HTTP request:\n    client.println("GET /search?q=WioTerminal HTTP/1.1");\n    client.println("Host: www.bing.com");\n    client.println("Connection: close");\n    client.println();\n  } else {\n    // if you didn\'t get a connection to the server:\n    Serial.println("connection failed");\n  }\n  beginMicros = micros();\n}\n\nvoid loop() {\n  // if there are incoming bytes available\n  // from the server, read them and print them:\n  int len = client.available();\n  if (len > 0) {\n    byte buffer[80];\n    if (len > 80) len = 80;\n    client.read(buffer, len);\n    if (printWebData) {\n      Serial.write(buffer, len); // show in the serial monitor (slows some boards)\n    }\n    byteCount = byteCount + len;\n  }\n\n  // if the server\'s disconnected, stop the client:\n  if (!client.connected()) {\n    endMicros = micros();\n    Serial.println();\n    Serial.println("disconnecting.");\n    client.stop();\n    Serial.print("Received ");\n    Serial.print(byteCount);\n    Serial.print(" bytes in ");\n    float seconds = (float)(endMicros - beginMicros) / 1000000.0;\n    Serial.print(seconds, 4);\n    float rate = (float)byteCount / seconds / 1000.0;\n    Serial.print(", rate = ");\n    Serial.print(rate);\n    Serial.print(" kbytes/second");\n    Serial.println();\n\n    // do nothing forevermore:\n    while (true) {\n      delay(1);\n    }\n  }\n}\n')),(0,i.yg)("h2",{id:"web\u670d\u52a1\u5668\u793a\u4f8b"},"Web\u670d\u52a1\u5668\u793a\u4f8b"),(0,i.yg)("p",null,"\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u5176\u8bbe\u7f6e\u4e3aWeb\u670d\u52a1\u5668\uff0c\u5e76\u5141\u8bb8\u540c\u4e00\u7f51\u7edc\u4e2d\u7684\u5176\u4ed6\u8bbe\u5907\u8fde\u63a5\u5230\u5b83\uff08\u4f8b\u5982\uff0c\u8bfb\u53d6Wio Terminal\u4e0a\u89c2\u5bdf\u5230\u7684\u4f20\u611f\u5668\u503c\uff09\u3002\u7531\u4e8e\u4ee5\u592a\u7f51\u7684\u7a33\u5b9a\u6027\u8981\u6bd4Wi-Fi\u597d\u5f97\u591a\uff0c\u8fd9\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u975e\u5e38\u6709\u7528\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal-Ethernet/TCPserver.png"})),(0,i.yg)("h3",{id:"\u793a\u4f8b\u4ee3\u7801-3"},"\u793a\u4f8b\u4ee3\u7801"),(0,i.yg)("p",null,"\u6b64\u793a\u4f8b\u5c06\u81ea\u8eab\u914d\u7f6e\u4e3aWeb\u670d\u52a1\u5668\uff0c\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u7b80\u5355\u7684\u7f51\u9875\uff0c\u6253\u5370\u51fa\u4ece ",(0,i.yg)("inlineCode",{parentName:"p"},"A0")," \u5230 ",(0,i.yg)("inlineCode",{parentName:"p"},"A5")," \u7684\u503c\u8bfb\u6570\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u540c\u4e00\u7f51\u7edc\u4e2d\u8fde\u63a5\u7684\u8ba1\u7b97\u673a\u4e0a\u7684IP\u5730\u5740\u8bbf\u95ee\u5b83\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <UIPEthernet.h>\n\n// Enter a MAC address and IP address for your controller below.\n// The IP address will be dependent on your local network:\nbyte mac[] = {\n  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED\n};\nIPAddress ip(10, 0, 0, 123);\n\n// Initialize the Ethernet server library\n// with the IP address and port you want to use\n// (port 80 is default for HTTP):\nEthernetServer server(80);\n\nvoid setup() {\n  // Open serial communications and wait for port to open:\n  Serial.begin(9600);\n  while (!Serial) {\n    ; // wait for serial port to connect. Needed for native USB port only\n  }\n  Serial.println("Ethernet WebServer Example");\n\n  // start the Ethernet connection and the server:\n  Ethernet.begin(mac, ip);\n\n  // Check for Ethernet hardware present\n  if (Ethernet.hardwareStatus() == EthernetNoHardware) {\n    Serial.println("Ethernet shield was not found.  Sorry, can\'t run without hardware. :(");\n    while (true) {\n      delay(1); // do nothing, no point running without Ethernet hardware\n    }\n  }\n  if (Ethernet.linkStatus() == LinkOFF) {\n    Serial.println("Ethernet cable is not connected.");\n  }\n\n  // start the server\n  server.begin();\n  Serial.print("server is at ");\n  Serial.println(Ethernet.localIP());\n}\n\nvoid loop() {\n  // listen for incoming clients\n  EthernetClient client = server.available();\n  if (client) {\n    Serial.println("new client");\n    // an http request ends with a blank line\n    bool currentLineIsBlank = true;\n    while (client.connected()) {\n      if (client.available()) {\n        char c = client.read();\n        Serial.write(c);\n        // if you\'ve gotten to the end of the line (received a newline\n        // character) and the line is blank, the http request has ended,\n        // so you can send a reply\n        if (c == \'\\n\' && currentLineIsBlank) {\n          // send a standard http response header\n          client.println("HTTP/1.1 200 OK");\n          client.println("Content-Type: text/html");\n          client.println("Connection: close");  // the connection will be closed after completion of the response\n          client.println("Refresh: 5");  // refresh the page automatically every 5 sec\n          client.println();\n          client.println("<!DOCTYPE HTML>");\n          client.println("<html>");\n          // output the value of each analog input pin\n          for (int analogChannel = 0; analogChannel < 6; analogChannel++) {\n            int sensorReading = analogRead(analogChannel);\n            client.print("analog input ");\n            client.print(analogChannel);\n            client.print(" is ");\n            client.print(sensorReading);\n            client.println("<br />");\n          }\n          client.println("</html>");\n          break;\n        }\n        if (c == \'\\n\') {\n          // you\'re starting a new line\n          currentLineIsBlank = true;\n        } else if (c != \'\\r\') {\n          // you\'ve gotten a character on the current line\n          currentLineIsBlank = false;\n        }\n      }\n    }\n    // give the web browser time to receive the data\n    delay(1);\n    // close the connection:\n    client.stop();\n    Serial.println("client disconnected");\n  }\n}\n')),(0,i.yg)("h3",{id:"web\u670d\u52a1\u5668\u6d4b\u8bd5"},"Web\u670d\u52a1\u5668\u6d4b\u8bd5"),(0,i.yg)("p",null,"\u8fd9\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f7f\u7528\u8be5\u8bbe\u7f6e\u7684\u7b80\u5355\u6d4b\u8bd5\u793a\u4f8b\u3002"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"\u8fd9\u662f\u572810\u5c0f\u65f6\u5185\u5bf9Web\u670d\u52a1\u5668\u8fdb\u884cping\u6d4b\u8bd5\u7684\u5c4f\u5e55\u622a\u56fe\u3002")),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal-Ethernet/moretest.png"})),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\u5728\u76f8\u540c\u7684\u7f51\u7edc\u4e0b\uff0c\u4f7f\u7528\u60a8\u7684\u8ba1\u7b97\u673a\u5bf9\u670d\u52a1\u5668\u7684IP\u8fdb\u884cping\u6d4b\u8bd5\uff1a")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <UIPEthernet.h>\n\n// Static IP Set-up\nuint8_t mac[6] = {0x74,0x69,0x69,0x2D,0x30,0x31};\nIPAddress myIP = {10,0,0,111};\nEthernetServer server = EthernetServer(80);\n\nvoid setup() {\n  Serial.begin(9600);\n  while(!Serial);\n  Ethernet.begin(mac, myIP);\n  server.begin();\n\n  Serial.print("My IP: ");\n  Serial.println(Ethernet.localIP());\n  Serial.print("Netmask: ");\n  Serial.println(Ethernet.subnetMask());\n  Serial.print("Gateway IP: ");\n  Serial.println(Ethernet.gatewayIP());\n  Serial.print("DNS: ");\n  Serial.println(Ethernet.dnsServerIP());\n}\n\nvoid loop() {\n  // get client\n  EthernetClient client = server.available();\n  if(client && client.connected()) {\n        // do stuff (snipped but basically parses HTTP and responds with no other processing)\n        client.stop();\n  }\n}\n')),(0,i.yg)("h2",{id:"\u4f7f\u7528udp\u8fdb\u884cntp\u65f6\u95f4\u540c\u6b65"},"\u4f7f\u7528UDP\u8fdb\u884cNTP\u65f6\u95f4\u540c\u6b65"),(0,i.yg)("p",null,"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b, UDP \u88ab\u7528\u4e8e\u7f51\u7edc\u901a\u4fe1\u3002 ",(0,i.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Network_Time_Protocol"},(0,i.yg)("strong",{parentName:"a"},"NTP"))," \u5c31\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u7b80\u5355\u5730\u4ece ",(0,i.yg)("inlineCode",{parentName:"p"},"time.nist.gov")," \u670d\u52a1\u5668\u83b7\u53d6\u65f6\u95f4\u5e76\u6253\u5370\u5230\u4e32\u884c\u76d1\u89c6\u5668\u4e0a\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal-Ethernet/UDP.png"})),(0,i.yg)("h3",{id:"\u793a\u4f8b\u4ee3\u7801-4"},"\u793a\u4f8b\u4ee3\u7801"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"#include <UIPEthernet.h>\n\n// Enter a MAC address for your controller below.\n// Newer Ethernet shields have a MAC address printed on a sticker on the shield\nbyte mac[] = {\n  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED\n};\n\nunsigned int localPort = 8888;       // local port to listen for UDP packets\n\nconst char timeServer[] = \"time.nist.gov\"; // time.nist.gov NTP server\n\nconst int NTP_PACKET_SIZE = 48; // NTP time stamp is in the first 48 bytes of the message\n\nbyte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming and outgoing packets\n\n// A UDP instance to let us send and receive packets over UDP\nEthernetUDP Udp;\n\nvoid setup() {\n  // Open serial communications and wait for port to open:\n  Serial.begin(9600);\n  while (!Serial) {\n    ; // wait for serial port to connect. Needed for native USB port only\n  }\n\n  // start Ethernet and UDP\n  if (Ethernet.begin(mac) == 0) {\n    Serial.println(\"Failed to configure Ethernet using DHCP\");\n    // Check for Ethernet hardware present\n    if (Ethernet.hardwareStatus() == EthernetNoHardware) {\n      Serial.println(\"Ethernet shield was not found.  Sorry, can't run without hardware. :(\");\n    } else if (Ethernet.linkStatus() == LinkOFF) {\n      Serial.println(\"Ethernet cable is not connected.\");\n    }\n    // no point in carrying on, so do nothing forevermore:\n    while (true) {\n      delay(1);\n    }\n  }\n  Udp.begin(localPort);\n}\n\nvoid loop() {\n  sendNTPpacket(timeServer); // send an NTP packet to a time server\n\n  // wait to see if a reply is available\n  delay(1000);\n  if (Udp.parsePacket()) {\n    // We've received a packet, read the data from it\n    Udp.read(packetBuffer, NTP_PACKET_SIZE); // read the packet into the buffer\n\n    // the timestamp starts at byte 40 of the received packet and is four bytes,\n    // or two words, long. First, extract the two words:\n\n    unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);\n    unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);\n    // combine the four bytes (two words) into a long integer\n    // this is NTP time (seconds since Jan 1 1900):\n    unsigned long secsSince1900 = highWord << 16 | lowWord;\n    Serial.print(\"Seconds since Jan 1 1900 = \");\n    Serial.println(secsSince1900);\n\n    // now convert NTP time into everyday time:\n    Serial.print(\"Unix time = \");\n    // Unix time starts on Jan 1 1970. In seconds, that's 2208988800:\n    const unsigned long seventyYears = 2208988800UL;\n    // subtract seventy years:\n    unsigned long epoch = secsSince1900 - seventyYears;\n    // print Unix time:\n    Serial.println(epoch);\n\n    // print the hour, minute and second:\n    Serial.print(\"The UTC time is \");       // UTC is the time at Greenwich Meridian (GMT)\n    Serial.print((epoch  % 86400L) / 3600); // print the hour (86400 equals secs per day)\n    Serial.print(':');\n    if (((epoch % 3600) / 60) < 10) {\n      // In the first 10 minutes of each hour, we'll want a leading '0'\n      Serial.print('0');\n    }\n    Serial.print((epoch  % 3600) / 60); // print the minute (3600 equals secs per minute)\n    Serial.print(':');\n    if ((epoch % 60) < 10) {\n      // In the first 10 seconds of each minute, we'll want a leading '0'\n      Serial.print('0');\n    }\n    Serial.println(epoch % 60); // print the second\n  }\n  // wait ten seconds before asking for the time again\n  delay(10000);\n  Ethernet.maintain();\n}\n\n// send an NTP request to the time server at the given address\nvoid sendNTPpacket(const char * address) {\n  // set all bytes in the buffer to 0\n  memset(packetBuffer, 0, NTP_PACKET_SIZE);\n  // Initialize values needed to form NTP request\n  // (see URL above for details on the packets)\n  packetBuffer[0] = 0b11100011;   // LI, Version, Mode\n  packetBuffer[1] = 0;     // Stratum, or type of clock\n  packetBuffer[2] = 6;     // Polling Interval\n  packetBuffer[3] = 0xEC;  // Peer Clock Precision\n  // 8 bytes of zero for Root Delay & Root Dispersion\n  packetBuffer[12]  = 49;\n  packetBuffer[13]  = 0x4E;\n  packetBuffer[14]  = 49;\n  packetBuffer[15]  = 52;\n\n  // all NTP fields have been given values, now\n  // you can send a packet requesting a timestamp:\n  Udp.beginPacket(address, 123); // NTP requests are to port 123\n  Udp.write(packetBuffer, NTP_PACKET_SIZE);\n  Udp.endPacket();\n}\n")),(0,i.yg)("h2",{id:"\u53d1\u9001-twitter-\u793a\u4f8b"},"\u53d1\u9001 Twitter \u793a\u4f8b"),(0,i.yg)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u793a\u4f8b\uff0c\u4f7f\u7528Wio Terminal\u53d1\u9001\u63a8\u6587\u3002\u5b83\u4f7f\u7528\u4e86 ",(0,i.yg)("a",{parentName:"p",href:"http://arduino-tweet.appspot.com/"},"Tweet Library for Arduino")," \u6765\u7ed5\u8fc7\u76f4\u63a5\u8fde\u63a5HTTPs\u7684\u9650\u5236\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal-Ethernet/twitter.png"})),(0,i.yg)("h3",{id:"\u5b89\u88c5arduino\u7684tweet-library"},"\u5b89\u88c5Arduino\u7684Tweet Library"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"\u8bbf\u95ee ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/NeoCat/Arduno-Twitter-library"},"Arduno-Twitter-library")," \u4ed3\u5e93\uff0c\u5e76\u5c06\u6574\u4e2a\u4ed3\u5e93\u4e0b\u8f7d\u5230\u672c\u5730\u9a71\u52a8\u5668\u4e0a\u3002")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"\u73b0\u5728\uff0c\u53ef\u4ee5\u5c06\u5e93\u5b89\u88c5\u5230Arduino IDE\u4e2d\u3002\u6253\u5f00Arduino IDE\uff0c\u70b9\u51fb",(0,i.yg)("inlineCode",{parentName:"p"},"sketch")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Include Library")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Add .ZIP Library"),", \u9009\u62e9\u521a\u521a\u4e0b\u8f7d\u7684",(0,i.yg)("inlineCode",{parentName:"p"},"Arduno-Twitter-library")," \u6587\u4ef6\u3002"))),(0,i.yg)("p",null,":::\u6ce8\n\u8fd9\u662f\u8fde\u63a5\u5230Twitter\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u80fd\u4e0d\u5b89\u5168\uff0c\u8bf7\u81ea\u884c\u627f\u62c5\u98ce\u9669\u3002\n:::"),(0,i.yg)("h3",{id:"\u83b7\u53d6\u4ee4\u724c"},"\u83b7\u53d6\u4ee4\u724c"),(0,i.yg)("p",null,"\u70b9\u51fb",(0,i.yg)("a",{parentName:"p",href:"http://arduino-tweet.appspot.com/oauth/twitter/login"},(0,i.yg)("strong",{parentName:"a"},"\u8fd9\u91cc")),"\u83b7\u53d6\u4e00\u4e2a\u4f7f\u7528OAuth\u8fdb\u884c\u6d88\u606f\u53d1\u5e03\u7684\u4ee4\u724c\u3002"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"\u8bf7\u8bbf\u95ee ",(0,i.yg)("a",{parentName:"p",href:"http://arduino-tweet.appspot.com/"},"http://arduino-tweet.appspot.com/")," \u83b7\u53d6\u66f4\u591a\u53c2\u8003\u4fe1\u606f")),(0,i.yg)("h3",{id:"\u793a\u4f8b\u4ee3\u7801-5"},"\u793a\u4f8b\u4ee3\u7801"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\u590d\u5236\u4e0a\u8ff0\u83b7\u53d6\u7684\u4ee4\u724c\uff0c\u5e76\u7c98\u8d34\u5230Arduino\u4ee3\u7801\u4e2d\u3002")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n *  Check http://arduino-tweet.appspot.com/ for more reference\n */\n \n#include <UIPEthernet.h>\n#include <Twitter.h>\n\nuint8_t mac[6] = {0x74,0x69,0x69,0x2D,0x30,0x31};\n\n// Your Token to Tweet (get it from http://arduino-tweet.appspot.com/)\nTwitter twitter("YOUR-TOKEN-HERE");\n\n// Message to post\nchar msg[] = "Hello, World! I\'m Arduino!";\n\nvoid setup()\n{\n  delay(1000);\n  Ethernet.begin(mac);\n  // or you can use DHCP for autoomatic IP address configuration.\n  // Ethernet.begin(mac);\n  Serial.begin(9600);\n  while(!Serial);\n  \n  Serial.println("connecting ...");\n  if (twitter.post(msg)) {\n    // Specify &Serial to output received response to Serial.\n    // If no output is required, you can just omit the argument, e.g.\n    // int status = twitter.wait();\n    int status = twitter.wait(&Serial);\n    if (status == 200) {\n      Serial.println("OK.");\n    } else {\n      Serial.print("failed : code ");\n      Serial.println(status);\n    }\n  } else {\n    Serial.println("connection failed.");\n  }\n}\n\nvoid loop()\n{\n}\n')))}u.isMDXComponent=!0}}]);