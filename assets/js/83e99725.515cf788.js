"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[21721],{15680:(n,e,t)=>{t.d(e,{xA:()=>c,yg:()=>F});var i=t(96540);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function x(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},a=Object.keys(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var l=i.createContext({}),s=function(n){var e=i.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):x(x({},e),n)),t},c=function(n){var e=s(n.components);return i.createElement(l.Provider,{value:e},n.children)},u="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},d=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,a=n.originalType,l=n.parentName,c=o(n,["components","mdxType","originalType","parentName"]),u=s(t),d=r,F=u["".concat(l,".").concat(d)]||u[d]||p[d]||a;return t?i.createElement(F,x(x({ref:e},c),{},{components:t})):i.createElement(F,x({ref:e},c))}));function F(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=t.length,x=new Array(a);x[0]=d;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=n,o[u]="string"==typeof n?n:r,x[1]=o;for(var s=2;s<a;s++)x[s]=t[s];return i.createElement.apply(null,x)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},40819:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>x,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var i=t(58168),r=(t(96540),t(15680));const a={description:"Accessing to GitHub using Wio Terminal",title:"\u4eceWio Terminal\u8bfb\u53d6GitHub\u5b58\u50a8\u5e93\u7edf\u8ba1\u4fe1\u606f",keywords:["Wio_terminal Tutorial"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-Terminal-Reading-Github",last_update:{date:"3/07/2024",author:"jessie"}},x="\u4eceWio Terminal\u8bfb\u53d6GitHub\u5b58\u50a8\u5e93\u7edf\u8ba1\u4fe1\u606f",o={unversionedId:"zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Reading-Github",id:"zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Reading-Github",title:"\u4eceWio Terminal\u8bfb\u53d6GitHub\u5b58\u50a8\u5e93\u7edf\u8ba1\u4fe1\u606f",description:"Accessing to GitHub using Wio Terminal",source:"@site/docs/zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Reading-Github.md",sourceDirName:"zh-CN/Sensor/Wio_Terminal/Tutorial",slug:"/cn/Wio-Terminal-Reading-Github",permalink:"/cn/Wio-Terminal-Reading-Github",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Reading-Github.md",tags:[],version:"current",lastUpdatedBy:"jessie",lastUpdatedAt:1709769600,formattedLastUpdatedAt:"Mar 7, 2024",frontMatter:{description:"Accessing to GitHub using Wio Terminal",title:"\u4eceWio Terminal\u8bfb\u53d6GitHub\u5b58\u50a8\u5e93\u7edf\u8ba1\u4fe1\u606f",keywords:["Wio_terminal Tutorial"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-Terminal-Reading-Github",last_update:{date:"3/07/2024",author:"jessie"}},sidebar:"CNSidebar",previous:{title:"\u8fb9\u7f18\u8109\u51b2\u8c03\u8c10\u5668",permalink:"/cn/Edge-Impulse-Tuner"},next:{title:"\u201c\u5938\u514b\uff08Quark\uff09\u201d\u8ff7\u4f60\u5f00\u53d1\u8005\u5957\u4ef6",permalink:"/cn/Quantum-Mini-Linux-Development-Kit"}},l={},s=[{value:"\u96f6\u4ef6\u6e05\u5355",id:"\u96f6\u4ef6\u6e05\u5355",level:2},{value:"\u529f\u80fd",id:"\u529f\u80fd",level:2},{value:"\u9700\u8981\u7684Arduino\u5e93",id:"\u9700\u8981\u7684arduino\u5e93",level:2},{value:"Arduino \u6307\u4ee4",id:"arduino-\u6307\u4ee4",level:2},{value:"\u5b8c\u6574\u4ee3\u7801",id:"\u5b8c\u6574\u4ee3\u7801",level:2}],c={toc:s},u="wrapper";function p(n){let{components:e,...t}=n;return(0,r.yg)(u,(0,i.A)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u4ecewio-terminal\u8bfb\u53d6github\u5b58\u50a8\u5e93\u7edf\u8ba1\u4fe1\u606f"},"\u4eceWio Terminal\u8bfb\u53d6GitHub\u5b58\u50a8\u5e93\u7edf\u8ba1\u4fe1\u606f"),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/Github.gif"})),(0,r.yg)("p",null,"\u672cwiki\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Wio Terminal\u8bbf\u95eeHTTPS\u670d\u52a1\u5668\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4f7f\u7528Wio Terminal\u4ece\u4e92\u8054\u7f51\u83b7\u53d6\u5b9e\u65f6\u6570\u636e\uff01\u5728\u8fd9\u91cc\uff0cWio Terminal\u8fde\u63a5\u5230Wi-Fi\u5e76\u4eceGitHub\u83b7\u53d6\u6570\u636e\u3002"),(0,r.yg)("p",null,"\u901a\u8fc7\u8fd9\u4e2a\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u5b9e\u73b0Demo\u6765\u83b7\u53d6\u5176\u4ed6API\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u5929\u6c14\u4fe1\u606f\u3001YouTube\u7edf\u8ba1\u6570\u636e\u7b49\u7b49"),(0,r.yg)("h2",{id:"\u96f6\u4ef6\u6e05\u5355"},"\u96f6\u4ef6\u6e05\u5355"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Terminal-p-4509.html"},"Wio Terminal"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Terminal-Chassis-Battery-p-4516.html"},"Wio Terminal \u7535\u6c60\u5e95\u5ea7")))),(0,r.yg)("h2",{id:"\u529f\u80fd"},"\u529f\u80fd"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u8fde\u63a5\u5230https\u670d\u52a1\u5668")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Grab repo stats from Github")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u53ef\u4ee5\u66f4\u6539\u4e3a\u4efb\u4f55GitHub\u5b58\u50a8\u5e93"))),(0,r.yg)("h2",{id:"\u9700\u8981\u7684arduino\u5e93"},"\u9700\u8981\u7684Arduino\u5e93"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5b89\u88c5LCD\u5c4f\u5e55 ",(0,r.yg)("inlineCode",{parentName:"p"},"Seeed_Arduino_LCD"),", \u8bf7\u8bbf\u95eeit ",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-LCD-Overview/"},"Wio Terminal LCD"),"\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u8bbf\u95ee ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/bblanchon/ArduinoJson"},"ArduinoJson")," \u5b58\u50a8\u5e93\uff0c\u5e76\u5c06\u6574\u4e2a\u5b58\u50a8\u5e93\u4e0b\u8f7d\u5230\u672c\u5730\u3002"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"\u73b0\u5728\uff0c\u53ef\u4ee5\u5c06ArduinoJson\u5e93\u5b89\u88c5\u5230Arduino IDE\u4e2d\u3002\u6253\u5f00Arduino IDE\uff0c\u70b9\u51fb ",(0,r.yg)("inlineCode",{parentName:"li"},"sketch")," -> ",(0,r.yg)("inlineCode",{parentName:"li"},"Include Library")," -> ",(0,r.yg)("inlineCode",{parentName:"li"},"Add .ZIP Library"),", \u7136\u540e\u9009\u62e9\u521a\u521a\u4e0b\u8f7d\u7684 ",(0,r.yg)("inlineCode",{parentName:"li"},"ArduinoJson")," \u6587\u4ef6\u3002"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u6709\u5173Https\u8fde\u63a5\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee ",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-Wi-Fi/#wi-fi-https-connection-example-code"},(0,r.yg)("strong",{parentName:"a"},"\u8fd9\u91cc")),"\u3002"))),(0,r.yg)("h2",{id:"arduino-\u6307\u4ee4"},"Arduino \u6307\u4ee4"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u4e0b\u8f7d ",(0,r.yg)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Wio-Terminal/res/Free_Fonts.h"},(0,r.yg)("inlineCode",{parentName:"a"},"Free_Fonts.h"))," \u5934\u6587\u4ef6\uff0c\u4ee5\u4fbf\u5728LCD\u5e93\u4e2d\u4f7f\u7528\u81ea\u7531\u5b57\u4f53\u7684\u7f29\u5199\u3002\u8bf7\u786e\u4fdd\u5c06\u6b64\u5934\u6587\u4ef6\u653e\u5728\u4e0eArduino Sketch\u76f8\u540c\u7684\u4f4d\u7f6e\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u4e0b\u8f7d ",(0,r.yg)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Wio-Terminal/res/GitHubStats.zip"},"\u6b64\u5904")," \u7684\u5b8c\u6574\u4ee3\u7801\u6216\u590d\u5236\u4ee5\u4e0b\u4ee3\u7801\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u4e0a\u4f20\u4ee3\u7801"))),(0,r.yg)("h2",{id:"\u5b8c\u6574\u4ee3\u7801"},"\u5b8c\u6574\u4ee3\u7801"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"\u6ce8:")," \u5c06 ",(0,r.yg)("inlineCode",{parentName:"p"},"ssid")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"password")," \u66f4\u6539\u4e3a\u60a8\u7684\u7f51\u7edcWi-Fi\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n#include <WiFiClientSecure.h>\n#include <ArduinoJson.h>\n#include"Free_Fonts.h"\n#include"TFT_eSPI.h"\nTFT_eSPI tft;\n\nconst char* ssid     = "yourNetworkName";\nconst char* password = "yourNetworkPassword";\n\n//29*27\nconst unsigned char watchIMG[] = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, \n  0x00, 0xFC, 0x07, 0x00, 0x00, 0xFF, 0x1F, 0x00, 0x80, 0x1F, 0x3F, 0x00, \n  0xC0, 0x07, 0x7C, 0x00, 0xE0, 0x03, 0xF8, 0x00, 0xF0, 0xE1, 0xF0, 0x01, \n  0xF8, 0xF1, 0xF1, 0x01, 0xF8, 0xF8, 0xF1, 0x03, 0xFC, 0xF8, 0xF1, 0x03, \n  0xF8, 0xF0, 0xF1, 0x03, 0xF0, 0xF1, 0xF0, 0x01, 0xF0, 0x01, 0xF8, 0x00, \n  0xE0, 0x03, 0x78, 0x00, 0xC0, 0x07, 0x3E, 0x00, 0x80, 0xFF, 0x1F, 0x00, \n  0x00, 0xFE, 0x0F, 0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, \n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  };\n\nconst unsigned char starIMG[] = {\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, \n  0x00, 0xC0, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, \n  0x00, 0xF0, 0x01, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x00, 0xF8, 0x03, 0x00, \n  0x00, 0xF8, 0x07, 0x00, 0x00, 0xFE, 0x0F, 0x00, 0xFE, 0xFF, 0xFF, 0x1F, \n  0xFE, 0xFF, 0xFF, 0x0F, 0xFC, 0xFF, 0xFF, 0x07, 0xF8, 0xFF, 0xFF, 0x03, \n  0xF0, 0xFF, 0xFF, 0x01, 0xC0, 0xFF, 0xFF, 0x00, 0x80, 0xFF, 0x7F, 0x00, \n  0x00, 0xFF, 0x3F, 0x00, 0x80, 0xFF, 0x3F, 0x00, 0x80, 0xFF, 0x3F, 0x00, \n  0x80, 0xFF, 0x3F, 0x00, 0x80, 0xFF, 0x7F, 0x00, 0x80, 0xBF, 0x7F, 0x00, \n  0xC0, 0x1F, 0x7E, 0x00, 0xC0, 0x07, 0x78, 0x00, 0xC0, 0x01, 0x70, 0x00, \n  0x40, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n  };\n\nconst unsigned char forkIMG[] = {\n  0xF8, 0x00, 0x00, 0x00, 0xFE, 0x03, 0x00, 0x00, 0x0F, 0x07, 0x00, 0x01, \n  0x07, 0x07, 0xE0, 0x0F, 0x07, 0x07, 0x78, 0x1E, 0x9E, 0x07, 0x38, 0x38, \n  0xFC, 0x01, 0x38, 0x38, 0xF8, 0x00, 0x38, 0x3C, 0xF8, 0x00, 0xF0, 0x1F, \n  0xF8, 0x00, 0xE0, 0x07, 0xF8, 0x00, 0xC0, 0x07, 0xF8, 0x00, 0xE0, 0x07, \n  0xF8, 0x00, 0xE0, 0x07, 0xF8, 0x00, 0xF8, 0x03, 0xF8, 0x00, 0xFE, 0x01, \n  0xF8, 0xE0, 0xFF, 0x00, 0xF8, 0xFF, 0x7F, 0x00, 0xF8, 0xFF, 0x1F, 0x00, \n  0xF8, 0xFF, 0x03, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, \n  0xF8, 0x01, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0xFC, 0x01, 0x00, 0x00, \n  0x9E, 0x07, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, \n  0x0F, 0x07, 0x00, 0x00, 0xFE, 0x03, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, \n  };\n\nconst char*  server = "api.github.com";  // Server URL\n\nconst char* test_root_ca = \\\n                            "-----BEGIN CERTIFICATE-----\\n"\n                            "MIIEsTCCA5mgAwIBAgIQBOHnpNxc8vNtwCtCuF0VnzANBgkqhkiG9w0BAQsFADBs\\n"\n                            "MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\\n"\n                            "d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j\\n"\n                            "ZSBFViBSb290IENBMB4XDTEzMTAyMjEyMDAwMFoXDTI4MTAyMjEyMDAwMFowcDEL\\n"\n                            "MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3\\n"\n                            "LmRpZ2ljZXJ0LmNvbTEvMC0GA1UEAxMmRGlnaUNlcnQgU0hBMiBIaWdoIEFzc3Vy\\n"\n                            "YW5jZSBTZXJ2ZXIgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC2\\n"\n                            "4C/CJAbIbQRf1+8KZAayfSImZRauQkCbztyfn3YHPsMwVYcZuU+UDlqUH1VWtMIC\\n"\n                            "Kq/QmO4LQNfE0DtyyBSe75CxEamu0si4QzrZCwvV1ZX1QK/IHe1NnF9Xt4ZQaJn1\\n"\n                            "itrSxwUfqJfJ3KSxgoQtxq2lnMcZgqaFD15EWCo3j/018QsIJzJa9buLnqS9UdAn\\n"\n                            "4t07QjOjBSjEuyjMmqwrIw14xnvmXnG3Sj4I+4G3FhahnSMSTeXXkgisdaScus0X\\n"\n                            "sh5ENWV/UyU50RwKmmMbGZJ0aAo3wsJSSMs5WqK24V3B3aAguCGikyZvFEohQcft\\n"\n                            "bZvySC/zA/WiaJJTL17jAgMBAAGjggFJMIIBRTASBgNVHRMBAf8ECDAGAQH/AgEA\\n"\n                            "MA4GA1UdDwEB/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIw\\n"\n                            "NAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2Vy\\n"\n                            "dC5jb20wSwYDVR0fBEQwQjBAoD6gPIY6aHR0cDovL2NybDQuZGlnaWNlcnQuY29t\\n"\n                            "L0RpZ2lDZXJ0SGlnaEFzc3VyYW5jZUVWUm9vdENBLmNybDA9BgNVHSAENjA0MDIG\\n"\n                            "BFUdIAAwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cuZGlnaWNlcnQuY29tL0NQ\\n"\n                            "UzAdBgNVHQ4EFgQUUWj/kK8CB3U8zNllZGKiErhZcjswHwYDVR0jBBgwFoAUsT7D\\n"\n                            "aQP4v0cB1JgmGggC72NkK8MwDQYJKoZIhvcNAQELBQADggEBABiKlYkD5m3fXPwd\\n"\n                            "aOpKj4PWUS+Na0QWnqxj9dJubISZi6qBcYRb7TROsLd5kinMLYBq8I4g4Xmk/gNH\\n"\n                            "E+r1hspZcX30BJZr01lYPf7TMSVcGDiEo+afgv2MW5gxTs14nhr9hctJqvIni5ly\\n"\n                            "/D6q1UEL2tU2ob8cbkdJf17ZSHwD2f2LSaCYJkJA69aSEaRkCldUxPUd1gJea6zu\\n"\n                            "xICaEnL6VpPX/78whQYwvwt/Tv9XBZ0k7YXDK/umdaisLRbvfXknsuvCnQsH6qqF\\n"\n                            "0wGjIChBWUMo0oHjqvbsezt3tkBigAVBRQHvFwY+3sAzm2fTYS5yh+Rp/BIAV0Ae\\n"\n                            "cPUeybQ=\\n"\n                            "-----END CERTIFICATE-----\\n";\n\n// You can use x.509 client certificates if you want\n//const char* test_client_key = "";   //to verify the client\n//const char* test_client_cert = "";  //to verify the client\n\nString github_data;\n\nWiFiClientSecure client;\n\nvoid setup() {\n    //Initialize serial and wait for port to open:\n    Serial.begin(115200);\n    delay(100);\n\n    Serial.print("Attempting to connect to SSID: ");\n    Serial.println(ssid);\n    WiFi.begin(ssid, password);\n\n    tft.begin();\n    tft.setRotation(3);\n    tft.fillScreen(TFT_BLACK);\n    tft.setTextSize(2);\n    tft.setCursor((320 - tft.textWidth("Connecting to Wi-Fi.."))/2, 120);\n    tft.print("Connecting to Wi-Fi..");\n\n    // attempt to connect to Wifi network:\n    while (WiFi.status() != WL_CONNECTED) {\n        Serial.print(".");\n        // wait 1 second for re-trying\n        delay(1000);\n    }\n\n    Serial.print("Connected to ");\n    Serial.println(ssid);\n\n    tft.fillScreen(TFT_BLACK);\n    tft.setCursor((320 - tft.textWidth("Connected!"))/2, 120);\n    tft.print("Connected!");\n\n    getData();\n}\n\nvoid loop() {\n    // do nothing\n}\n\nvoid getData() {\n    client.setCACert(test_root_ca);\n  //client.setCertificate(test_client_key); // for client verification\n  //client.setPrivateKey(test_client_cert); // for client verification\n\n    tft.fillScreen(TFT_BLACK);\n    tft.setCursor((320 - tft.textWidth("Conectting to Server.."))/2, 120);\n    tft.print("Connecting to Server..");\n\n    Serial.println("\\nStarting connection to server...");\n    if (!client.connect(server, 443)) {\n        Serial.println("Connection failed!");\n        tft.fillScreen(TFT_BLACK);\n        tft.setCursor((320 - tft.textWidth("Connection failed!"))/2, 120);\n        tft.print("Connection failed!");\n    } else {\n        Serial.println("Connected to server!");\n        tft.fillScreen(TFT_BLACK);\n        tft.setCursor((320 - tft.textWidth("Connected to Server!"))/2, 120);\n        tft.print("Connected to Server!");\n\n        // Make a HTTP request:\n        client.println("GET https://api.github.com/repos/micropython/micropython HTTP/1.0");\n        client.println("Host: api.github.com");\n        client.println("User-Agent: Seeed-Studio");\n        client.println("Connection: close");\n        client.println();\n\n        while (client.connected()) {\n            String line = client.readStringUntil(\'\\n\');\n            if (line == "\\r") {\n                Serial.println("headers received");\n                break;\n            }\n        }\n\n        while(client.available())\n        {\n          String line = client.readStringUntil(\'\\r\');\n          github_data = line;\n        }\n        //Serial.println(github_data);\n        client.stop();\n        Serial.println("closing connection");          \n    }\n\n    //ArduinoJson to parse data, plesae check ArduinoJson for more info\n    const size_t capacity = 2*JSON_OBJECT_SIZE(18) + JSON_OBJECT_SIZE(77) + 6050;\n    DynamicJsonDocument doc(capacity);\n    deserializeJson(doc, github_data);\n\n    int subscribers_count = doc["subscribers_count"];\n    int forks = doc["forks"];\n    int stargazers_count = doc["stargazers_count"];\n\n    Serial.println(subscribers_count);\n    Serial.println(forks);\n    Serial.println(stargazers_count);\n\n    //TFT SCREEN SESSION\n    tft.setFreeFont(FSS9);\n    tft.setTextSize(1);\n    tft.setTextColor(TFT_WHITE);\n    tft.fillScreen(TFT_BLACK);\n    tft.drawString("MicroPython Github",20,10);\n    tft.drawFastHLine(185,18,120 ,TFT_RED);\n    tft.drawFastHLine(185,19,120 ,TFT_RED);\n    tft.drawFastHLine(185,20,120 ,TFT_RED);\n    tft.drawFastHLine(10,33,300 ,TFT_NAVY);\n    tft.drawFastHLine(10,34,300 ,TFT_NAVY);\n    tft.drawFastHLine(10,35,300 ,TFT_NAVY);\n\n    tft.drawXBitmap(20,60, watchIMG, 29, 27, TFT_WHITE);\n    tft.drawXBitmap(20,120, starIMG, 30, 30, TFT_WHITE);\n    tft.drawXBitmap(20,180, forkIMG, 30, 30, TFT_WHITE);\n\n    tft.setFreeFont(FMB9);\n    tft.drawString("Watchers: ",60, 68);\n    tft.drawString("Stars: ",60, 128);\n    tft.drawString("Forks: ",60, 188);\n\n    tft.drawNumber(subscribers_count, 165, 68);\n    tft.drawNumber(stargazers_count, 130, 128);\n    tft.drawNumber(forks, 130, 188);\n}\n')))}p.isMDXComponent=!0}}]);