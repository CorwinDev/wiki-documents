"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[58837],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(t),d=a,m=g["".concat(s,".").concat(d)]||g[d]||u[d]||o;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},31567:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(9668),a=(t(96540),t(15680));const o={description:"LLM - integrated with BeagleY-AI",title:"ChatGPT - BeagleY-AI",keywords:["BeagleY-AI","LLM","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/respeaker_lite_beagley-ai_chatgpt",last_update:{date:"9/4/2024",author:"ShuishengPeng"}},i=void 0,l={unversionedId:"Edge/Beagle_Bone/Application/ChatGPT_and_BeagleBone",id:"Edge/Beagle_Bone/Application/ChatGPT_and_BeagleBone",title:"ChatGPT - BeagleY-AI",description:"LLM - integrated with BeagleY-AI",source:"@site/docs/Edge/Beagle_Bone/Application/ChatGPT_and_BeagleBone.md",sourceDirName:"Edge/Beagle_Bone/Application",slug:"/respeaker_lite_beagley-ai_chatgpt",permalink:"/respeaker_lite_beagley-ai_chatgpt",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Edge/Beagle_Bone/Application/ChatGPT_and_BeagleBone.md",tags:[],version:"current",lastUpdatedBy:"ShuishengPeng",lastUpdatedAt:1725408e3,formattedLastUpdatedAt:"Sep 4, 2024",frontMatter:{description:"LLM - integrated with BeagleY-AI",title:"ChatGPT - BeagleY-AI",keywords:["BeagleY-AI","LLM","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/respeaker_lite_beagley-ai_chatgpt",last_update:{date:"9/4/2024",author:"ShuishengPeng"}},sidebar:"ProductSidebar",previous:{title:"BeagleBone\xae Solutions",permalink:"/BeagleBone_Solutions"},next:{title:"Grove Cape for BeagleBone\xae Series",permalink:"/Grove_Cape_for_BeagleBone_Series"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Hardware Required",id:"hardware-required",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Install Libraries",id:"install-libraries",level:3},{value:"Code",id:"code",level:3}],c={toc:p},g="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(g,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"introduction"},"Introduction"),(0,a.yg)("p",null,"This project integrates voice input, large model response, and voice output functionalities using a BeagleY-AI. It employs the ReSpeaker Lite as the audio input and output device, enabling seamless interaction with ChatGPT and speech-to-text conversion services."),(0,a.yg)("div",{class:"table-center"},(0,a.yg)("iframe",{width:"730",height:"500",src:"https://files.seeedstudio.com/wiki/Beaglebone_Solutions/bby_chatgpt.mp4",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true"}," ")),(0,a.yg)("h2",{id:"hardware-required"},"Hardware Required"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/ReSpeaker-Lite-p-5928.html"},"ReSpeaker Lite USB 2-Mic Array")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/BeagleYr-AI-beagleboard-orgr-4-TOPS-AI-Acceleration-powered-by-TI-AM67A.html"},"BeagleY-AI"))),(0,a.yg)("h2",{id:"getting-started"},"Getting Started"),(0,a.yg)("p",null,"Check the ",(0,a.yg)("a",{parentName:"p",href:"https://docs.beagle.cc/latest/boards/beagley/ai/02-quick-start.html"},"Getting started documentation")," to set up your BeagleY-AI first, connect your BeagleY-AI to the network."),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("p",{parentName:"admonition"},"Make sure your python version is newer than python3.7.1.",(0,a.yg)("br",null),"\nTo check the version:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre"},"python3 --version\n"))),(0,a.yg)("h3",{id:"install-libraries"},"Install Libraries"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"sudo apt update\nsudo apt install python3-pip python3-dev\nsudo apt install portaudio19-dev\nsudo apt install ffmpeg -y\nsudo apt-get install flac\npip3 install pyaudio\npip3 install speechrecognition\npip3 install openai\npip3 install playsound\n\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Run the following command to configure ReSpeaker Lite:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"pw-metadata -n settings 0 clock.force-rate 16000\n")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"Command to adjust the volume of ReSpeaker Lite:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"alsamixer\n"))),(0,a.yg)("h3",{id:"code"},"Code"),(0,a.yg)("p",null,"This Python code implements a simple voice assistant that listens for a wake word, recognizes user voice commands, converts them to text, generates a response using ",(0,a.yg)("inlineCode",{parentName:"p"},"GPT-4"),", and then converts the response to speech and plays it back."),(0,a.yg)("p",null,"The device first waits for the wake word, then listens for the user's command. Once the command is received, the program generates a response using GPT-4 and plays it back as speech. If it fails to recognize the command three times, it returns to listening for the wake word, you'll need to say the wake word again to initiate a new voice interaction session."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step1"),": Configure API key")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"export OPENAI_API_KEY= 'your-api-key-here'\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step2"),": Create a new python file and enter the following code:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'import speech_recognition as sr\nfrom openai import OpenAI\nfrom pathlib import Path\nfrom pydub import AudioSegment\nimport os\n\n\nclient = OpenAI()\n\ndef text_to_speech(text):\n    speech_file_path = Path(__file__).parent / "speech.mp3"\n    response = client.audio.speech.create(\n    model="tts-1",\n    voice="alloy",\n    input=text\n    )\n\n    response.stream_to_file(speech_file_path)\n    audio = AudioSegment.from_mp3("speech.mp3")\n    audio.export("speech.wav", format="wav")\n    cmdline = \'aplay \' + " speech.wav" \n    os.system(cmdline)\n\n\n\n# Initialize recognizer\nrecognizer = sr.Recognizer()\nmicrophone = sr.Microphone()\n\n# Define the wake word\nWAKE_WORD = "hi"\n\ndef listen_for_wake_word():\n    with microphone as source:\n        recognizer.adjust_for_ambient_noise(source, duration=0.5)\n        print("Listening for wake word...")\n        \n        while True:\n            audio = recognizer.listen(source)\n            # audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)\n            try:\n                text = recognizer.recognize_google(audio).lower()\n                if WAKE_WORD in text:\n                    print(f"Wake word \'{WAKE_WORD}\' detected.")\n                    text_to_speech("hi,what can i do for you?")\n                    return True\n            except sr.UnknownValueError:\n                continue\n            except sr.RequestError as e:\n                print(f"Could not request results; {e}")\n                continue\n\ni=0\ndef listen_for_command():\n    global i\n    with microphone as source:\n        print("Listening for command...")\n        # audio = recognizer.listen(source)\n        audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)\n        try:\n            command = recognizer.recognize_google(audio)\n            print(f"You said: {command}")\n            i=0\n            return command\n        except sr.UnknownValueError:\n            print("Could not understand the audio")\n            i = i+1\n        except sr.RequestError as e:\n            print(f"Could not request results; {e}")\n            i = i+1\n\n\ndef get_gpt_response(prompt):\n    completion = client.chat.completions.create(\n    model="gpt-4o-mini",\n    messages=[\n        {"role": "system", "content": "Your name is speaker, you can answer all kinds of questions for me"},\n        {"role": "user", "content": prompt}\n    ]\n    )\n\n    content_string = completion.choices[0].message.content\n    paragraphs = content_string.split(\'\\n\\n\')\n    combined_content = \' \'.join(paragraphs)\n    return combined_content\n\n\n\n\ndef main():\n    global i\n    while 1:\n        flag = listen_for_wake_word()\n        while flag == True:\n            user_input = listen_for_command()\n            if i==3:\n                flag = False\n                i = 0\n            if user_input:\n                gpt_response = get_gpt_response(user_input)\n                print(f"GPT says: {gpt_response}")\n                text_to_speech(gpt_response)\n                \n\nif __name__ == "__main__":\n    main()\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step3"),": Run the python file.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"python LLM_beagle.py\n")),(0,a.yg)("p",null,"Now you are all set, try waking it up with ",(0,a.yg)("inlineCode",{parentName:"p"},"Hi")," and talking to it!"),(0,a.yg)("div",{class:"table-center"},(0,a.yg)("iframe",{width:"730",height:"500",src:"https://files.seeedstudio.com/wiki/Beaglebone_Solutions/bby_chatgpt.mp4",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true"}," ")))}u.isMDXComponent=!0}}]);