"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[65761],{15680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>h});var i=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||r;return t?i.createElement(h,o(o({ref:n},m),{},{components:t})):i.createElement(h,o({ref:n},m))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},59866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=t(9668),a=(t(96540),t(15680));const r={description:"Build a IR Thermal Imaging Camera using Wio Terminal",title:"\u4f7f\u7528Wio Terminal\u6784\u5efa\u7ea2\u5916\u70ed\u6210\u50cf\u76f8\u673a",keywords:["Wio_terminal Tutorial"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-Terminal-Thermal-Camera",last_update:{date:"3/05/2024",author:"jianjing Huang"}},o="\u4f7f\u7528Wio Terminal\u6784\u5efa\u7ea2\u5916\u70ed\u6210\u50cf\u76f8\u673a",l={unversionedId:"zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Thermal-Camera",id:"zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Thermal-Camera",title:"\u4f7f\u7528Wio Terminal\u6784\u5efa\u7ea2\u5916\u70ed\u6210\u50cf\u76f8\u673a",description:"Build a IR Thermal Imaging Camera using Wio Terminal",source:"@site/docs/zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Thermal-Camera.md",sourceDirName:"zh-CN/Sensor/Wio_Terminal/Tutorial",slug:"/cn/Wio-Terminal-Thermal-Camera",permalink:"/cn/Wio-Terminal-Thermal-Camera",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Thermal-Camera.md",tags:[],version:"current",lastUpdatedBy:"jianjing Huang",lastUpdatedAt:1709596800,formattedLastUpdatedAt:"Mar 5, 2024",frontMatter:{description:"Build a IR Thermal Imaging Camera using Wio Terminal",title:"\u4f7f\u7528Wio Terminal\u6784\u5efa\u7ea2\u5916\u70ed\u6210\u50cf\u76f8\u673a",keywords:["Wio_terminal Tutorial"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-Terminal-Thermal-Camera",last_update:{date:"3/05/2024",author:"jianjing Huang"}},sidebar:"CNSidebar",previous:{title:"\u4f7f\u7528Wio\u7ec8\u7aef\u8bfb\u53d6\u51a0\u72b6\u75c5\u6bd2COVID-19\u5b9e\u65f6\u6570\u636e",permalink:"/cn/Wio-Terminal-Reading-COVID19"},next:{title:"\u4f7f\u7528Wio Terminal\u4e3aRaspberry Pi\u6784\u5efaHMI\u663e\u793a\u5668",permalink:"/cn/Wio-Terminal-HMI"}},s={},p=[{value:"\u6982\u8ff0",id:"\u6982\u8ff0",level:2},{value:"\u96f6\u4ef6\u6e05\u5355",id:"\u96f6\u4ef6\u6e05\u5355",level:2},{value:"\u7279\u70b9",id:"\u7279\u70b9",level:2},{value:"\u6240\u9700Arduino \u5e93",id:"\u6240\u9700arduino-\u5e93",level:2},{value:"Arduino \u6307\u4ee4",id:"arduino-\u6307\u4ee4",level:2},{value:"\u5b8c\u6574\u4ee3\u7801",id:"\u5b8c\u6574\u4ee3\u7801",level:2}],m={toc:p},d="wrapper";function c(e){let{components:n,...t}=e;return(0,a.yg)(d,(0,i.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u4f7f\u7528wio-terminal\u6784\u5efa\u7ea2\u5916\u70ed\u6210\u50cf\u76f8\u673a"},"\u4f7f\u7528Wio Terminal\u6784\u5efa\u7ea2\u5916\u70ed\u6210\u50cf\u76f8\u673a"),(0,a.yg)("p",null,(0,a.yg)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/IRcamera.gif",alt:null})),(0,a.yg)("h2",{id:"\u6982\u8ff0"},"\u6982\u8ff0"),(0,a.yg)("p",null,"\u5229\u7528 ",(0,a.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Infrared-Temperature-Sensor-Array-AMG8833.html"},"Grove  - \u7ea2\u5916\u6e29\u5ea6\u4f20\u611f\u5668\u9635\u5217 (AMG8833)")," \u548c ",(0,a.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Terminal-p-4509.html"},"Wio Terminal"),", \u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u6784\u5efa\u4e00\u4e2a\u4f4e\u6210\u672c\u7684\u7c7b\u4f3c\u4e8e ",(0,a.yg)("a",{parentName:"p",href:"https://www.flir.com/"},"FLIR\u2122")," \u7684\u70ed\u6210\u50cf\u76f8\u673a\uff01\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cGrove - \u7ea2\u5916\u6e29\u5ea6\u4f20\u611f\u5668\u9635\u5217\uff08AMG8833\uff09\u7684\u5206\u8fa8\u7387\u4ec5\u4e3a8\xd78\uff0864\u4e2a\u50cf\u7d20\uff09\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u8db3\u591f\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u7ebf\u6027\u63d2\u503c\u5c06\u5176\u6269\u5c55\u523070\xd770\uff084900\u4e2a\u50cf\u7d20\uff09\uff0c\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002"),(0,a.yg)("p",null,"\u672c\u6f14\u793a\u53d7\u5230 ",(0,a.yg)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=A9F1ezGgaC4&t=365s"},"Kris Kasprzak's \u89c6\u9891"),"\u7684\u542f\u53d1\u3002\u5bf9\u5176\u8fdb\u884c\u4e86\u51e0\u5904\u4fee\u6539\uff0c\u4ee5\u4f7f\u5176\u4e0eWio Terminal\u548cGrove - \u7ea2\u5916\u6e29\u5ea6\u4f20\u611f\u5668\u9635\u5217\uff08AMG8833\uff09\u517c\u5bb9\u3002\u73b0\u5728\uff0c\u5927\u90e8\u5206\u56fe\u5f62\u9996\u5148\u7ed8\u5236\u5230TFT LCD\u7cbe\u7075\u4e2d\uff0c\u4ee5\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u548c\u66f4\u5feb\u7684\u5e27\u7387\u3002\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5341\u5b57\u51c6\u661f\u5728\u5c4f\u5e55\u4e2d\u592e\uff0c\u5e76\u663e\u793a\u51c6\u661f\u5904\u7684\u6e29\u5ea6\u3002"),(0,a.yg)("h2",{id:"\u96f6\u4ef6\u6e05\u5355"},"\u96f6\u4ef6\u6e05\u5355"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Terminal-p-4509.html"},"Wio Terminal"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-Infrared-Temperature-Sensor-Array-AMG8833.html"},"Grove - \u7ea2\u5916\u6e29\u5ea6\u4f20\u611f\u5668\u9635\u5217 (AMG8833)"))),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Terminal-Chassis-Battery-p-4516.html"},"Wio Terminal \u7535\u6c60\u5e95\u5ea7")))),(0,a.yg)("h2",{id:"\u7279\u70b9"},"\u7279\u70b9"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u5728\u5341\u5b57\u51c6\u661f\u5904\u663e\u793a\u51c6\u786e\u7684\u6e29\u5ea6")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u7ea2\u5916\u70ed\u76f8\u673a\u611f\u77e5\u70ed\u7269\u4f53")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u53f3\u4fa7\u6309\u94ae\u53ef\u542f\u7528/\u5173\u95ed\u7f51\u683c\u529f\u80fd"))),(0,a.yg)("h2",{id:"\u6240\u9700arduino-\u5e93"},"\u6240\u9700Arduino \u5e93"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u53f3\u4fa7\u6309\u94ae\u53ef\u542f\u7528/\u5173\u95ed\u7f51\u683c\u529f\u80fdy ",(0,a.yg)("inlineCode",{parentName:"p"},"Seeed_Arduino_LCD"),", \u8bf7\u8bbf\u95ee ",(0,a.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-LCD-Overview/"},"Wio Terminal LCD")," \u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u8bbf\u95ee ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_AMG8833"},"Seeed_AMG8833")," \u5b58\u50a8\u5e93\u5e76\u5c06\u6574\u4e2a\u5b58\u50a8\u5e93\u4e0b\u8f7d\u5230\u672c\u5730\u9a71\u52a8\u5668\u3002"),(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},"\u73b0\u5728\uff0c\u53ef\u4ee5\u5c06Seeed_AMG8833\u5e93\u5b89\u88c5\u5230Arduino IDE\u4e2d\u3002\u6253\u5f00Arduino IDE\uff0c\u70b9\u51fb ",(0,a.yg)("inlineCode",{parentName:"li"},"sketch")," -> ",(0,a.yg)("inlineCode",{parentName:"li"},"Include Library")," -> ",(0,a.yg)("inlineCode",{parentName:"li"},"Add .ZIP Library"),", \u9009\u62e9\u521a\u521a\u4e0b\u8f7d\u7684 ",(0,a.yg)("inlineCode",{parentName:"li"},"Seeed_AMG8833")," \u6587\u4ef6\u3002")))),(0,a.yg)("h2",{id:"arduino-\u6307\u4ee4"},"Arduino \u6307\u4ee4"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u5c06Grove - \u7ea2\u5916\u6e29\u5ea6\u4f20\u611f\u5668\u9635\u5217\uff08AMG8833\uff09\u63d2\u5165Wio Terminal\u7684Grove I2C\u63a5\u53e3\u3002")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u5728 ",(0,a.yg)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Wio-Terminal/res/ThermalCamera.ino"},"\u6b64\u5904")," \u4e0b\u8f7d\u5b8c\u6574\u4ee3\u7801\u6216\u590d\u5236\u4ee5\u4e0b\u4ee3\u7801\u3002")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"\u4e0a\u4f20\u4ee3\u7801\u3002"))),(0,a.yg)("h2",{id:"\u5b8c\u6574\u4ee3\u7801"},"\u5b8c\u6574\u4ee3\u7801"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"\u6ce8:")," \u4e3a\u4e86\u63d0\u9ad8\u8fd9\u4e2a\u7ea2\u5916\u70ed\u6210\u50cf\u76f8\u673a\u7684\u6027\u80fd\u548c\u5e27\u7387\uff0c\u60a8\u53ef\u4ee5\u5c06Wio Terminal\u7684CPU\u901f\u5ea6\u63d0\u5347\u5230200MHz\u3002\u9009\u62e9  ",(0,a.yg)("inlineCode",{parentName:"p"},"Tools")," -> ",(0,a.yg)("inlineCode",{parentName:"p"},"CPU Speed")," -> ",(0,a.yg)("inlineCode",{parentName:"p"},"200MHz(Overclock)")," \u3002"),(0,a.yg)("div",{align:"center"},(0,a.yg)("img",{width:400,src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/CPUboost.png"})),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'\n/*\n\n  This program is for upsizing an 8 x 8 array of thermal camera readings\n  it will size up by 10x and display to a 240 x 320\n  interpolation is linear and "good enough" given the display is a 5-6-5 color palet\n  Total final array is an array of 70 x 70 of internal points only\n\n  Revisions\n  1.0     Kasprzak      Initial code\n  1.1     Anson(Seeed Studio)  Adapted to Wio Terminal with Grove - Infrared Sensor(AMG8833)\n  \n*/\n\n#include <Seeed_AMG8833_driver.h>\n#include <TFT_eSPI.h>                // Include the graphics library (this includes the sprite functions)  \n\nTFT_eSPI    tft = TFT_eSPI(); \nTFT_eSprite Display = TFT_eSprite(&tft);  // Create Sprite object "img" with pointer to "tft" object\n// the pointer is used by pushSprite() to push it onto the TFT\n\nunsigned long CurTime;\n\nuint16_t TheColor;\n// start with some initial colors\nuint16_t MinTemp = 25;\nuint16_t MaxTemp = 35;\n\n// variables for interpolated colors\nbyte red, green, blue;\n\n// variables for row/column interpolation\nbyte i, j, k, row, col, incr;\nfloat intPoint, val, a, b, c, d, ii;\nbyte aLow, aHigh;\n\n// size of a display "pixel"\nbyte BoxWidth = 3;\nbyte BoxHeight = 3;\n\nint x, y;\nchar buf[20];\n\n// variable to toggle the display grid\nint ShowGrid = -1;\n\n// array for the 8 x 8 measured pixels\nfloat pixels[64];\n\n// array for the interpolated array\nfloat HDTemp[80][80];\n\n// create the camara object\nAMG8833 ThermalSensor;\n\n//Toggle the grid on and off\nvoid toggleGrid() {\n  ShowGrid = ShowGrid *-1;\n  Display.fillRect(15, 15, 210, 210, TFT_BLACK);\n  yield();\n}\n\nvoid setup() {\n  Serial.begin(115200);\n\n  // start the display and set the background to black\n  tft.begin();\n  tft.fillScreen(TFT_BLACK);\n\n  //Interrupt to toggle Gird on and off\n  pinMode(WIO_KEY_A, INPUT);\n  attachInterrupt(digitalPinToInterrupt(WIO_KEY_A), toggleGrid, FALLING);\n\n  // set display rotation (you may need to change to 0 depending on your display\n  tft.setRotation(3);\n\n  // show a splash screen\n\n  tft.setCursor(20, 20);\n  tft.setTextColor(TFT_BLUE, TFT_BLACK);\n  tft.print("Thermal ");\n\n  tft.setTextColor(TFT_RED, TFT_BLACK);\n  tft.print("Camera");\n\n  // let sensor boot up\n  bool status = ThermalSensor.init();\n  delay(100);\n\n  if (!status) {\n      Serial.print("Failed to initalized AMG8833");\n  }\n\n  // read the camera for initial testing\n  ThermalSensor.read_pixel_temperature(pixels);\n\n  // check status and display results\n  if (pixels[0] < 0) {\n    while (1) {\n      tft.setCursor(20, 40);\n      tft.setTextColor(TFT_RED, TFT_BLACK);\n      tft.print("Readings: FAIL");\n      delay(500);\n    }\n  }\n  else {\n    tft.setCursor(20, 40);\n    tft.setTextColor(TFT_GREEN, TFT_BLACK);\n    tft.print("Readings: OK");\n    delay(2000);\n  }\n\n  tft.fillScreen(TFT_BLACK);\n  \n  Display.createSprite(TFT_HEIGHT, TFT_WIDTH);\n  Display.fillSprite(TFT_BLACK); \n\n  // get the cutoff points for the color interpolation routines\n  // note this function called when the temp scale is changed\n  Getabcd();\n\n  // draw a legend with the scale that matches the sensors max and min\n  DrawLegend();\n\n}\n\nvoid loop() {  \n  CurTime = millis();\n\n  // draw a large white border for the temperature area\n  Display.fillRect(10, 10, 220, 220, TFT_WHITE);\n\n  // read the sensor\n  ThermalSensor.read_pixel_temperature(pixels);\n  \n  // now that we have an 8 x 8 sensor array\n  // interpolate to get a bigger screen\n  // interpolate the 8 rows (interpolate the 70 column points between the 8 sensor pixels first)\n  for (row = 0; row < 8; row ++) {\n    for (col = 0; col < 70; col ++) {\n      // get the first array point, then the next\n      // also need to bump by 8 for the subsequent rows\n      aLow =  col / 10 + (row * 8);\n      aHigh = (col / 10) + 1 + (row * 8);\n      // get the amount to interpolate for each of the 10 columns\n      // here were doing simple linear interpolation mainly to keep performace high and\n      // display is 5-6-5 color palet so fancy interpolation will get lost in low color depth\n      intPoint =   (( pixels[aHigh] - pixels[aLow] ) / 10.0 );\n      // determine how much to bump each column (basically 0-9)\n      incr = col % 10;\n      // find the interpolated value\n      val = (intPoint * incr ) +  pixels[aLow];\n      // store in the 70 x 70 array\n      // since display is pointing away, reverse row to transpose row data\n      HDTemp[ (7 - row) * 10][col] = val;\n\n    }\n  }\n\n  // now that we have raw data with 70 columns\n  // interpolate each of the 70 columns\n  // forget Arduino..no where near fast enough..Teensy at > 72 mhz is the starting point\n\n  for (col = 0; col < 70; col ++) {\n    for (row = 0; row < 70; row ++) {\n      // get the first array point, then the next\n      // also need to bump by 8 for the subsequent cols\n      aLow =  (row / 10 ) * 10;\n      aHigh = aLow + 10;\n      // get the amount to interpolate for each of the 10 columns\n      // here were doing simple linear interpolation mainly to keep performace high and\n      // display is 5-6-5 color palet so fancy interpolation will get lost in low color depth\n      intPoint =   (( HDTemp[aHigh][col] - HDTemp[aLow][col] ) / 10.0 );\n      // determine how much to bump each column (basically 0-9)\n      incr = row % 10;\n      // find the interpolated value\n      val = (intPoint * incr ) +  HDTemp[aLow][col];\n      // store in the 70 x 70 array\n      HDTemp[ row ][col] = val;\n    }\n  }\n\n\n  //display the 70 x 70 array\n  DisplayGradient();\n\n  //Crosshair in the middle of the screen\n  Display.drawCircle(115, 115, 5, TFT_WHITE);\n  Display.drawFastVLine(115, 105, 20, TFT_WHITE);\n  Display.drawFastHLine(105, 115, 20, TFT_WHITE);\n\n  //Push the Sprite to the screen\n  Display.pushSprite(0, 0);\n\n  //Displaying the temp at the middle of the Screen\n  tft.setRotation(3);\n  tft.setTextColor(TFT_WHITE);\n  tft.drawFloat(HDTemp[35][35], 2, 90, 20);\n\n  //Uncomment this to print out frame rate\n  Serial.print("Frame rate: "); Serial.println(1/(0.001*(millis() - CurTime)));\n\n}\n\n// function to display the results\nvoid DisplayGradient() {\n\n  tft.setRotation(4);\n\n  // rip through 70 rows\n  for (row = 0; row < 70; row ++) {\n\n    // fast way to draw a non-flicker grid--just make every 10 pixels 2x2 as opposed to 3x3\n    // drawing lines after the grid will just flicker too much\n    if (ShowGrid < 0) {\n      BoxWidth = 3;\n    }\n    else {\n      if ((row % 10 == 9) ) {\n        BoxWidth = 2;\n      }\n      else {\n        BoxWidth = 3;\n      }\n    }\n    // then rip through each 70 cols\n    for (col = 0; col < 70; col++) {\n\n      // fast way to draw a non-flicker grid--just make every 10 pixels 2x2 as opposed to 3x3\n      if (ShowGrid < 0) {\n        BoxHeight = 3;\n      }\n      else {\n        if ( (col % 10 == 9)) {\n          BoxHeight = 2;\n        }\n        else {\n          BoxHeight = 3;\n        }\n      }\n      // finally we can draw each the 70 x 70 points, note the call to get interpolated color\n      Display.fillRect((row * 3) + 15, (col * 3) + 15, BoxWidth, BoxHeight, GetColor(HDTemp[row][col]));\n    }\n  }\n  \n}\n\n// my fast yet effective color interpolation routine\nuint16_t GetColor(float val) {\n\n  /*\n    pass in value and figure out R G B\n    several published ways to do this I basically graphed R G B and developed simple linear equations\n    again a 5-6-5 color display will not need accurate temp to R G B color calculation\n\n    equations based on\n    http://web-tech.ga-usa.com/2012/05/creating-a-custom-hot-to-cold-temperature-color-gradient-for-use-with-rrdtool/index.html\n\n  */\n\n  red = constrain(255.0 / (c - b) * val - ((b * 255.0) / (c - b)), 0, 255);\n\n  if ((val > MinTemp) & (val < a)) {\n    green = constrain(255.0 / (a - MinTemp) * val - (255.0 * MinTemp) / (a - MinTemp), 0, 255);\n  }\n  else if ((val >= a) & (val <= c)) {\n    green = 255;\n  }\n  else if (val > c) {\n    green = constrain(255.0 / (c - d) * val - (d * 255.0) / (c - d), 0, 255);\n  }\n  else if ((val > d) | (val < a)) {\n    green = 0;\n  }\n\n  if (val <= b) {\n    blue = constrain(255.0 / (a - b) * val - (255.0 * b) / (a - b), 0, 255);\n  }\n  else if ((val > b) & (val <= d)) {\n    blue = 0;\n  }\n  else if (val > d) {\n    blue = constrain(240.0 / (MaxTemp - d) * val - (d * 240.0) / (MaxTemp - d), 0, 240);\n  }\n\n  // use the displays color mapping function to get 5-6-5 color palet (R=5 bits, G=6 bits, B-5 bits)\n  return Display.color565(red, green, blue);\n\n}\n\n// function to get the cutoff points in the temp vs RGB graph\nvoid Getabcd() {\n\n  a = MinTemp + (MaxTemp - MinTemp) * 0.2121;\n  b = MinTemp + (MaxTemp - MinTemp) * 0.3182;\n  c = MinTemp + (MaxTemp - MinTemp) * 0.4242;\n  d = MinTemp + (MaxTemp - MinTemp) * 0.8182;\n\n}\n\n// function to draw a legend\nvoid DrawLegend() {\n\n  //color legend with max and min text\n  j = 0;\n\n  float inc = (MaxTemp - MinTemp ) / 160.0;\n\n  for (ii = MinTemp; ii < MaxTemp; ii += inc) {\n    tft.drawFastHLine(260, 200 - j++, 30, GetColor(ii));\n  }\n\n  tft.setTextSize(2);\n  tft.setCursor(245, 20);\n  tft.setTextColor(TFT_WHITE, TFT_BLACK);\n  sprintf(buf, "%2d/%2d", MaxTemp, (int) (MaxTemp * 1.8) + 32);\n  tft.print(buf);\n\n  tft.setTextSize(2);\n  tft.setCursor(245, 210);\n  tft.setTextColor(TFT_WHITE, TFT_BLACK);\n  sprintf(buf, "%2d/%2d", MinTemp, (int) (MinTemp * 1.8) + 32);\n  tft.print(buf);\n\n}\n\n// END OF CODE\n')))}c.isMDXComponent=!0}}]);