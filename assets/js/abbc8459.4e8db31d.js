"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[11129],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},S=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),S=r,g=p["".concat(l,".").concat(S)]||p[S]||d[S]||a;return t?i.createElement(g,o(o({ref:n},u),{},{components:t})):i.createElement(g,o({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=S;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}S.displayName="MDXCreateElement"},19365:(e,n,t)=>{t.d(n,{A:()=>o});var i=t(96540),r=t(20053);const a={tabItem:"tabItem_Ymn6"};function o(e){let{children:n,hidden:t,className:o}=e;return i.createElement("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,o),hidden:t},n)}},11470:(e,n,t)=>{t.d(n,{A:()=>w});var i=t(58168),r=t(96540),a=t(20053),o=t(23104),s=t(56347),l=t(57485),c=t(31682),u=t(89466);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function S(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const i=(0,s.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(i.location.search);n.set(a,e),i.replace({...i.location,search:n.toString()})}),[a,i])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,a=d(e),[o,s]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!S({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[l,c]=g({queryString:t,groupId:i}),[p,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,a]=(0,u.Dv)(t);return[i,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:i}),f=(()=>{const e=l??p;return S({value:e,tabValues:a})?e:null})();(0,r.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!S({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),m(e)}),[c,m,a]),tabValues:a}}var f=t(92303);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:n,block:t,selectedValue:s,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.a_)(),d=e=>{const n=e.currentTarget,t=u.indexOf(n),i=c[t].value;i!==s&&(p(n),l(i))},S=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n)},c.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,i.A)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>u.push(e),onKeyDown:S,onClick:d},o,{className:(0,a.A)("tabs__item",h.tabItem,o?.className,{"tabs__item--active":s===n})}),t??n)})))}function b(e){let{lazy:n,children:t,selectedValue:i}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i}))))}function W(e){const n=m(e);return r.createElement("div",{className:(0,a.A)("tabs-container",h.tabList)},r.createElement(y,(0,i.A)({},e,n)),r.createElement(b,(0,i.A)({},e,n)))}function w(e){const n=(0,f.A)();return r.createElement(W,(0,i.A)({key:String(n)},e))}},21490:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var i=t(58168),r=(t(96540),t(15680)),a=t(11470),o=t(19365);const s={description:"WiFi Usage on Seeed Studio XIAO ESP32C3",title:"WiFi Usage",keywords:["xiao"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/XIAO_ESP32C3_WiFi_Usage",last_update:{date:"07/26/2024",author:"Spencer"}},l=void 0,c={unversionedId:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C3/XIAO_ESP32C3_WiFi_Usage",id:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C3/XIAO_ESP32C3_WiFi_Usage",title:"WiFi Usage",description:"WiFi Usage on Seeed Studio XIAO ESP32C3",source:"@site/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C3/XIAO_ESP32C3_WiFi_Usage.md",sourceDirName:"Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C3",slug:"/XIAO_ESP32C3_WiFi_Usage",permalink:"/XIAO_ESP32C3_WiFi_Usage",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/SeeedStudio_XIAO/SeeedStudio_XIAO_ESP32C3/XIAO_ESP32C3_WiFi_Usage.md",tags:[],version:"current",lastUpdatedBy:"Spencer",lastUpdatedAt:1721952e3,formattedLastUpdatedAt:"Jul 26, 2024",frontMatter:{description:"WiFi Usage on Seeed Studio XIAO ESP32C3",title:"WiFi Usage",keywords:["xiao"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/XIAO_ESP32C3_WiFi_Usage",last_update:{date:"07/26/2024",author:"Spencer"}},sidebar:"ProductSidebar",previous:{title:"XIAO ESP32C3 with Zephyr(RTOS)",permalink:"/XIAO-ESP32C3-Zephyr"},next:{title:"Bluetooth Usage",permalink:"/XIAO_ESP32C3_Bluetooth_Usage"}},u={},p=[{value:"Start",id:"start",level:2},{value:"Hardware set up",id:"hardware-set-up",level:2},{value:"Mode 1: STA Mode (Station Mode) - Scan WiFi networks",id:"mode-1-sta-mode-station-mode---scan-wifi-networks",level:2},{value:"Scan Wi-Fi access points",id:"scan-wi-fi-access-points",level:3},{value:"Connect to a WiFi network",id:"connect-to-a-wifi-network",level:3},{value:"Mode 2: Soft-AP mode (Working as STA) - Use as an Access Point",id:"mode-2-soft-ap-mode-working-as-sta---use-as-an-access-point",level:2},{value:"XIAO ESP32C3 &amp; Home Assistant",id:"xiao-esp32c3--home-assistant",level:2},{value:"Reference",id:"reference",level:2},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],d={toc:p},S="wrapper";function g(e){let{components:n,...t}=e;return(0,r.yg)(S,(0,i.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"start"},"Start"),(0,r.yg)("p",null,"Seeed Studio XIAO ESP32C3 supports WiFi connectivity with IEEE 802.11b/g/n. This wiki will introduce the basics of WiFi usage on this board."),(0,r.yg)("admonition",{title:"attention",type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"\u26a0\ufe0f Please be careful when using the board as a hotspot (access point). It may overheat and cause burns.")),(0,r.yg)("h2",{id:"hardware-set-up"},"Hardware set up"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Step 1.")," Connect the included ",(0,r.yg)("strong",{parentName:"li"},"WiFi/ Bluetooth antenna")," to the ",(0,r.yg)("strong",{parentName:"li"},"IPEX connector")," on the board")),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO_WiFi/wifi-6.png",alt:"pir",width:130,height:"auto"})),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Step 2.")," Connect XIAO ESP32C3 to your computer via a USB Type-C cable")),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO_WiFi/cable-connect.png",alt:"pir",width:120,height:"auto"})),(0,r.yg)("h2",{id:"mode-1-sta-mode-station-mode---scan-wifi-networks"},"Mode 1: STA Mode (Station Mode) - Scan WiFi networks"),(0,r.yg)("h3",{id:"scan-wi-fi-access-points"},"Scan Wi-Fi access points"),(0,r.yg)("p",null,"In this example, we are going to use XIAO ESP32C3 to scan available WiFi networks around it. Here the board will be configured in Station (STA) Mode."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Step 1.")," Copy and paste the code below into Arduino IDE")),(0,r.yg)(a.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"basic wifi scan",label:"Basic Wi-Fi Scan",default:!0,mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "WiFi.h"\n\nvoid setup() {\n  Serial.begin(115200);\n\n  // Set WiFi to station mode and disconnect from an AP if it was previously connected\n  WiFi.mode(WIFI_STA);\n  WiFi.disconnect();\n  delay(100);\n\n  Serial.println("Setup done");\n}\n\nvoid loop() {\n  Serial.println("scan start");\n\n  // WiFi.scanNetworks will return the number of networks found\n  int n = WiFi.scanNetworks();\n  Serial.println("scan done");\n  if (n == 0) {\n    Serial.println("no networks found");\n  } else {\n    Serial.print(n);\n    Serial.println(" networks found");\n    for (int i = 0; i < n; ++i) {\n      // Print SSID and RSSI for each network found\n      Serial.print(i + 1);\n      Serial.print(": ");\n      Serial.print(WiFi.SSID(i));\n      Serial.print(" (");\n      Serial.print(WiFi.RSSI(i));\n      Serial.print(")");\n      Serial.println((WiFi.encryptionType(i) == WIFI_AUTH_OPEN) ? " " : "*");\n      delay(10);\n    }\n  }\n  Serial.println("");\n\n  // Wait a bit before scanning again\n  delay(5000);\n}\n'))),(0,r.yg)(o.A,{value:"advan-wifi-scan",label:"Advance Wi-Fi Scan",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp",metastring:'title="https://github.com/espressif/arduino-esp32/blob/master/libraries/WiFi/examples/WiFiScan/WiFiScan.ino"',title:'"https://github.com/espressif/arduino-esp32/blob/master/libraries/WiFi/examples/WiFiScan/WiFiScan.ino"'},'/*\n *  This sketch demonstrates how to scan WiFi networks.\n *  The API is based on the Arduino WiFi Shield library, but has significant changes as newer WiFi functions are supported.\n *  E.g. the return value of `encryptionType()` different because more modern encryption is supported.\n */\n#include "WiFi.h"\n\nvoid setup() {\n  Serial.begin(115200);\n\n  // Set WiFi to station mode and disconnect from an AP if it was previously connected.\n  WiFi.mode(WIFI_STA);\n  WiFi.disconnect();\n  delay(100);\n\n  Serial.println("Setup done");\n}\n\nvoid loop() {\n  Serial.println("Scan start");\n\n  // WiFi.scanNetworks will return the number of networks found.\n  int n = WiFi.scanNetworks();\n  Serial.println("Scan done");\n  if (n == 0) {\n    Serial.println("no networks found");\n  } else {\n    Serial.print(n);\n    Serial.println(" networks found");\n    Serial.println("Nr | SSID                             | RSSI | CH | Encryption");\n    for (int i = 0; i < n; ++i) {\n      // Print SSID and RSSI for each network found\n      Serial.printf("%2d", i + 1);\n      Serial.print(" | ");\n      Serial.printf("%-32.32s", WiFi.SSID(i).c_str());\n      Serial.print(" | ");\n      Serial.printf("%4ld", WiFi.RSSI(i));\n      Serial.print(" | ");\n      Serial.printf("%2ld", WiFi.channel(i));\n      Serial.print(" | ");\n      switch (WiFi.encryptionType(i)) {\n        case WIFI_AUTH_OPEN:            Serial.print("open"); break;\n        case WIFI_AUTH_WEP:             Serial.print("WEP"); break;\n        case WIFI_AUTH_WPA_PSK:         Serial.print("WPA"); break;\n        case WIFI_AUTH_WPA2_PSK:        Serial.print("WPA2"); break;\n        case WIFI_AUTH_WPA_WPA2_PSK:    Serial.print("WPA+WPA2"); break;\n        case WIFI_AUTH_WPA2_ENTERPRISE: Serial.print("WPA2-EAP"); break;\n        case WIFI_AUTH_WPA3_PSK:        Serial.print("WPA3"); break;\n        case WIFI_AUTH_WPA2_WPA3_PSK:   Serial.print("WPA2+WPA3"); break;\n        case WIFI_AUTH_WAPI_PSK:        Serial.print("WAPI"); break;\n        default:                        Serial.print("unknown");\n      }\n      Serial.println();\n      delay(10);\n    }\n  }\n  Serial.println("");\n\n  // Delete the scan result to free memory for code below.\n  WiFi.scanDelete();\n\n  // Wait a bit before scanning again.\n  delay(5000);\n}\n')))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Step 2.")," Upload the codes and open the Serial Monitor to start scanning for WiFi networks"),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO_WiFi/wifi-1.jpg",alt:"pir",width:500,height:"auto"})),(0,r.yg)("h3",{id:"connect-to-a-wifi-network"},"Connect to a WiFi network"),(0,r.yg)("p",null,"In this example, we are going to use XIAO ESP32C3 to connect to a WiFi network."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Step 1.")," Copy and paste the code below into Arduino IDE")),(0,r.yg)(a.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"basic wifi connect",label:"Basic Wi-Fi connect",default:!0,mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <WiFi.h>\n\nconst char* ssid = "your-ssid";\nconst char* password = "your-password";\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(10);\n\n  // We start by connecting to a WiFi network\n  Serial.println();\n  Serial.println();\n  Serial.print("Connecting to ");\n  Serial.println(ssid);\n\n  WiFi.begin(ssid, password);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(".");\n  }\n\n  Serial.println("");\n  Serial.println("WiFi connected");\n  Serial.println("IP address: ");\n  Serial.println(WiFi.localIP());\n}\nvoid loop() {}\n'))),(0,r.yg)(o.A,{value:"advan-wifi-connect",label:"Advance Wi-Fi connect",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp",metastring:'title="https://github.com/espressif/arduino-esp32/blob/master/libraries/WiFi/examples/WiFiClientConnect/WiFiClientConnect.ino"',title:'"https://github.com/espressif/arduino-esp32/blob/master/libraries/WiFi/examples/WiFiClientConnect/WiFiClientConnect.ino"'},'#include <WiFi.h>\n\nconst char *ssid = "your-ssid";\nconst char *password = "your-password";\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(10);\n\n  // We start by connecting to a WiFi network\n  Serial.println();\n  Serial.println();\n  Serial.print("Connecting to ");\n  Serial.println(ssid);\n\n  WiFi.begin(ssid, password);\n\n  // Will try for about 10 seconds (20x 500ms)\n  int tryDelay = 500;\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(".");\n  }\n\n  while (true) {\n      switch (WiFi.status()) {\n        case WL_NO_SSID_AVAIL: Serial.println("[WiFi] SSID not found"); break;\n        case WL_CONNECT_FAILED:\n          Serial.print("[WiFi] Failed - WiFi not connected! Reason: ");\n          return;\n          break;\n        case WL_CONNECTION_LOST: Serial.println("[WiFi] Connection was lost"); break;\n        case WL_SCAN_COMPLETED:  Serial.println("[WiFi] Scan is completed"); break;\n        case WL_DISCONNECTED:    Serial.println("[WiFi] WiFi is disconnected"); break;\n        case WL_CONNECTED:\n          Serial.println("[WiFi] WiFi is connected!");\n          Serial.print("[WiFi] IP address: ");\n          Serial.println(WiFi.localIP());\n          return;\n          break;\n        default:\n          Serial.print("[WiFi] WiFi Status: ");\n          Serial.println(WiFi.status());\n          break;\n      }\n          delay(tryDelay);\n\n    if (numberOfTries <= 0) {\n      Serial.print("[WiFi] Failed to connect to WiFi!");\n      // Use disconnect function to force stop trying to connect\n      WiFi.disconnect();\n      return;\n    } else {\n      numberOfTries--;\n    }\n  }\n\n  Serial.println("");\n  Serial.println("WiFi connected");\n  Serial.println("IP address: ");\n  Serial.println(WiFi.localIP());\n}\nvoid loop() {}\n')))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Step 2.")," Upload the codes and open the Serial Monitor to check that the board is connected to the WiFI network"),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO_WiFi/wifi-2.jpg",alt:"pir",width:500,height:"auto"})),(0,r.yg)("h2",{id:"mode-2-soft-ap-mode-working-as-sta---use-as-an-access-point"},"Mode 2: Soft-AP mode (Working as STA) - Use as an Access Point"),(0,r.yg)("p",null,"In this example, we are going to use XIAO ESP32C3 as a WiFi access point where other devices can be connected to it. This is similar to WiFi hotspot feature on mobile phones."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Step 1.")," Copy and paste the code below into Arduino IDE")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "WiFi.h"\nvoid setup() {\n  Serial.begin(115200);\n  WiFi.softAP("ESP_AP", "123456789");\n}\n\nvoid loop() {\n  Serial.print("Host Name:");\n  Serial.println(WiFi.softAPgetHostname());\n  Serial.print("Host IP:");\n  Serial.println(WiFi.softAPIP());\n  Serial.print("Host IPV6:");\n#if ESP_ARDUINO_VERSION_MAJOR < 3\n  Serial.println(WiFi.softAPIPv6());\n#else\n  Serial.println(WiFi.softAPlinkLocalIPv6());\n#endif\n  Serial.print("Host SSID:");\n  Serial.println(WiFi.SSID());\n  Serial.print("Host Broadcast IP:");\n  Serial.println(WiFi.softAPBroadcastIP());\n  Serial.print("Host mac Address:");\n  Serial.println(WiFi.softAPmacAddress());\n  Serial.print("Number of Host Connections:");\n  Serial.println(WiFi.softAPgetStationNum());\n  Serial.print("Host Network ID:");\n  Serial.println(WiFi.softAPNetworkID());\n  Serial.print("Host Status:");\n  Serial.println(WiFi.status());\n  delay(1000);\n}\n')),(0,r.yg)("admonition",{title:"note",type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"If your ESP32 development board version already update to 3.0.0, you need to change the code from ",(0,r.yg)("inlineCode",{parentName:"p"},"softAPIPv6()")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"softAPlinkLocalIPv6()"),".")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Step 2.")," Upload the codes and open the Serial Monitor to check more details about the WiFI access point"),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO_WiFi/wifi-3.png",alt:"pir",width:700,height:"auto"})),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Step 3.")," Scan for WiFi networks on a PC or mobile phone and you will be able to connect to this newly created network using the password we specified in the code"),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO_WiFi/wifi-4.png",alt:"pir",width:"{300}",height:"auto"})),(0,r.yg)("p",null,"Now you will see that the ",(0,r.yg)("strong",{parentName:"p"},"Number of Host Connections")," on serial monitor has been updated to ",(0,r.yg)("strong",{parentName:"p"},"1")),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/XIAO_WiFi/wifi-5.png",alt:"pir",width:700,height:"auto"})),(0,r.yg)("h2",{id:"xiao-esp32c3--home-assistant"},"XIAO ESP32C3 & Home Assistant"),(0,r.yg)("p",null,"We are pleased to announce that we have made support for the XIAO ESP32C3 access to ESPHome and Home Assistant!"),(0,r.yg)("p",null,"For more information on this section, please refer to the relevant tutorials."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/Connect-Grove-to-Home-Assistant-ESPHome/"},"Connect Grove Modules to Home Assistant using ESPHome")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/h68k-ha-esphome/"},"LinkStar Home Assistant"))),(0,r.yg)("h2",{id:"reference"},"Reference"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://docs.espressif.com/projects/arduino-esp32/en/latest/api/wifi.html"},"Wi-Fi API - esp-arduino"))),(0,r.yg)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,r.yg)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,r.yg)("div",{class:"button_tech_support_container"},(0,r.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,r.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,r.yg)("div",{class:"button_tech_support_container"},(0,r.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,r.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}g.isMDXComponent=!0}}]);