"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[53717],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>v});var r=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),s=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(o.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),u=i,v=d["".concat(o,".").concat(u)]||d[u]||g[u]||a;return t?r.createElement(v,l(l({ref:n},p),{},{components:t})):r.createElement(v,l({ref:n},p))}));function v(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=u;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=e,c[d]="string"==typeof e?e:i,l[1]=c;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},91056:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=t(58168),i=(t(96540),t(15680));const a={description:"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ecb\u7ecd",title:"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ecb\u7ecd",keywords:["Wio_terminal Bluetooth"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-terminal-BLE-introduction",last_update:{date:"3/08/2024",author:"\u91d1\u83ca"}},l="**\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ecb\u7ecd**",c={unversionedId:"zh-CN/Sensor/Wio_Terminal/Hardware_Overview/Bluetooth/CN-Wio-terminal-BLE-introduction",id:"zh-CN/Sensor/Wio_Terminal/Hardware_Overview/Bluetooth/CN-Wio-terminal-BLE-introduction",title:"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ecb\u7ecd",description:"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ecb\u7ecd",source:"@site/docs/zh-CN/Sensor/Wio_Terminal/Hardware_Overview/Bluetooth/CN-Wio-terminal-BLE-introduction.md",sourceDirName:"zh-CN/Sensor/Wio_Terminal/Hardware_Overview/Bluetooth",slug:"/cn/Wio-terminal-BLE-introduction",permalink:"/cn/Wio-terminal-BLE-introduction",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/Wio_Terminal/Hardware_Overview/Bluetooth/CN-Wio-terminal-BLE-introduction.md",tags:[],version:"current",lastUpdatedBy:"\u91d1\u83ca",lastUpdatedAt:1709856e3,formattedLastUpdatedAt:"Mar 8, 2024",frontMatter:{description:"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ecb\u7ecd",title:"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ecb\u7ecd",keywords:["Wio_terminal Bluetooth"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-terminal-BLE-introduction",last_update:{date:"3/08/2024",author:"\u91d1\u83ca"}},sidebar:"CNSidebar",previous:{title:"Bluetooth\u6982\u8ff0",permalink:"/cn/Wio-Terminal-Bluetooth-Overview"},next:{title:"Web Bluetooth APIs",permalink:"/cn/Wio-Terminal-Web-Bluetooth"}},o={},s=[{value:"<strong>\u6240\u9700\u786c\u4ef6</strong>",id:"\u6240\u9700\u786c\u4ef6",level:2},{value:"<strong>\u6982\u8ff0</strong>",id:"\u6982\u8ff0",level:2},{value:"<strong>\u4ec0\u4e48\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668</strong>",id:"\u4ec0\u4e48\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668",level:3},{value:"<strong>\u4ec0\u4e48\u662f UUID</strong>",id:"\u4ec0\u4e48\u662f-uuid",level:3},{value:"<strong>Wio terminal\u4e0a\u7684BLE\u670d\u52a1\u5668</strong>",id:"wio-terminal\u4e0a\u7684ble\u670d\u52a1\u5668",level:3},{value:"<strong>nRF Connect APP \u7684\u4f7f\u7528</strong>",id:"nrf-connect-app-\u7684\u4f7f\u7528",level:3},{value:"<strong>BLE \u5ba2\u6237\u7aef\u7684\u4f7f\u7528</strong>",id:"ble-\u5ba2\u6237\u7aef\u7684\u4f7f\u7528",level:2},{value:"\u5ba2\u6237\u7aef\u4ee3\u7801\u7247\u6bb5",id:"\u5ba2\u6237\u7aef\u4ee3\u7801\u7247\u6bb5",level:3},{value:"<strong>\u5ba2\u6237\u7aef\u4ee3\u7801</strong>",id:"\u5ba2\u6237\u7aef\u4ee3\u7801",level:3},{value:"<strong>\u4ee3\u7801\u8fd0\u884c\u7ed3\u679c</strong>",id:"\u4ee3\u7801\u8fd0\u884c\u7ed3\u679c",level:3},{value:"<strong>BLE \u670d\u52a1\u5668\u7684\u4f7f\u7528</strong>",id:"ble-\u670d\u52a1\u5668\u7684\u4f7f\u7528",level:2},{value:"<strong>\u670d\u52a1\u5668\u4ee3\u7801\u7247\u6bb5</strong>",id:"\u670d\u52a1\u5668\u4ee3\u7801\u7247\u6bb5",level:3},{value:"<strong>\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u901a\u4fe1</strong>",id:"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u901a\u4fe1",level:3},{value:"\u670d\u52a1\u5668\u4ee3\u7801",id:"\u670d\u52a1\u5668\u4ee3\u7801",level:3},{value:"\u670d\u52a1\u5668\u8fde\u63a5\u5230\u667a\u80fd\u624b\u673a\u7684\u5ba2\u6237\u7aef",id:"\u670d\u52a1\u5668\u8fde\u63a5\u5230\u667a\u80fd\u624b\u673a\u7684\u5ba2\u6237\u7aef",level:2},{value:"<strong>\u4ee3\u7801</strong>",id:"\u4ee3\u7801",level:3}],p={toc:s},d="wrapper";function g(e){let{components:n,...t}=e;return(0,i.yg)(d,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ecb\u7ecd"},(0,i.yg)("strong",{parentName:"h1"},"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ecb\u7ecd")),(0,i.yg)("p",null,"\u672cWiki\u4ecb\u7ecd\u4e86\u4f7f\u7528Wio\u7ec8\u7aef\u901a\u8fc7BLE\u8fdb\u884c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u901a\u4fe1\u7684\u529f\u80fd\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:"{400}",src:"https://files.seeedstudio.com/wiki/wio%20terminal%20bluetooth/Wio-connect.png"})),(0,i.yg)("h2",{id:"\u6240\u9700\u786c\u4ef6"},(0,i.yg)("strong",{parentName:"h2"},"\u6240\u9700\u786c\u4ef6")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Wio-Terminal-p-4509.html"},(0,i.yg)("strong",{parentName:"a"},"Wio terminal")))),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"\u5982\u679c\u60a8\u62e5\u6709Wio\u7ec8\u7aef\uff0c\u8bf7\u8bbf\u95ee ",(0,i.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-Bluetooth-Overview/"},(0,i.yg)("strong",{parentName:"a"},"Bluetooth \u6982\u8ff0"))," \u4ee5\u83b7\u53d6\u6700\u65b0\u7684RTL8720 BLE\u56fa\u4ef6\u5e76\u4e0b\u8f7d\u6240\u9700\u7684Arduino\u5e93\u3002")),(0,i.yg)("h2",{id:"\u6982\u8ff0"},(0,i.yg)("strong",{parentName:"h2"},"\u6982\u8ff0")),(0,i.yg)("h3",{id:"\u4ec0\u4e48\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668"},(0,i.yg)("strong",{parentName:"h3"},"\u4ec0\u4e48\u662f\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u53d1\u51fa\u6570\u636e\u901a\u4fe1\u8bf7\u6c42\uff0c\u5141\u8bb8\u8bbe\u5907\u4e0e\u5176\u4ed6\u84dd\u7259\u8bbe\u5907\u8fdb\u884c\u65e0\u7ebf\u6570\u636e\u4ea4\u6362\u3002"),(0,i.yg)("li",{parentName:"ul"},"\u670d\u52a1\u5668\u5411\u5ba2\u6237\u7aef\u63d0\u4f9b\u6570\u636e\u670d\u52a1\uff0c\u5b83\u901a\u8fc7\u7279\u5f81\u5c06\u6570\u636e\u5c01\u88c5\u8d77\u6765\u3002\u591a\u4e2a\u7279\u5f81\u7ec4\u6210\u4e00\u4e2a\u670d\u52a1\uff0c\u56e0\u6b64\u670d\u52a1\u662f\u57fa\u672c\u7684BLE\u5e94\u7528\u7a0b\u5e8f\u3002"),(0,i.yg)("li",{parentName:"ul"},"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u662f\u901a\u4fe1\u5173\u7cfb\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u4e3b\u8bbe\u5907\u6216\u4ece\u8bbe\u5907\u3002")),(0,i.yg)("h3",{id:"\u4ec0\u4e48\u662f-uuid"},(0,i.yg)("strong",{parentName:"h3"},"\u4ec0\u4e48\u662f UUID")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"UUID\u901a\u5e38\u7528\u4e8e\u6807\u8bc6\u9700\u8981\u5728\u7cfb\u7edf\u6216\u7f51\u7edc\u4e2d\u4fdd\u6301\u552f\u4e00\u6027\u7684\u4fe1\u606f\u3002"),(0,i.yg)("li",{parentName:"ul"},"\u6240\u6709BLE\u8bbe\u5907\u90fd\u5177\u6709\u670d\u52a1UUID\u3001\u7279\u5f81UUID\u548c\u63cf\u8ff0\u7b26UUID\uff0c\u4ea7\u54c1\u7684\u6240\u6709UUID\u90fd\u5e94\u5177\u6709\u552f\u4e00\u6027\uff0c\u5e76\u4e14\u91cd\u590d\u7684\u6982\u7387\u5f88\u4f4e\uff0c\u56e0\u6b64\u5b83\u4eec\u5728\u6570\u636e\u5e93\u4e2d\u4f5c\u4e3a\u5173\u8054\u952e\u548c\u7ec4\u7ec7\u5185\u7269\u7406\u786c\u4ef6\u7684\u6807\u8bc6\u7b26\u4e2d\u975e\u5e38\u6709\u7528\u3002")),(0,i.yg)("h3",{id:"wio-terminal\u4e0a\u7684ble\u670d\u52a1\u5668"},(0,i.yg)("strong",{parentName:"h3"},"Wio terminal\u4e0a\u7684BLE\u670d\u52a1\u5668")),(0,i.yg)("p",null,"\u5177\u6709\u84dd\u7259\u4f4e\u529f\u8017\u529f\u80fd\u7684Wio\u7ec8\u7aef\u53ef\u4ee5\u4f5c\u4e3a\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u3002\u670d\u52a1\u5668\u4f1a\u5e7f\u544a\u81ea\u5df1\u7684\u5b58\u5728\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u5176\u4ed6\u8bbe\u5907\u53d1\u73b0\uff0c\u5b83\u5305\u542b\u5ba2\u6237\u7aef\u53ef\u4ee5\u8bfb\u53d6\u7684\u6570\u636e\u3002BLE\u652f\u6301\u4e24\u79cd\u6a21\u5f0f\uff0c\u5373\u5e7f\u64ad\u6a21\u5f0f\u548c\u7f51\u72b6\u7f51\u7edc\u6a21\u5f0f\u3002\u5728\u5e7f\u64ad\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u5411\u8fde\u63a5\u7684\u591a\u4e2a\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\uff0c\u5728\u7f51\u72b6\u7f51\u7edc\u6a21\u5f0f\u4e0b\uff0c\u6240\u6709\u8bbe\u5907\u90fd\u4e92\u76f8\u8fde\u63a5\u3002"),(0,i.yg)("p",null,"\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u90fd\u6709\u4e00\u4e2a\u201c\u670d\u52a1UUID\u201d\u7528\u4e8e\u5efa\u7acb\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u4e4b\u95f4\u7684\u8fde\u63a5\u3002\u5728\u6b64\u670d\u52a1\u5185\u90e8\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u7531\u7279\u5f81UUID\u5b9a\u4e49\u7684\u201c\u7279\u5f81\u201d\u3002\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u7279\u5f81TX\u548cRX\u6765\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\u548c\u63a5\u6536\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6570\u636e\u3002Wio\u7ec8\u7aef\uff08\u4f5c\u4e3a\u670d\u52a1\u5668\uff09\u901a\u8fc7TX\u7279\u5f81UUID\u201c\u901a\u77e5\u201d\u5ba2\u6237\u7aef\uff0c\u6570\u636e\u88ab\u53d1\u9001\u5230Wio\u7ec8\u7aef\u5e76\u901a\u8fc7RX\u7279\u5f81UUID\u63a5\u6536\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5b58\u5728\u53d1\u9001\u548c\u63a5\u6536\uff0cWio\u7ec8\u7aef\u4e0a\u7684TX\u5b9e\u9645\u4e0a\u662fAndroid\u5e94\u7528\u7a0b\u5e8f\u4e0a\u7684RX\u3002"),(0,i.yg)("h3",{id:"nrf-connect-app-\u7684\u4f7f\u7528"},(0,i.yg)("strong",{parentName:"h3"},"nRF Connect APP \u7684\u4f7f\u7528")),(0,i.yg)("p",null,"nRF Connect APP\u7528\u4e8e\u641c\u7d22UUID\u548cMAC\u5730\u5740\u7684BLE\u8bbe\u5907\uff0c\u5f53\u60a8\u4e0d\u77e5\u9053\u8bbe\u5907\u7684UUID\u548cMAC\u5730\u5740\u65f6\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u60a8\u641c\u7d22\u5e76\u4e0eBLE\u8bbe\u5907\u901a\u4fe1\u3002"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\u5728\u60a8\u7684\u667a\u80fd\u624b\u673a\u4e0a\u4e0b\u8f7d ",(0,i.yg)("a",{parentName:"li",href:"https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp&hl=en"},(0,i.yg)("strong",{parentName:"a"},"nRF Connect APP"))," \u3002"),(0,i.yg)("li",{parentName:"ul"},"\u626b\u63cfBLE\u8bbe\u5907"),(0,i.yg)("li",{parentName:"ul"},"\u627e\u5230\u6240\u9700\u7684BLE\u8bbe\u5907\u5e76\u8fde\u63a5\uff0c\u7136\u540e\u60a8\u5c06\u770b\u5230UUID\u548cMAC\u5730\u5740\u3002"),(0,i.yg)("li",{parentName:"ul"},"\u60a8\u53ef\u4ee5\u5728\u7279\u5f81\u4e0a\u53d1\u9001\u6216\u63a5\u6536\u6570\u636e\u3002")),(0,i.yg)("p",null,"nRF Connect APP\u626b\u63cf\u5230\u7684BLE\u8bbe\u5907\u5982\u4e0b\u6240\u793a\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:"{400}",src:"https://files.seeedstudio.com/wiki/wio%20terminal%20bluetooth/nRF-device-scan.png"})),(0,i.yg)("p",null,"\u5728\u7279\u5f81\u4e0a\uff0c\u5411\u4e0a\u7bad\u5934\u8868\u793a\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\uff0c\u5411\u4e0b\u7bad\u5934\u8868\u793a\u4ece\u670d\u52a1\u5668\u63a5\u6536\u6570\u636e\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:"{400}",src:"https://files.seeedstudio.com/wiki/wio%20terminal%20bluetooth/interface.png"})),(0,i.yg)("p",null,"\u754c\u9762\u9009\u9879\u6839\u636e\u8bbe\u5907\u529f\u80fd\u800c\u5b9a\uff0c\u4f8b\u5982\uff0c\u6211\u8fde\u63a5\u5230\u4e00\u4e2a\u5177\u6709\u7b80\u5355\u529f\u80fd\u7684Wio terminal\uff08\u670d\u52a1\u5668\uff09\uff0c\u56e0\u6b64\u53ea\u6709\u4e00\u4e2a\u5177\u6709\u4e0d\u540c\u529f\u80fd\u7279\u5f81\u7684\u670d\u52a1UUID\uff0c\u8fd9\u53d6\u51b3\u4e8e\u8bbe\u5907\u7684\u590d\u6742\u6027\u3002"),(0,i.yg)("h2",{id:"ble-\u5ba2\u6237\u7aef\u7684\u4f7f\u7528"},(0,i.yg)("strong",{parentName:"h2"},"BLE \u5ba2\u6237\u7aef\u7684\u4f7f\u7528")),(0,i.yg)("p",null,"\u6b64\u793a\u4f8b\u5c06Wio terminal\u4f5c\u4e3a\u5ba2\u6237\u7aef\uff0c\u641c\u7d22\u5468\u56f4\u6240\u6709\u7684BLE\u8bbe\u5907\uff0c\u7136\u540e\u901a\u8fc7BLE\u663e\u793aBLE\u8bbe\u5907\u7684\u540d\u79f0\u548cMAC\u5730\u5740\u3002"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\u60a8\u9700\u8981\u5177\u6709 ",(0,i.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Wio-Terminal-BLE/20200914-seeed-ambd-firmware-rpc-v1.0.0.zip"},(0,i.yg)("strong",{parentName:"a"},"\u6700\u65b0BLE\u56fa\u4ef6")),"\u7684Wio terminal\u3002"),(0,i.yg)("li",{parentName:"ul"},"\u5728\u4ee3\u7801\u4e2d\u8bbe\u7f6e\u670d\u52a1\u5668UUID\u548cMAC\u5730\u5740\u3002"),(0,i.yg)("li",{parentName:"ul"},"\u5c06 ",(0,i.yg)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Seeed_Arduino_rpcBLE/blob/master/examples/BLE_client/BLE_client.ino"},(0,i.yg)("strong",{parentName:"a"},"\u5ba2\u6237\u7aef\u4ee3\u7801"))," \u4e0a\u4f20\u5230 Wio terminal.")),(0,i.yg)("h3",{id:"\u5ba2\u6237\u7aef\u4ee3\u7801\u7247\u6bb5"},"\u5ba2\u6237\u7aef\u4ee3\u7801\u7247\u6bb5"),(0,i.yg)("p",null,"\u5728\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u653e\u7f6e\u60a8\u8981\u8fde\u63a5\u7684\u8bbe\u5907\u7684UUID\u548c\u7279\u5f81UUID\u670d\u52a1\u3002"),(0,i.yg)("p",null,":::\u6ce8\n\u5982\u679c\u60a8\u4e0d\u77e5\u9053\u8bbe\u5907\u7684MAC\u5730\u5740\u548cUUID\uff0c\u8bf7\u524d\u5f80 ",(0,i.yg)("strong",{parentName:"p"},"nRF Connect APP")," \u9875\u9762\u3002\n:::"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"// The remote service we wish to connect to.\nstatic BLEUUID serviceUUID(0x180F);\n// The characteristic of the remote service we are interested in.\nstatic BLEUUID    charUUID(0x2A19);\n")),(0,i.yg)("p",null,":::\u6ce8\n\u4ee3\u7801\u4e2d\u7684UUID\u7531\u6211\u4eec\u5b9a\u4e49\uff0c\u4ec5\u7528\u4e8e\u6d4b\u8bd5\uff0c\u5546\u4e1a\u4ea7\u54c1\u7684UUID\u683c\u5f0f\u901a\u5e38\u4e0d\u540c\uff0c\u4f8b\u5982\uff0cxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\u3002\n:::"),(0,i.yg)("p",null,"\u66f4\u65b0\u4ee3\u7801\u4e2d\u8981\u8fde\u63a5\u7684\u8bbe\u5907\u7684MAC\u5730\u5740\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"uint8_t bd_addr[6] = {0x7d, 0x18, 0x1b, 0xf1, 0xf7, 0x2c}; // MAC address: 2c:f7:f1:1b:18:7d\n")),(0,i.yg)("p",null,":::\u6ce8\n\u84dd\u7259MAC\u5730\u5740\u8bbe\u8ba1\u4e3a\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u8ffd\u6eaf\u5230\u82af\u7247\u5236\u9020\u5546\uff0c\u6b64\u5916\uff0c\u60a8\u9700\u8981\u5c06MAC\u5730\u5740\u6309\u7167\u76f8\u53cd\u7684\u987a\u5e8f\u653e\u7f6e\u3002\n:::"),(0,i.yg)("p",null,"\u8fde\u63a5\u5230\u8fdc\u7a0bBLE\u670d\u52a1\u5668\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"pClient->connect(myDevice);\n")),(0,i.yg)("p",null,"\u83b7\u53d6\u5bf9\u8fdc\u7a0bBLE\u670d\u52a1\u5668\u4e2d\u6211\u4eec\u6240\u9700\u670d\u52a1\u7684\u5f15\u7528\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"BLERemoteService* pRemoteService = pClient->getService(serviceUUID);\n")),(0,i.yg)("p",null,"\u83b7\u53d6\u5bf9\u8fdc\u7a0bBLE\u670d\u52a1\u5668\u670d\u52a1\u4e2d\u7684\u7279\u5f81\u7684\u5f15\u7528\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);\n")),(0,i.yg)("h3",{id:"\u5ba2\u6237\u7aef\u4ee3\u7801"},(0,i.yg)("strong",{parentName:"h3"},"\u5ba2\u6237\u7aef\u4ee3\u7801")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'/**\n * A BLE client example that is rich in capabilities.\n * There is a lot new capabilities implemented.\n * author unknown\n * updated by chegewara\n */\n\n#include "rpcBLEDevice.h"\n#include <BLEScan.h>\n#include <BLEAdvertisedDevice.h>\n\n// The remote service we wish to connect to.\nstatic BLEUUID serviceUUID(0xFEE0);\n// The characteristic of the remote service we are interested in.\nstatic BLEUUID    charUUID(0x2A2B);\n\nstatic boolean doConnect = false;\nstatic boolean connected = false;\nstatic boolean doScan = false;\nstatic BLERemoteCharacteristic* pRemoteCharacteristic;\nstatic BLEAdvertisedDevice* myDevice;\nuint8_t bd_addr[6] = {0xD7, 0x1D, 0x12, 0xDC, 0x64, 0xF0};\nBLEAddress BattServer(bd_addr);\n\nstatic void notifyCallback(\n  BLERemoteCharacteristic* pBLERemoteCharacteristic,\n  uint8_t* pData,\n  size_t length,\n  bool isNotify) {\n    Serial.print("Notify callback for characteristic ");\n    Serial.print(pBLERemoteCharacteristic->getUUID().toString().c_str());\n    Serial.print(" of data length ");\n    Serial.println(length);\n    Serial.print("data: ");\n    Serial.print(*(uint8_t *)pData);\n}\n\n\nclass MyClientCallback : public BLEClientCallbacks {\n  void onConnect(BLEClient* pclient) {\n  }\n\n  void onDisconnect(BLEClient* pclient) {\n    connected = false;\n    Serial.println("onDisconnect");\n  }\n};\n\n\nbool connectToServer() {\n    Serial.print("Forming a connection to ");\n    Serial.println(myDevice->getAddress().toString().c_str());\n    \n    BLEClient*  pClient  = BLEDevice::createClient();\n    Serial.println(" - Created client");\n\n    pClient->setClientCallbacks(new MyClientCallback());\n \n\n    // Connect to the remove BLE Server.\n    pClient->connect(myDevice);  // if you pass BLEAdvertisedDevice instead of address, it will be recognized type of peer device address (public or private)\n    Serial.println(" - Connected to server");\n\n    // Obtain a reference to the service we are after in the remote BLE server.\n    BLERemoteService* pRemoteService = pClient->getService(serviceUUID);\n    Serial.println(serviceUUID.toString().c_str());\n    if (pRemoteService == nullptr) {\n      Serial.print("Failed to find our service UUID: ");\n      Serial.println(serviceUUID.toString().c_str());\n      pClient->disconnect();\n      return false;\n    }\n    Serial.println(" - Found our service");\n\n\n    // Obtain a reference to the characteristic in the service of the remote BLE server.\n    pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);\n    if (pRemoteCharacteristic == nullptr) {\n      Serial.print("Failed to find our characteristic UUID: ");\n      Serial.println(charUUID.toString().c_str());\n      pClient->disconnect();\n      return false;\n    }\n    Serial.println(" - Found our characteristic");\n\n\n    // Read the value of the characteristic.\n    if(pRemoteCharacteristic->canRead()) {\n      Serial.println(" -  can  read  start");\n      std::string value = pRemoteCharacteristic->readValue();\n      Serial.print("The characteristic value was: ");\n      Serial.println(value.c_str());\n    }\n    \n    if(pRemoteCharacteristic->canNotify())\n      pRemoteCharacteristic->registerForNotify(notifyCallback);\n\n    connected = true;\n    return true;\n}\n/**\n * Scan for BLE servers and find the first one that advertises the service we are looking for.\n */\nclass MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {\n /**\n   * Called for each advertising BLE server.\n   */\n  void onResult(BLEAdvertisedDevice advertisedDevice) {\n    Serial.print("BLE Advertised Device found: ");\n    Serial.println(advertisedDevice.toString().c_str());\n   \n    // We have found a device, let us now see if it contains the service we are looking for.\n    if (memcmp(advertisedDevice.getAddress().getNative(),BattServer.getNative(), 6) == 0) {\n      Serial.print("BATT Device found: ");\n      Serial.println(advertisedDevice.toString().c_str());\n      BLEDevice::getScan()->stop();\n      Serial.println("new BLEAdvertisedDevice");\n      myDevice = new BLEAdvertisedDevice(advertisedDevice);\n      Serial.println("new BLEAdvertisedDevice done");\n      doConnect = true;\n      doScan = true; \n  } // onResult\n  }\n}; // MyAdvertisedDeviceCallbacks\n\n\nvoid setup() {\n  Serial.begin(115200);\n  while(!Serial){};\n  delay(2000);\n  Serial.println("Starting Arduino BLE Client application...");\n  BLEDevice::init("");\n\n  // Retrieve a Scanner and set the callback we want to use to be informed when we\n  // have detected a new device.  Specify that we want active scanning and start the\n  // scan to run for 5 seconds.\n  BLEScan* pBLEScan = BLEDevice::getScan();\n  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());\n  pBLEScan->setInterval(1349);\n  pBLEScan->setWindow(449);\n  pBLEScan->setActiveScan(true);\n  pBLEScan->start(5, false);\n} // End of setup.\n\n\n// This is the Arduino main loop function.\nvoid loop() {\n \n  // If the flag "doConnect" is true then we have scanned for and found the desired\n  // BLE Server with which we wish to connect.  Now we connect to it.  Once we are \n  // connected we set the connected flag to be true.\n  if (doConnect == true) {\n    if (connectToServer()) {\n      Serial.println("We are now connected to the BLE Server.");\n    } else {\n      Serial.println("We have failed to connect to the server; there is nothin more we will do.");\n    }\n    doConnect = false;\n  }\n  Serial.printf(".");\n  delay(1000);\n} // End of loop\n')),(0,i.yg)("h3",{id:"\u4ee3\u7801\u8fd0\u884c\u7ed3\u679c"},(0,i.yg)("strong",{parentName:"h3"},"\u4ee3\u7801\u8fd0\u884c\u7ed3\u679c")),(0,i.yg)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u793a\u4f8b\uff0c\u6ca1\u6709\u8fde\u63a5\u4efb\u4f55\u8bbe\u5907\uff0cWio\u7ec8\u7aef\u626b\u63cf\u5468\u56f4\u7684BLE\u8bbe\u5907\u5e76\u663e\u793a\u8fd9\u4e9b\u8bbe\u5907\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:"{500}",src:"https://files.seeedstudio.com/wiki/wio%20terminal%20bluetooth/BLE-device-print.png"})),(0,i.yg)("h2",{id:"ble-\u670d\u52a1\u5668\u7684\u4f7f\u7528"},(0,i.yg)("strong",{parentName:"h2"},"BLE \u670d\u52a1\u5668\u7684\u4f7f\u7528")),(0,i.yg)("p",null,"\u6b64\u793a\u4f8b\u5c06Wio\u7ec8\u7aef\u4f5c\u4e3a\u670d\u52a1\u5668\uff0c\u8fde\u63a5\u5176\u4ed6Wio\u7ec8\u7aef\uff08\u5ba2\u6237\u7aef\uff09\uff0c\u7136\u540e\u901a\u8fc7BLE\u63a5\u6536\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u3002"),(0,i.yg)("h3",{id:"\u670d\u52a1\u5668\u4ee3\u7801\u7247\u6bb5"},(0,i.yg)("strong",{parentName:"h3"},"\u670d\u52a1\u5668\u4ee3\u7801\u7247\u6bb5")),(0,i.yg)("p",null,"\u60a8\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u65b9\u5f0f\u5b9a\u4e49BLE\u8bbe\u5907\u540d\u79f0\uff1a"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'BLEDevice::init("UART Service");\n')),(0,i.yg)("p",null,"\u60a8\u9700\u8981\u5728 Wio terminal\u4e0a\u5b9a\u4e49\u670d\u52a1\u5668\u8bbe\u5907\u7684UUID\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#define SERVICE_UUID        "180f"\n#define CHARACTERISTIC_UUID "2a19"\n#define DESCRIPTOR_UUID     "4545"\n')),(0,i.yg)("p",null,"\u521b\u5efaBLE\u670d\u52a1\u5668\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"BLEServer *pServer = BLEDevice::createServer();\n")),(0,i.yg)("p",null,"\u4f7f\u7528\u670d\u52a1\u5668UUID\u521b\u5efaBLE\u670d\u52a1\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"BLEService *pService = pServer->createService(SERVICE_UUID);\n")),(0,i.yg)("p",null,"\u6dfb\u52a0\u7279\u5f81\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'  BLECharacteristic *pCharacteristic = pService->createCharacteristic(\n                                         CHARACTERISTIC_UUID,\n                                         BLECharacteristic::PROPERTY_READ |\n                                         BLECharacteristic::PROPERTY_WRITE\n                                       );\npCharacteristic->setValue("Hello World says Neil");\n')),(0,i.yg)("p",null,"\u8bfb\u53d6\u548c\u5199\u5165\u529f\u80fd\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"  pCharacteristic->setAccessPermissions(GATT_PERM_READ | GATT_PERM_WRITE);\n  BLEDescriptor *pDescriptor = pCharacteristic->createDescriptor(\n                                         DESCRIPTOR_UUID,\n                                          ATTRIB_FLAG_VOID | ATTRIB_FLAG_ASCII_Z,\n                                         GATT_PERM_READ | GATT_PERM_WRITE,2\n                                         );\n")),(0,i.yg)("p",null,"\u542f\u52a8BLE\u670d\u52a1\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"pService->start();\n")),(0,i.yg)("p",null,"\u5e7f\u544a\u5141\u8bb8\u8bbe\u5907\u5e7f\u64ad\u5b9a\u4e49\u5176\u610f\u56fe\u7684\u4fe1\u606f\u3002\u8fd9\u610f\u5473\u7740\u5f53\u79fb\u52a8\u8bbe\u5907\u63a5\u6536\u5230\u84dd\u7259\u6d88\u606f\u65f6\uff0c\u63a5\u6536\u8005\u53ef\u4ee5\u9009\u62e9\u63a5\u53d7\u6216\u62d2\u7edd\u8be5\u6d88\u606f\u3002\u63a5\u6536\u8005\u9700\u8981\u79ef\u6781\u8868\u793a\u4ed6\u4eec\u5e0c\u671b\u63a5\u6536\u8425\u9500\u4fe1\u606f\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},"BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();\n")),(0,i.yg)("h3",{id:"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u901a\u4fe1"},(0,i.yg)("strong",{parentName:"h3"},"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u901a\u4fe1")),(0,i.yg)("p",null,"\u6211\u4eec\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u6d4b\u8bd5\uff0cWio\u7ec8\u7aef\u5ba2\u6237\u7aef\u8fde\u63a5\u5230Wio\u7ec8\u7aef\u670d\u52a1\u5668\uff0c\u5f53\u5ba2\u6237\u7aef\u53d1\u73b0\u670d\u52a1\u5668\u65f6\uff0c\u5b83\u4eec\u5c06\u5efa\u7acb\u8fde\u63a5\uff0c\u540c\u65f6\u670d\u52a1\u5668\u5c06\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u6761\u6d88\u606f\u3002"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"\u60a8\u9700\u8981\u4e24\u4e2aWio\u7ec8\u7aef\u3002")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"\u60a8\u9700\u8981\u521b\u5efa\u7528\u4e8e\u5ba2\u6237\u7aef\u8fde\u63a5\u7684UUID\u3002")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"\u8bf7\u5728\u6b64 ",(0,i.yg)("strong",{parentName:"p"},"github")," \u4e0b\u8f7d",(0,i.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_rpcBLE/tree/master/examples/BLE_client"},(0,i.yg)("strong",{parentName:"a"},"\u5ba2\u6237\u7aef"))," \u548c ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_rpcBLE/tree/master/examples/BLE_server"},(0,i.yg)("strong",{parentName:"a"},"\u670d\u52a1\u5668"))," \u4ee3\u7801\u3002")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"\u5c06\u5ba2\u6237\u7aef\u4ee3\u7801\u4e0a\u4f20\u5230 Wio terminal\u3002")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"\u5c06\u670d\u52a1\u5668\u4ee3\u7801\u4e0a\u4f20\u5230\u53e6\u4e00\u4e2a Wio terminal\u3002"),(0,i.yg)("p",{parentName:"li"},"\u5728\u4e0a\u4f20\u548c\u8fd0\u884c ",(0,i.yg)("strong",{parentName:"p"},"\u670d\u52a1\u5668\u4ee3\u7801"),'\u65f6\uff0c\u5728Arduino IDE\u76d1\u89c6\u5668\u4e0a\u5c06\u6301\u7eed\u6253\u5370"unpaired"\uff0c\u76f4\u5230\u8fde\u63a5\u5ba2\u6237\u7aef\u3002'))),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:"{500}",src:"https://files.seeedstudio.com/wiki/wio%20terminal%20bluetooth/Server_side3.png"})),(0,i.yg)("p",null,"\u8fde\u63a5\u5230\u5ba2\u6237\u7aef\u540e\uff0c\u5b83\u5c06\u505c\u6b62\u6253\u5370\u6d88\u606f\uff0c\u5e76\u4e14\u5ba2\u6237\u7aef\u5c06\u6253\u5370\u6765\u81ea\u670d\u52a1\u5668\u7684\u6d88\u606f\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:"{500}",src:"https://files.seeedstudio.com/wiki/wio%20terminal%20bluetooth/Client_side7.png"})),(0,i.yg)("h3",{id:"\u670d\u52a1\u5668\u4ee3\u7801"},"\u670d\u52a1\u5668\u4ee3\u7801"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <rpcBLEDevice.h>\n#include <BLEServer.h>\n\n#define SERVICE_UUID        "180f"\n#define CHARACTERISTIC_UUID "2a19"\n#define DESCRIPTOR_UUID     "4545"\n\nclass MyCallbacks: public BLECharacteristicCallbacks {\n    void onWrite(BLECharacteristic *pCharacteristic) {\n      std::string rxValue = pCharacteristic->getValue();\n\n      if (rxValue.length() > 0) {\n        Serial.println("*********");\n        Serial.print("Received Value: ");\n        for (int i = 0; i < rxValue.length(); i++)\n          Serial.print(rxValue[i]);\n\n        Serial.println();\n        Serial.println("*********");\n      }\n    }\n};\n\nvoid setup() {\n  Serial.begin(115200);\n  while(!Serial){};\n  Serial.println("Starting BLE work!");\n\n  BLEDevice::init("Long name 11");\n  BLEServer *pServer = BLEDevice::createServer();\n  BLEService *pService = pServer->createService(SERVICE_UUID);\n  BLECharacteristic *pCharacteristic = pService->createCharacteristic(\n                                         CHARACTERISTIC_UUID,\n                                         BLECharacteristic::PROPERTY_READ |\n                                         BLECharacteristic::PROPERTY_WRITE\n                                       );\n  pCharacteristic->setAccessPermissions(GATT_PERM_READ | GATT_PERM_WRITE);\n  BLEDescriptor *pDescriptor = pCharacteristic->createDescriptor(\n                                         DESCRIPTOR_UUID,\n                                          ATTRIB_FLAG_VOID | ATTRIB_FLAG_ASCII_Z,\n                                         GATT_PERM_READ | GATT_PERM_WRITE,\n                                         2\n                                         );\n  pCharacteristic->setValue("Hello World says Neil");\n  pCharacteristic->setCallbacks(new MyCallbacks());\n  pService->start();\n\n  // BLEAdvertising *pAdvertising = pServer->getAdvertising();  // this still is working for backward compatibility\n  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();\n  pAdvertising->addServiceUUID(SERVICE_UUID);\n  pAdvertising->setScanResponse(true);\n  pAdvertising->setMinPreferred(0x06);  // functions that help with iPhone connections issue\n  pAdvertising->setMinPreferred(0x12);\n  BLEDevice::startAdvertising();\n  Serial.println("Characteristic defined! Now you can read it in your phone!");\n}\n\nvoid loop() { \n  // put your main code here, to run repeatedly:\n  Serial.println("1");\n  delay(2000);\n}\n')),(0,i.yg)("h2",{id:"\u670d\u52a1\u5668\u8fde\u63a5\u5230\u667a\u80fd\u624b\u673a\u7684\u5ba2\u6237\u7aef"},"\u670d\u52a1\u5668\u8fde\u63a5\u5230\u667a\u80fd\u624b\u673a\u7684\u5ba2\u6237\u7aef"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/wio%20terminal%20bluetooth/vidoeh-GIF.gif"})),(0,i.yg)("p",null,"\u8be5\u793a\u4f8b\u4f7f\u7528\u667a\u80fd\u624b\u673a\u4f5c\u4e3a\u5ba2\u6237\u7aef\u8fde\u63a5\u5230Wio\u7ec8\u7aef\uff08\u670d\u52a1\u5668\uff09\uff0cWio\u7ec8\u7aef\u80fd\u591f\u63a5\u6536\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6d88\u606f\u3002"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\u5728\u624b\u673a\u4e0a\u4e0b\u8f7dnRF Connect APP\u3002"),(0,i.yg)("li",{parentName:"ul"},"\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230 Wio terminal."),(0,i.yg)("li",{parentName:"ul"},"\u6253\u5f00nRF Connect APP\u641c\u7d22 Wio terminal \u5e76\u8fde\u63a5\u3002")),(0,i.yg)("p",null,":::\u6ce8\n\u6253\u5f00nRF Connect APP\u641c\u7d22\u3002\n:::"),(0,i.yg)("h3",{id:"\u4ee3\u7801"},(0,i.yg)("strong",{parentName:"h3"},"\u4ee3\u7801")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcBLEDevice.h"\n#include <BLE2902.h>\n#include <TFT_eSPI.h> // Hardware-specific library\n#include <SPI.h>\nTFT_eSPI tft = TFT_eSPI();       // Invoke custom library\nTFT_eSprite spr = TFT_eSprite(&tft);  // Sprite \n \nBLEServer *pServer = NULL;\nBLECharacteristic * pTxCharacteristic;\nbool deviceConnected = false;\nbool oldDeviceConnected = false;\nString Value11;\n \n#define SERVICE_UUID           "6E400001-B5A3-F393-E0A9-E50E24DCCA9E" // UART service UUID\n#define CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"\n#define CHARACTERISTIC_UUID_TX "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"\n \nclass MyServerCallbacks: public BLEServerCallbacks {\n    void onConnect(BLEServer* pServer) {\n      deviceConnected = true;\n      spr.fillSprite(TFT_BLACK);\n      spr.createSprite(240, 100);\n      spr.setTextColor(TFT_WHITE, TFT_BLACK);\n      spr.setFreeFont(&FreeSansBoldOblique12pt7b);\n      spr.drawString("Message: ", 20, 70);\n      spr.setTextColor(TFT_GREEN, TFT_BLACK);\n      spr.drawString("status: connected",10 ,5); \n      spr.pushSprite(0, 0);\n    };\n \n    void onDisconnect(BLEServer* pServer) {\n      deviceConnected = false;\n      Serial.print("123123");\n      spr.fillSprite(TFT_BLACK);\n      spr.createSprite(240, 100);\n      spr.setTextColor(TFT_WHITE, TFT_BLACK);\n      spr.setFreeFont(&FreeSansBoldOblique12pt7b);\n      spr.drawString("Message: ", 20, 70);\n      spr.setTextColor(TFT_RED, TFT_BLACK);\n      spr.drawString("status: disconnect",10 ,5); \n      spr.pushSprite(0, 0);\n    }\n};\n \nclass MyCallbacks: public BLECharacteristicCallbacks {\n    void onWrite(BLECharacteristic *pCharacteristic) {\n      std::string rxValue = pCharacteristic->getValue();\n \n        if (rxValue.length() > 0) {\n        spr.fillSprite(TFT_BLACK);\n        spr.setTextColor(TFT_WHITE, TFT_BLACK);\n        spr.setFreeFont(&FreeSansBoldOblique9pt7b);\n        for (int i = 0; i < rxValue.length(); i++){\n//           Serial.print(rxValue[i]);\n           spr.drawString((String)rxValue[i],10 + i*15,0);\n        spr.pushSprite(10, 100);\n        }\n       }\n    }\n};\n \nvoid setup() {\n  tft.begin();\n  tft.init();\n  tft.setRotation(3);\n  tft.fillScreen(TFT_BLACK);\n \n  BLEDevice::init("UART Servicess");  //device name define\n \n  // Create the BLE Server\n  pServer = BLEDevice::createServer();\n  pServer->setCallbacks(new MyServerCallbacks());\n \n  // Create the BLE Service\n  BLEService *pService = pServer->createService(SERVICE_UUID);\n \n  // Create a BLE Characteristic\n  pTxCharacteristic = pService->createCharacteristic(\n                    CHARACTERISTIC_UUID_TX,\n                    BLECharacteristic::PROPERTY_NOTIFY | BLECharacteristic::PROPERTY_READ\n                  );\n  pTxCharacteristic->setAccessPermissions(GATT_PERM_READ);      \n  pTxCharacteristic->addDescriptor(new BLE2902());\n \n  BLECharacteristic * pRxCharacteristic = pService->createCharacteristic(\n                       CHARACTERISTIC_UUID_RX,\n                      BLECharacteristic::PROPERTY_WRITE\n \n                    );\n  pRxCharacteristic->setAccessPermissions(GATT_PERM_READ | GATT_PERM_WRITE);           \n \n  pRxCharacteristic->setCallbacks(new MyCallbacks());\n \n  // Start the service\n  pService->start();\n \n  // Start advertising\n  pServer->getAdvertising()->start();\n      spr.fillSprite(TFT_BLACK);\n      spr.createSprite(240, 100);\n      spr.setTextColor(TFT_WHITE, TFT_BLACK);\n      spr.setFreeFont(&FreeSansBoldOblique12pt7b);\n      spr.drawString("status: disconnect",10 ,5); \n      spr.drawString("Message: ", 20, 70);\n      spr.pushSprite(0, 0);\n}\n \nvoid loop() {\n \n    // disconnecting\n    if (!deviceConnected && oldDeviceConnected) {\n        delay(500); // give the bluetooth stack the chance to get things ready\n        pServer->startAdvertising(); // restart advertising\n        oldDeviceConnected = deviceConnected;\n    }\n    // connecting\n    if (deviceConnected && !oldDeviceConnected) {\n    // do stuff here on connecting\n        oldDeviceConnected = deviceConnected;\n    }\n}\n')))}g.isMDXComponent=!0}}]);