"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[35562],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(n),m=a,g=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},89577:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(58168),a=(n(96540),n(15680));const o={description:"Sine Wave Generator with ReSpeaker Lite",title:"Sine Wave Generator with ReSpeaker Lite",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/streams_generator",last_update:{date:"7/1/2024",author:"Jessie"}},i=void 0,s={unversionedId:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/streams_generator",id:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/streams_generator",title:"Sine Wave Generator with ReSpeaker Lite",description:"Sine Wave Generator with ReSpeaker Lite",source:"@site/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/streams_generator.md",sourceDirName:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3",slug:"/streams_generator",permalink:"/streams_generator",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/streams_generator.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:1719792e3,formattedLastUpdatedAt:"Jul 1, 2024",frontMatter:{description:"Sine Wave Generator with ReSpeaker Lite",title:"Sine Wave Generator with ReSpeaker Lite",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/streams_generator",last_update:{date:"7/1/2024",author:"Jessie"}},sidebar:"ProductSidebar",previous:{title:"I2S Test",permalink:"/reSpeaker_i2s_test"},next:{title:"CSV Converter",permalink:"/streams_print"}},p={},l=[{value:"Functionality",id:"functionality",level:3},{value:"Code",id:"code",level:3},{value:"Configuration",id:"configuration",level:3}],u={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(c,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This project demonstrates how to generate a sine wave and play it using the I2S interface on the reSpeaker Lite board. The reSpeaker Lite is an audio board with an integrated XIAO ESP32S3 microcontroller, featuring a dual-channel microphone and speaker. "),(0,a.yg)("h3",{id:"functionality"},"Functionality"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Generates a sine wave with a specified frequency"),(0,a.yg)("li",{parentName:"ul"},"Plays the generated sine wave through the I2S interface"),(0,a.yg)("li",{parentName:"ul"},"Utilizes the AudioTools framework for audio processing and streaming"),(0,a.yg)("li",{parentName:"ul"},"Easy-to-use AudioLogger for debugging and monitoring")),(0,a.yg)("h3",{id:"code"},"Code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "AudioTools.h"\n\nAudioInfo info(16000, 2, 32);                              // Sample Rate, Number of channels: 2=stereo, 1=mono, Number of bits per sample (int16_t = 16 bits)\nSineWaveGenerator<int16_t> sineWave(32000);                // subclass of SoundGenerator with max amplitude of 32000\nGeneratedSoundStream<int16_t> sound(sineWave);             // Stream generated from sine wave\nI2SStream out; \nStreamCopy copier(out, sound);                             // copies sound into i2s\n\n// Arduino Setup\nvoid setup(void) {  \n  // Open Serial \n  Serial.begin(115200);\n  AudioLogger::instance().begin(Serial, AudioLogger::Info);\n\n  // start I2S\n  Serial.println("starting I2S...");\n  auto config = out.defaultConfig(TX_MODE);\n  config.copyFrom(info); \n  out.begin(config);\n\n  // Setup sine wave\n  sineWave.begin(info, N_B4);\n  Serial.println("started...");\n}\n\n// Arduino loop - copy sound to out \nvoid loop() {\n  copier.copy();\n}\n')),(0,a.yg)("h3",{id:"configuration"},"Configuration"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"info"),": Defines the audio configuration, including the sample rate, number of channels (2 for stereo, 1 for mono), and the number of bits per sample (16 bits)."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"sineWave"),": Creates an instance of the SineWaveGenerator class with a maximum amplitude of 32000."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"sound"),": Creates a GeneratedSoundStream object using the sineWave generator."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"out"),": Creates an instance of the I2SStream class for audio output."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"copier"),": Creates a StreamCopy object to copy the generated sound to the I2S output."))}d.isMDXComponent=!0}}]);