"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[20677],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>u});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),x=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=x(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=x(n),y=a,u=d["".concat(s,".").concat(y)]||d[y]||g[y]||i;return n?r.createElement(u,l(l({ref:t},p),{},{components:n})):r.createElement(u,l({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var x=2;x<i;x++)l[x]=n[x];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},76623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>x});var r=n(58168),a=(n(96540),n(15680));const i={description:"Grove - OLED Display 1.12&#34",title:"Grove - OLED Display 1.12&#34",keywords:["Grove"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/Grove-OLED_Display_1.12inch",last_update:{date:"1/9/2023",author:"shuxu hu"}},l=void 0,o={unversionedId:"Sensor/Grove/Grove_Accessories/Display/Grove-OLED_Display_1.12inch",id:"Sensor/Grove/Grove_Accessories/Display/Grove-OLED_Display_1.12inch",title:"Grove - OLED Display 1.12&#34",description:"Grove - OLED Display 1.12&#34",source:"@site/docs/Sensor/Grove/Grove_Accessories/Display/Grove-OLED_Display_1.12inch.md",sourceDirName:"Sensor/Grove/Grove_Accessories/Display",slug:"/Grove-OLED_Display_1.12inch",permalink:"/Grove-OLED_Display_1.12inch",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/Grove/Grove_Accessories/Display/Grove-OLED_Display_1.12inch.md",tags:[],version:"current",lastUpdatedBy:"shuxu hu",lastUpdatedAt:1673222400,formattedLastUpdatedAt:"Jan 9, 2023",frontMatter:{description:"Grove - OLED Display 1.12&#34",title:"Grove - OLED Display 1.12&#34",keywords:["Grove"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/Grove-OLED_Display_1.12inch",last_update:{date:"1/9/2023",author:"shuxu hu"}},sidebar:"ProductSidebar",previous:{title:"Grove - OLED Yellow&Blue Display 0.96(SSD1315) - SPI/IIC -3.3V/5V",permalink:"/Grove-OLED-Yellow&Blue-Display-0.96-SSD1315_V1.0"},next:{title:"Grove - OLED Display 1.12 (SH1107) V3.0 - SPI/IIC -3.3V/5V",permalink:"/Grove-OLED-Display-1.12-SH1107_V3.0"}},s={},x=[{value:"Specification",id:"specification",level:2},{value:"Version",id:"version",level:2},{value:"Specifications",id:"specifications",level:2},{value:"Platforms Supported",id:"platforms-supported",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Play with Arduino",id:"play-with-arduino",level:3},{value:"Hardware",id:"hardware",level:4},{value:"Software",id:"software",level:4},{value:"U8g2 Library Introduction",id:"u8g2-library-introduction",level:4},{value:"Play With Raspberry Pi (With Grove Base Hat for Raspberry Pi)",id:"play-with-raspberry-pi-with-grove-base-hat-for-raspberry-pi",level:3},{value:"Hardware",id:"hardware-1",level:4},{value:"Software",id:"software-1",level:4},{value:"Schematic Online Viewer",id:"schematic-online-viewer",level:2},{value:"Resources",id:"resources",level:2},{value:"Project",id:"project",level:2},{value:"Tech Support &amp; Product Discussion",id:"tech-support--product-discussion",level:2}],p={toc:x},d="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("div",{align:"center"},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/images/main.jpg"})),(0,a.yg)("p",null,"Our new 1.12\u201d OLED displays are perfect when you need a small display with 16 grayscale. The visible portion of the OLED measures 1.12\u201d diagonal and contains 96x96(version 1.0) |  128x128(version 2.0) grayscale pixels. Because the display uses OLEDs, there is no backlight, and the contrast is very high."),(0,a.yg)("p",null,"This OLED uses the SSD1327(V1.0) or SH1107G(V2.1) driver chip, which manages the display. You can talk to the driver chip using 4-wire I2C (clock, data, power, and GND pins)."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-OLED-Display-1.12%27%27-V2-p-3031.html"},(0,a.yg)("p",null,(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/common/Get_One_Now_Banner.png",alt:"pir",width:600,height:"auto"})))),(0,a.yg)("h2",{id:"specification"},"Specification"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Communicate Mode: I2C"),(0,a.yg)("li",{parentName:"ul"},"Grayscale Display: 16 Gray shades."),(0,a.yg)("li",{parentName:"ul"},"Supports both Normal and Inverse Color Display."),(0,a.yg)("li",{parentName:"ul"},"Supports Continuous Horizontal Scrolling."),(0,a.yg)("li",{parentName:"ul"},"Grove compatible Interface")),(0,a.yg)("h2",{id:"version"},"Version"),(0,a.yg)("hr",null),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Product Version"),(0,a.yg)("th",{parentName:"tr",align:null},"Changes"),(0,a.yg)("th",{parentName:"tr",align:null},"Released Date"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},'Grove - OLED Display 1.12" V1.0'),(0,a.yg)("td",{parentName:"tr",align:null},"Initial"),(0,a.yg)("td",{parentName:"tr",align:null},"Mar 2012")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},'Grove - OLED Display 1.12" V2.1'),(0,a.yg)("td",{parentName:"tr",align:null},"Change the driver IC from SSD1327 to SH1107G, upgrade the grayscale pixels from 96X96 to 128X128"),(0,a.yg)("td",{parentName:"tr",align:null},"Nov 2015")))),(0,a.yg)("h2",{id:"specifications"},"Specifications"),(0,a.yg)("hr",null),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Item"),(0,a.yg)("th",{parentName:"tr",align:null},"Value"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Operating Voltage"),(0,a.yg)("td",{parentName:"tr",align:null},"3.3/5 V")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Dot Matrix"),(0,a.yg)("td",{parentName:"tr",align:null},"96x96")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Display Color"),(0,a.yg)("td",{parentName:"tr",align:null},"16 Grayscale")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"OLED Display"),(0,a.yg)("td",{parentName:"tr",align:null},"LY120-96096")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Driver Chip"),(0,a.yg)("td",{parentName:"tr",align:null},"SSD1327Z")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Dot Size"),(0,a.yg)("td",{parentName:"tr",align:null},"0.15(W)mm x 0.15(H)mm")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Dot Pitch"),(0,a.yg)("td",{parentName:"tr",align:null},"0.75(W)mm x 0.175(H)mm")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Operating Temperature"),(0,a.yg)("td",{parentName:"tr",align:null},"-40~70 oC")))),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre"},"More details about Grove modules please refer to [Grove System](https://wiki.seeedstudio.com/Grove_System/)\n"))),(0,a.yg)("h2",{id:"platforms-supported"},"Platforms Supported"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Arduino"),(0,a.yg)("th",{parentName:"tr",align:null},"Raspberry Pi"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("p",null,(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/arduino_logo.jpg",alt:"pir",width:200,height:"auto"}))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("p",null,(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/raspberry_pi_logo.jpg",alt:"pir",width:200,height:"auto"})))))),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre"},"The platforms mentioned above as supported is/are an indication of the module's software or theoritical compatibility. We only provide software library or code examples for Arduino platform in most cases. It is not possible to provide software library / demo code for all possible MCU platforms. Hence, users have to write their own software library.\n"))),(0,a.yg)("h2",{id:"getting-started"},"Getting Started"),(0,a.yg)("h3",{id:"play-with-arduino"},"Play with Arduino"),(0,a.yg)("h4",{id:"hardware"},"Hardware"),(0,a.yg)("p",null,"Here we will show you how this Grove - OLED Display works via a simple demo. First of all, you need to prepare the below stuffs:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Seeeduino V4"),(0,a.yg)("th",{parentName:"tr",align:null},"Grove - OLED Display 1.12``"),(0,a.yg)("th",{parentName:"tr",align:null},"Base Shield"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("p",null,(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove_Light_Sensor/images/gs_1.jpg",alt:"pir",width:600,height:"auto"}))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("p",null,(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/images/product.jpg",alt:"pir",width:600,height:"auto"}))),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("p",null,(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove_Light_Sensor/images/gs_4.jpg",alt:"pir",width:600,height:"auto"})))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://www.seeedstudio.com/Seeeduino-V4.2-p-2517.html"},"Get ONE Now")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://www.seeedstudio.com/Grove-OLED-Display-1.12%27%27-V2-p-3031.html"},"Get ONE Now")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://www.seeedstudio.com/Base-Shield-V2-p-1378.html"},"Get ONE Now"))))),(0,a.yg)("p",null,"This is an easy-to-use module, what you need to do is connect the module to I2C port of a Base Shield. There're 4 pins, defined as below."),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"pin"),(0,a.yg)("th",{parentName:"tr",align:null},"Function"),(0,a.yg)("th",{parentName:"tr",align:null},"Note"),(0,a.yg)("th",{parentName:"tr",align:null},"Cable color"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"pin1"),(0,a.yg)("td",{parentName:"tr",align:null},"SCL"),(0,a.yg)("td",{parentName:"tr",align:null},"I2C Clock"),(0,a.yg)("td",{parentName:"tr",align:null},"YELLOW")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"pin2"),(0,a.yg)("td",{parentName:"tr",align:null},"SDA"),(0,a.yg)("td",{parentName:"tr",align:null},"I2C Data"),(0,a.yg)("td",{parentName:"tr",align:null},"WHITE")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"pin3"),(0,a.yg)("td",{parentName:"tr",align:null},"VCC"),(0,a.yg)("td",{parentName:"tr",align:null},"Power, 5V/3.3V"),(0,a.yg)("td",{parentName:"tr",align:null},"RED")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"pin4"),(0,a.yg)("td",{parentName:"tr",align:null},"GND"),(0,a.yg)("td",{parentName:"tr",align:null},"Ground"),(0,a.yg)("td",{parentName:"tr",align:null},"BLACK")))),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Hardware Overview")),(0,a.yg)("div",{align:"center"},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/images/connection.jpg"})),(0,a.yg)("h4",{id:"software"},"Software"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Step 1.")," Connect Grove - OLED Display 1.12'' to ",(0,a.yg)("strong",{parentName:"p"},"I2C")," port of Base Shield via Grove cable.")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},(0,a.yg)("strong",{parentName:"p"},"Step 2.")," Open Arduino IDE and the Library Manager ",(0,a.yg)("strong",{parentName:"p"},"(Sketch > Include Library > manage Libraries)")," to install the library of u8g2."))),(0,a.yg)("div",{align:"center"},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove-OLED_Display_1.12inch/img/arduino_ide_manage_lib.png"})),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step 3."),' Enter "',(0,a.yg)("strong",{parentName:"li"},"u8g2"),'" into the search field and select latest version and Cclick "Install" button.')),(0,a.yg)("div",{align:"center"},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove-OLED_Display_1.12inch/img/arduino_ide_search_u8g2.png"})),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step 4.")," Upload the demo code below in your Arduino IDE.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <Arduino.h>\n#include <U8g2lib.h>\n#include <SPI.h>\n#include <Wire.h>\n\nU8G2_SH1107_SEEED_128X128_1_SW_I2C u8g2(U8G2_R0, /* clock=*/ SCL, /* data=*/ SDA, /* reset=*/ U8X8_PIN_NONE);\n\nvoid setup(void) {\n  u8g2.begin();\n}\n\nvoid loop(void) {\n  u8g2.firstPage();\n  do {\n    u8g2.setFont(u8g2_font_ncenB10_tr);\n    u8g2.drawStr(0,24,"Hello World!");\n  } while ( u8g2.nextPage() );\n}\n')),(0,a.yg)("admonition",{type:"success"},(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre"},"   There will be a \"Hello World!\" displayed on the screen of Grove - OLED Display 1.12'' if everything goes well.\n"))),(0,a.yg)("div",{align:"center"},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove-OLED_Display_1.12inch/img/outcome.jpg"})),(0,a.yg)("admonition",{type:"note"},(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre"},"    If there's no Base Shield with you, [Seeeduino Vx Series](https://www.seeedstudio.com/catalogsearch/result/index/?q=Seeeduino+v&product_list_limit=all) with **I2C interface** do work as well.\n"))),(0,a.yg)("h4",{id:"u8g2-library-introduction"},"U8g2 Library Introduction"),(0,a.yg)("p",null,"U8g2 is a monochrome graphics library for embedded devices. U8g2 supports monochrome OLEDs and LCDs, which include our chip SSD1327/SH1107G."),(0,a.yg)("p",null,"The Arduino library U8g2 can be installed from the library manager of the Arduino IDE. U8g2 also includes U8x8 library:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"U8g2")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Includes all graphics procedures (line/box/circle draw)."),(0,a.yg)("li",{parentName:"ul"},"Supports many fonts. (Almost) no restriction on the font height."),(0,a.yg)("li",{parentName:"ul"},"Requires some memory in the microcontroller to render the display.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"U8x8")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Text output only (character) device."),(0,a.yg)("li",{parentName:"ul"},"Only fonts allowed with fit into a 8x8 pixel grid."),(0,a.yg)("li",{parentName:"ul"},"Writes directly to the display. No buffer in the microcontroller required.")),(0,a.yg)("p",null,"Here provides the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/olikraus/u8g2/wiki"},(0,a.yg)("strong",{parentName:"a"},"U8g2 Library wiki"))," as well as the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/olikraus/u8g2/wiki/u8g2reference"},"U8g2 API Reference")," page."),(0,a.yg)("h3",{id:"play-with-raspberry-pi-with-grove-base-hat-for-raspberry-pi"},"Play With Raspberry Pi (With Grove Base Hat for Raspberry Pi)"),(0,a.yg)("h4",{id:"hardware-1"},"Hardware"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step 1.")," Things used in this project:")),(0,a.yg)("div",{class:"table-center"},(0,a.yg)("table",null,(0,a.yg)("tr",null,(0,a.yg)("th",null,"Raspberry pi"),(0,a.yg)("th",null,"Grove Base Hat for RasPi "),(0,a.yg)("th",null,"Grove - OLED Display 1.12''")),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/rasp.jpg",style:{width:250,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove_Base_Hat_for_Raspberry_Pi/img/thumbnail.jpg",style:{width:250,height:"auto"}}))),(0,a.yg)("td",null,(0,a.yg)("div",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/images/product.jpg",style:{width:250,height:"auto"}})))),(0,a.yg)("tr",null,(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Raspberry-Pi-3-Model-B-p-2625.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-Base-Hat-for-Raspberry-Pi.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f")))))),(0,a.yg)("td",null,(0,a.yg)("div",{class:"get_one_now_container",style:{textAlign:"center"}},(0,a.yg)("a",{class:"get_one_now_item",href:"https://www.seeedstudio.com/Grove-OLED-Display-1-12-V2.html"},(0,a.yg)("strong",null,(0,a.yg)("span",null,(0,a.yg)("font",{color:"FFFFFF",size:"4"}," Get One Now \ud83d\uddb1\ufe0f"))))))))),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step 2.")," Plug the Grove Base Hat into Raspberry."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step 3.")," Connect the Grove - OLED Display 1.12'' to I2C port of the Base Hat."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step 4.")," Connect the Raspberry Pi to PC through USB cable.")),(0,a.yg)("h4",{id:"software-1"},"Software"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step 1.")," Follow ",(0,a.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/Grove_Base_Hat_for_Raspberry_Pi/#installation"},"Setting Software")," to configure the development environment install the grove.py to your raspberry pi."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Step 2.")," Excute below commands to run the code.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"# virutalenv for Python3\nvirtualenv -p python3 env\nsource env/bin/activate\n#enter commmand\ngrove_lcd_1.2inches\n")),(0,a.yg)("p",null,"Following is the sh1107g.py code."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"'''\nThis is the code for\n    - `Grove - 16 x 2 LCD (Black on Red) <https://www.seeedstudio.com/Grove-16-x-2-LCD-Black-on-Re-p-3197.html>`_\n    - `Grove - 16 x 2 LCD (Black on Yellow) <https://www.seeedstudio.com/Grove-16-x-2-LCD-Black-on-Yello-p-3198.html>`_\n    - `Grove - 16 x 2 LCD (White on Blue) <https://www.seeedstudio.com/Grove-16-x-2-LCD-White-on-Blu-p-3196.html>`_\n\nExamples:\n\n    .. code-block:: python\n\n        import time\n        from grove.factory import Factory\n\n        # LCD 16x2 Characters\n        lcd = Factory.getDisplay(\"JHD1802\")\n        rows, cols = lcd.size()\n        print(\"LCD model: {}\".format(lcd.name))\n        print(\"LCD type : {} x {}\".format(cols, rows))\n\n        lcd.setCursor(0, 0)\n        lcd.write(\"hello world!\")\n        lcd.setCursor(0, cols - 1)\n        lcd.write('X')\n        lcd.setCursor(rows - 1, 0)\n        for i in range(cols):\n            lcd.write(chr(ord('A') + i))\n\n        time.sleep(3)\n        lcd.clear()\n'''\nfrom grove.display.base import *\n# from upm.pyupm_lcd import *\nfrom grove.i2c import Bus\nimport sys\n\n# sphinx autoapi required\n__all__ = [\"SH1107G\"]\n\nBasicFont = [\n        [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],\n        [0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00],\n        [0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00],\n        [0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00],\n        [0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00],\n        [0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00],\n        [0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00],\n        [0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00],\n        [0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00],\n        [0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00],\n        [0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00],\n        [0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00],\n        [0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00],\n        [0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00],\n        [0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00],\n        [0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00],\n        [0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00],\n        [0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00],\n        [0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00],\n        [0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00],\n        [0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00],\n        [0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00],\n        [0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00],\n        [0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00],\n        [0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00],\n        [0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00],\n        [0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00],\n        [0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00],\n        [0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00],\n        [0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00],\n        [0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00],\n        [0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00],\n        [0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00],\n        [0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00],\n        [0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00],\n        [0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00],\n        [0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00],\n        [0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00],\n        [0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00],\n        [0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00],\n        [0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00],\n        [0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00],\n        [0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00],\n        [0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00],\n        [0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00],\n        [0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00],\n        [0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00],\n        [0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00],\n        [0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00],\n        [0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00],\n        [0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00],\n        [0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00],\n        [0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00],\n        [0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00],\n        [0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00],\n        [0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00],\n        [0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00],\n        [0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00],\n        [0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00],\n        [0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00],\n        [0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00],\n        [0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00],\n        [0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00],\n        [0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00],\n        [0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00],\n        [0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00],\n        [0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00],\n        [0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00],\n        [0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00],\n        [0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00],\n        [0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00],\n        [0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00],\n        [0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00],\n        [0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00],\n        [0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00],\n        [0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00],\n        [0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00],\n        [0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00],\n        [0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00],\n        [0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00],\n        [0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00],\n        [0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00],\n        [0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00],\n        [0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00],\n        [0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00],\n        [0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00],\n        [0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00],\n        [0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00],\n        [0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00],\n        [0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00],\n        [0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00],\n        [0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00],\n        [0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00],\n        [0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00],\n        [0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00],\n        [0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00],\n]\n\nclass SH1107G(Display):\n    '''\n    OLED Display 1.12\"(v2) use chip SH1107G.\n\n    Args:\n        address(int): I2C device address, default to 0x3E.\n    '''\n    MAX_GRAY    = 100\n    _REG_CMD    = 0x00\n    _REG_DATA   = 0x40\n    _PAGE_CNT   = 16\n    _PAGE_BYTES = 128\n    _TOTAL_BYTES= _PAGE_CNT * _PAGE_BYTES\n    \n    _DISPLAY_CMD_OFF = 0xAE;\n    _DISPLAY_CMD_ON = 0xAF;\n\n    _BASE_LOW_COLUMN_ADDR = 0x00;\n    _BASE_HIGH_COLUMN_ADDR = 0x10;\n    _BASE_PAGE_START_ADDR = 0xB0;\n    def __init__(self, address = 0x3C):\n        super(SH1107G, self).__init__()\n        self._bus = Bus()\n        self._addr = address\n\n        if self._bus.write_byte(self._addr, 0):\n            print(\"Check if the OLED SH1107G inserted, then try again\")\n            sys.exit(1)\n \n        id = self._bus.read_byte_data(self._addr, SH1107G._REG_CMD)\n        # print(\" id = 0x{:2x}\".format(id))\n        self._sh1107 = (id & 0x3F) == 0x07\n\n        blk =     [0xAE]   # Display OFF\n        blk.append(0xD5)   # Set Dclk\n        blk.append(0x50)   # 100Hz\n        blk.append(0x20)   # Set row address\n        blk.append(0x81)   # Set contrast control\n        blk.append(0x80)\n        blk.append(0xA0)   # Segment remap\n        blk.append(0xA4)   # Set Entire Display ON \n        blk.append(0xA6)   # Normal display\n        blk.append(0xAD)   # Set external VCC\n        blk.append(0x80)\n        blk.append(0xC0)   # Set Common scan direction\n        blk.append(0xD9)   # Set phase leghth\n        blk.append(0x1F)\n        blk.append(0xDB)   # Set Vcomh voltage\n        blk.append(0x27)\n        blk.append(0xAF)   # Display ON\n        blk.append(0xB0)\n        blk.append(0x00)\n        blk.append(0x10)\n        self._cmds(blk)\n        self.clear()\n\n    def _cmd(self, cmd):\n        try:\n            self._bus.write_byte_data(self._addr,\n                                    SH1107G._REG_CMD, cmd)\n        except IOError:\n            print(\"*** Check if OLED module inserted ***\")\n            sys.exit(1)\n\n    def _cmds(self, cmds):\n        for c in cmds:\n            self._cmd(c)\n\n    def _datas(self, datas):\n        length = len(datas)\n        data = bytearray(length + 1)\n        data[0] = SH1107G._REG_DATA\n        for i in range(length):\n            data[i + 1] = datas[i]\n        try:\n            self._bus.write_i2c_block_data(self._addr,\n                                  SH1107G._REG_DATA, datas)\n        except IOError:\n            print(\"*** Check if OLED module inserted ***\")\n            sys.exit(1)\n\n    @property\n    def name(self):\n        '''\n        Get device name\n\n        Returns:\n            string: SH1107G/SSD1307 depends your device plugin.\n        '''\n        return \"SH1107G\"\n\n    def type(self):\n        '''\n        Get device type\n\n        Returns:\n            int: ``TYPE_GRAY``\n        '''\n        return TYPE_GRAY\n\n    def size(self):\n        '''\n        Get display size\n\n        Returns:\n            (Rows, Columns): the display size, in characters.\n        '''\n        return 16, 16\n\n    def clear(self):\n        '''\n        Clears the screen and positions the cursor in the upper-left corner.\n        '''\n        zeros = [ 0x0 for dummy in range(SH1107G._TOTAL_BYTES) ]\n        self.draw(zeros, SH1107G._TOTAL_BYTES)\n\n    def draw(self, data, bytes):\n        '''\n        Quickly transfer/draw bulk data (specified by data) to OLED,\n        transfer size specified by bytes.\n\n        Args:\n            data (list of int): the data to transfer/draw\n            bytes (int)       : data size\n        '''\n\n        # all pages fill with data\n        for i in range(SH1107G._PAGE_CNT):\n            if i > bytes / SH1107G._PAGE_BYTES:\n                return\n            self._cmd(self._BASE_PAGE_START_ADDR + i)\n            self._cmd(self._BASE_LOW_COLUMN_ADDR)\n            self._cmd(self._BASE_HIGH_COLUMN_ADDR)\n            # fill one PAGE bytes\n            for k in range(0, SH1107G._PAGE_BYTES, 32):\n                # I2C limit to 32 bytes each transfer\n                begin = i * SH1107G._PAGE_BYTES + k\n                end   = begin + 32\n                self._datas(data[begin:end])\n\n    def home(self):\n        '''\n        Positions the cursor in the upper-left of the OLED.\n        That is, use that location in outputting subsequent text to the display.\n        '''\n        self.setCursor(0, 0)\n\n    def setCursor(self, row, column):\n        '''\n        Position the OLED cursor; that is, set the location\n        at which subsequent text written to the OLED will be displayed.\n\n        Args:\n            row   (int): the row at which to position cursor, with 0 being the first row\n            column(int): the column at which to position cursor, with 0 being the first column\n\n    Returns:\n        None\n        '''\n        self._cmd(self._BASE_PAGE_START_ADDR + row)\n        self._cmd(0x08 if column % 2 else self._BASE_LOW_COLUMN_ADDR)\n        self._cmd(self._BASE_HIGH_COLUMN_ADDR + (column >> 1))\n\n    def _putchar(self, c):\n        asc = ord(c)\n        if asc < 32 or asc > 127:\n                asc = ord(' ')\n        for i in range(8):\n            fontmap = []\n            fontmap.append(BasicFont[asc - 32][i])\n            self._datas(fontmap)\n\n    def write(self, msg):\n        '''\n        Write character(s) to the OLED.\n\n        Args:\n            msg (string): the character(s) to write to the display\n\n        Returns:\n            None\n        '''\n        for i in range(len(msg)):\n            self._putchar(msg[i])\n\n    def _backlight_on(self, en):\n        self._cmd(self._DISPLAY_CMD_ON if en else self._DISPLAY_CMD_OFF)\n\n\ndef main():\n    import time\n\n    oled = SH1107G()\n    rows, cols = oled.size()\n    print(\"OLED model: {}\".format(oled.name))\n    print(\"OLED type : {} x {}\".format(cols, rows))\n\n    oled.backlight(False)\n    time.sleep(1)\n\n    oled.backlight(True)\n    oled.setCursor(0, 0)\n    oled.write(\"hello world!\")\n    oled.setCursor(0, cols - 1)\n    oled.write('X')\n    oled.setCursor(rows - 1, 0)\n    for i in range(cols):\n        oled.write(chr(ord('A') + i))\n\n    time.sleep(3)\n    oled.clear()\n\nif __name__ == '__main__':\n    main()\n\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"\uff08env\uff09pi@raspberrypi:~ grove_lcd_1.2inches\n")),(0,a.yg)("admonition",{title:"success",type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"If everything goes well, you will be able to see the following result")),(0,a.yg)("div",{align:"center"},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/images/play_with_raspberry.jpg"})),(0,a.yg)("p",null,"You can quit this program by simply press ",(0,a.yg)("inlineCode",{parentName:"p"},"ctrl"),"+",(0,a.yg)("inlineCode",{parentName:"p"},"c"),"."),(0,a.yg)("h2",{id:"schematic-online-viewer"},"Schematic Online Viewer"),(0,a.yg)("div",{className:"altium-ecad-viewer","data-project-src":"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/resources/OLED%20Display.zip",style:{borderRadius:"0px 0px 4px 4px",height:500,borderStyle:"solid",borderWidth:1,borderColor:"rgb(241, 241, 241)",overflow:"hidden",maxWidth:1280,maxHeight:700,boxSizing:"border-box"}}),(0,a.yg)("h2",{id:"resources"},"Resources"),(0,a.yg)("hr",null),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"[Eagle]")," ",(0,a.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/resources/OLED%20Display.zip"},"Grove-OLED Display 1.12inch in Eagle")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"[PDF]")," ",(0,a.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/resources/Grove%20-%2096x96%20OLED%20Display%20v2.1%20Sch.pdf"},"Grove-OLED Display 1.12inch Sch")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"[PDF]")," ",(0,a.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/resources/Grove%20-%2096x96%20OLED%20Display%20v2.1%20PCB.pdf"},"Grove-OLED Display 1.12inch PCB")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"[Datasheet]")," ",(0,a.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/resources/SSD1327_datasheet.pdf"},"SSD1327 Datasheet")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"[Datasheet]")," ",(0,a.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/resources/308010007_LCD-22P-0.7.pdf"},"LY120 Datasheet")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"[Datasheet]")," ",(0,a.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/resources/SH1107G_datasheet.pdf"},"SH1107G_datasheet")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"[Tool]")," ",(0,a.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove_OLED_1.12/resources/Make_A_96X96_Image1.zip"},"Reference for Make a 96x96 Image"))),(0,a.yg)("h2",{id:"project"},"Project"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Smart Crops: Implementing IoT in Conventional Agriculture!")," Our mission with nature is to preserve it, designing and implementing technologies and monitoring methods with the help of IoT via Helium."),(0,a.yg)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/gabogiraldo/smart-crops-implementing-iot-in-conventional-agriculture-3674a6/embed",width:"350"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Automated Plant Watering System")," A device that waters plants and monitors temprature using an ESP8266 and Android app."),(0,a.yg)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/ammarshahid572/automated-plant-watering-system-cb23d9/embed",width:"350"}),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Flying BeagleBone Green")," BBBmini is a state of the art Linux autopilot / flightcontroller Cape for the BeagleBone. It can be used for Copter, Planes or Rovers."),(0,a.yg)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/mirkix/flying-beaglebone-green-448b60/embed",width:"350"}),(0,a.yg)("h2",{id:"tech-support--product-discussion"},"Tech Support & Product Discussion"),(0,a.yg)("p",null,"Thank you for choosing our products! We are here to provide you with different support to ensure that your experience with our products is as smooth as possible. We offer several communication channels to cater to different preferences and needs."),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,a.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,a.yg)("div",{class:"button_tech_support_container"},(0,a.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,a.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}g.isMDXComponent=!0}}]);