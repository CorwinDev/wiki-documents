"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[90090],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=r,g=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return t?i.createElement(g,o(o({ref:n},d),{},{components:t})):i.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},48286:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=t(9668),r=(t(96540),t(15680));const a={description:"Reading Coronavirus Live Data using Wio Terminal",title:"\u4f7f\u7528Wio\u7ec8\u7aef\u8bfb\u53d6\u51a0\u72b6\u75c5\u6bd2COVID-19\u5b9e\u65f6\u6570\u636e",keywords:["Wio_terminal Tutorial"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-Terminal-Reading-COVID19",last_update:{date:"3/07/2024",author:"jessie"}},o="\u4f7f\u7528Wio\u7ec8\u7aef\u8bfb\u53d6\u51a0\u72b6\u75c5\u6bd2COVID-19\u5b9e\u65f6\u6570\u636e",l={unversionedId:"zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Reading-COVID19",id:"zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Reading-COVID19",title:"\u4f7f\u7528Wio\u7ec8\u7aef\u8bfb\u53d6\u51a0\u72b6\u75c5\u6bd2COVID-19\u5b9e\u65f6\u6570\u636e",description:"Reading Coronavirus Live Data using Wio Terminal",source:"@site/docs/zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Reading-COVID19.md",sourceDirName:"zh-CN/Sensor/Wio_Terminal/Tutorial",slug:"/cn/Wio-Terminal-Reading-COVID19",permalink:"/cn/Wio-Terminal-Reading-COVID19",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/Wio_Terminal/Tutorial/CN-Wio-Terminal-Reading-COVID19.md",tags:[],version:"current",lastUpdatedBy:"jessie",lastUpdatedAt:1709769600,formattedLastUpdatedAt:"Mar 7, 2024",frontMatter:{description:"Reading Coronavirus Live Data using Wio Terminal",title:"\u4f7f\u7528Wio\u7ec8\u7aef\u8bfb\u53d6\u51a0\u72b6\u75c5\u6bd2COVID-19\u5b9e\u65f6\u6570\u636e",keywords:["Wio_terminal Tutorial"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-Terminal-Reading-COVID19",last_update:{date:"3/07/2024",author:"jessie"}},sidebar:"CNSidebar",previous:{title:"\u4f7f\u7528Wio\u7ec8\u7aef\u7684\u9ad8\u7cbe\u5ea6\u6c14\u538b\u4f20\u611f\u5668",permalink:"/cn/Barometric-Pressure-sensor-using-the-Wio-terminal"},next:{title:"\u4f7f\u7528Wio Terminal\u6784\u5efa\u7ea2\u5916\u70ed\u6210\u50cf\u76f8\u673a",permalink:"/cn/Wio-Terminal-Thermal-Camera"}},c={},s=[{value:"\u96f6\u4ef6\u6e05\u5355",id:"\u96f6\u4ef6\u6e05\u5355",level:2},{value:"\u7279\u70b9",id:"\u7279\u70b9",level:2},{value:"\u6240\u9700\u7684Arduino\u5e93",id:"\u6240\u9700\u7684arduino\u5e93",level:2},{value:"Arduino\u8bf4\u660e",id:"arduino\u8bf4\u660e",level:2},{value:"\u5b8c\u6574\u4ee3\u7801",id:"\u5b8c\u6574\u4ee3\u7801",level:2}],d={toc:s},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,i.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u4f7f\u7528wio\u7ec8\u7aef\u8bfb\u53d6\u51a0\u72b6\u75c5\u6bd2covid-19\u5b9e\u65f6\u6570\u636e"},"\u4f7f\u7528Wio\u7ec8\u7aef\u8bfb\u53d6\u51a0\u72b6\u75c5\u6bd2COVID-19\u5b9e\u65f6\u6570\u636e"),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/COVID-19.gif"})),(0,r.yg)("p",null,"\u672cWiki\u662f\u5bf9 ",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-Reading-Github/"},"\u4f7f\u7528Wio\u7ec8\u7aef\u8bfb\u53d6GitHub\u5b58\u50a8\u5e93\u7edf\u8ba1\u4fe1\u606f"),"\u7684\u7edf\u8ba1, \u4fee\u6539\u540e\u53ef\u4ee5\u8bbf\u95ee ",(0,r.yg)("a",{parentName:"p",href:"https://covid19api.com/"},"Coronavirus COVID19 API")," \u5e76\u89e3\u6790\u6570\u636e\uff0c\u5c06\u5b9e\u65f6COVID-19\u6570\u636e\u663e\u793a\u5728LCD\u5c4f\u5e55\u4e0a\u3002"),(0,r.yg)("h2",{id:"\u96f6\u4ef6\u6e05\u5355"},"\u96f6\u4ef6\u6e05\u5355"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Terminal-p-4509.html"},"Wio Terminal"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Wio-Terminal-Chassis-Battery-p-4516.html"},"Wio Terminal \u7535\u6c60\u5e95\u76d8")))),(0,r.yg)("h2",{id:"\u7279\u70b9"},"\u7279\u70b9"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u8fde\u63a5\u5230https\u670d\u52a1\u5668")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u83b7\u53d6COVID-19\u5b9e\u65f6\u6570\u636eAPI")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u6309\u94ae\u6309\u4e0b\u4ee5\u5237\u65b0\u6570\u636e"))),(0,r.yg)("h2",{id:"\u6240\u9700\u7684arduino\u5e93"},"\u6240\u9700\u7684Arduino\u5e93"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5b89\u88c5LCD\u5c4f\u5e55\u5e93 ",(0,r.yg)("inlineCode",{parentName:"p"},"Seeed_Arduino_LCD"),", \u8bf7\u8bbf\u95ee ",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-LCD-Overview/"},"Wio Terminal LCD")," \u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u8bbf\u95ee ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/bblanchon/ArduinoJson"},"ArduinoJson")," \u5b58\u50a8\u5e93\u5e76\u5c06\u6574\u4e2a\u5b58\u50a8\u5e93\u4e0b\u8f7d\u5230\u672c\u5730\u9a71\u52a8\u5668\u3002"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"\u73b0\u5728\uff0c\u53ef\u4ee5\u5c06ArduinoJson\u5e93\u5b89\u88c5\u5230Arduino IDE\u4e2d\u3002\u6253\u5f00Arduino IDE\uff0c\u70b9\u51fb ",(0,r.yg)("inlineCode",{parentName:"li"},"sketch")," -> ",(0,r.yg)("inlineCode",{parentName:"li"},"Include Library")," -> ",(0,r.yg)("inlineCode",{parentName:"li"},"Add .ZIP Library"),", \u9009\u62e9\u521a\u521a\u4e0b\u8f7d\u7684 ",(0,r.yg)("inlineCode",{parentName:"li"},"ArduinoJson")," \u6587\u4ef6\u3002"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u6709\u5173Https\u8fde\u63a5\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee ",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-Wi-Fi/#wi-fi-https-connection-example-code"},(0,r.yg)("strong",{parentName:"a"},"\u6b64\u5904")),"\u3002"))),(0,r.yg)("h2",{id:"arduino\u8bf4\u660e"},"Arduino\u8bf4\u660e"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u4e0b\u8f7d ",(0,r.yg)("a",{parentName:"p",href:"https://files.seeedstudio.com/wiki/Wio-Terminal/res/Free_Fonts.h"},(0,r.yg)("inlineCode",{parentName:"a"},"Free_Fonts.h"))," \u5934\u6587\u4ef6\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5728LCD\u5e93\u4e2d\u4f7f\u7528\u81ea\u7531\u5b57\u4f53\u7684\u7f29\u5199\u3002\u8bf7\u786e\u4fdd\u5c06\u6b64\u5934\u6587\u4ef6\u653e\u5728\u4e0eArduino Sketch\u76f8\u540c\u7684\u4f4d\u7f6e\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u4e0b\u8f7d ",(0,r.yg)("a",{parentName:"p",href:"http://files.seeedstudio.com/wiki/Wio-Terminal/res/covid.zip"},"\u6b64\u5904")," \u7684\u5b8c\u6574\u4ee3\u7801\u6216\u590d\u5236\u4ee5\u4e0b\u4ee3\u7801\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u4e0a\u4f20\u4ee3\u7801\u3002"))),(0,r.yg)("h2",{id:"\u5b8c\u6574\u4ee3\u7801"},"\u5b8c\u6574\u4ee3\u7801"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"\u6ce8:")," \u5c06\u4ee3\u7801\u4e2d\u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"ssid")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"password")," \u66f4\u6539\u4e3a\u60a8\u7684\u65e0\u7ebf\u7f51\u7edcWi-Fi\u7684\u540d\u79f0\u548c\u5bc6\u7801\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n#include <WiFiClientSecure.h>\n#include <ArduinoJson.h>\n#include"Free_Fonts.h"\n#include"TFT_eSPI.h"\nTFT_eSPI tft;\n\nconst char* ssid     = "YourNetworkName";\nconst char* password = "yourNetworkPassword";\n\nconst char*  server = "api.covid19api.com";  // Server URL\n\nconst char* test_root_ca = \\\n                            "-----BEGIN CERTIFICATE-----\\n"\n                            "MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/\\n"\n                            "MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\\n"\n                            "DkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow\\n"\n                            "SjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT\\n"\n                            "GkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC\\n"\n                            "AQ8AMIIBCgKCAQEAnNMM8FrlLke3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF\\n"\n                            "q6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8\\n"\n                            "SMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0\\n"\n                            "Z8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA\\n"\n                            "a6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj\\n"\n                            "/PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIDAQABo4IBfTCCAXkwEgYDVR0T\\n"\n                            "AQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG\\n"\n                            "CCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv\\n"\n                            "bTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k\\n"\n                            "c3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw\\n"\n                            "VAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC\\n"\n                            "ARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz\\n"\n                            "MDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu\\n"\n                            "Y3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF\\n"\n                            "AAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo\\n"\n                            "uM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/\\n"\n                            "wApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu\\n"\n                            "X4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG\\n"\n                            "PfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6\\n"\n                            "KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==\\n"\n                            "-----END CERTIFICATE-----\\n";\n\n// You can use x.509 client certificates if you want\n//const char* test_client_key = "";   //to verify the client\n//const char* test_client_cert = "";  //to verify the client\n\nString data;\n\nWiFiClientSecure client;\n\nvoid setup() {\n    //Initialize serial and wait for port to open:\n    Serial.begin(115200);\n    delay(100);\n\n    pinMode(WIO_KEY_C, INPUT_PULLUP);\n\n    Serial.print("Attempting to connect to SSID: ");\n    Serial.println(ssid);\n    WiFi.begin(ssid, password);\n\n    tft.begin();\n    tft.setRotation(3);\n    tft.fillScreen(TFT_BLACK);\n    tft.setFreeFont(FMB12);\n    tft.setCursor((320 - tft.textWidth("Connecting to Wi-Fi.."))/2, 120);\n    tft.print("Connecting to Wi-Fi..");\n\n    // attempt to connect to Wifi network:\n    while (WiFi.status() != WL_CONNECTED) {\n        Serial.print(".");\n        // wait 1 second for re-trying\n        delay(1000);\n    }\n\n    Serial.print("Connected to ");\n    Serial.println(ssid);\n\n    tft.fillScreen(TFT_BLACK);\n    tft.setCursor((320 - tft.textWidth("Connected!"))/2, 120);\n    tft.print("Connected!");\n\n    getData();\n}\n\nint lastState = 1;\nvoid loop()\n{\n    int currentState = digitalRead(WIO_KEY_C);\n    if (currentState == 0) {\n      if (currentState != lastState) {\n        getData();\n      }\n      lastState = !lastState;\n    }\n}\n\nvoid getData() {\n    client.setCACert(test_root_ca);\n  //client.setCertificate(test_client_key); // for client verification\n  //client.setPrivateKey(test_client_cert); // for client verification\n\n    tft.fillScreen(TFT_BLACK);\n    tft.setTextColor(TFT_WHITE);\n    tft.setCursor((320 - tft.textWidth("Conectting to Server.."))/2, 120);\n    tft.print("Connecting to Server..");\n\n    Serial.println("\\nStarting connection to server...");\n    if (!client.connect(server, 443)) {\n        Serial.println("Connection failed!");\n        tft.fillScreen(TFT_BLACK);\n        tft.setCursor((320 - tft.textWidth("Connection failed!"))/2, 120);\n        tft.print("Connection failed!");\n    } else {\n        Serial.println("Connected to server!");\n        tft.fillScreen(TFT_BLACK);\n        tft.setCursor((320 - tft.textWidth("Connected to Server!"))/2, 120);\n        tft.print("Connected to Server!");\n\n        // Make a HTTP request:\n        client.println("GET https://api.covid19api.com/world/total HTTP/1.0");\n        client.println("Host: api.covid19api.com");\n        client.println("Connection: close");\n        client.println();\n\n        while (client.connected()) {\n            String line = client.readStringUntil(\'\\n\');\n            if (line == "\\r") {\n                Serial.println("headers received");\n                break;\n            }\n        }\n\n        while(client.available())\n        {\n          String line = client.readStringUntil(\'\\r\');\n          data = line;\n        }\n        Serial.println(data);\n        client.stop();\n        Serial.println("closing connection");\n    }\n\n    //ArduinoJson to parse data, plesae check ArduinoJson for more info\n    const size_t capacity = JSON_OBJECT_SIZE(3) + 50;\n    DynamicJsonDocument doc(capacity);\n    deserializeJson(doc, data);\n\n    long TotalConfirmed = doc["TotalConfirmed"];\n    long TotalDeaths = doc["TotalDeaths"];\n    long TotalRecovered = doc["TotalRecovered"];\n\n// -----------------LCD---------------------\n\n    tft.fillScreen(tft.color565(24,15,60));\n    tft.setFreeFont(FF17);\n    tft.setTextColor(tft.color565(224,225,232));\n    tft.drawString("COVID-19 Dashboard/Global",20,10);\n\n    tft.fillRoundRect(10, 45, 300, 55, 5, tft.color565(40,40,86));\n    tft.fillRoundRect(10, 105, 300, 55, 5, tft.color565(40,40,86));\n    tft.fillRoundRect(10, 165, 300, 55, 5, tft.color565(40,40,86));\n\n    tft.setFreeFont(FM9);\n    tft.drawString("Total Confirmed", 75, 50);\n    tft.drawString("Total Deaths",95, 110);\n    tft.drawString("Total Recovered",75, 170);\n\n    tft.setFreeFont(FMB12);\n    tft.setTextColor(TFT_RED);\n    tft.drawNumber(TotalConfirmed, 110, 75);\n    tft.setTextColor(tft.color565(224,225,232));\n    tft.drawNumber(TotalDeaths, 120, 135);\n    tft.setTextColor(TFT_GREEN);\n    tft.drawNumber(TotalRecovered, 110, 195);\n}\n')))}u.isMDXComponent=!0}}]);