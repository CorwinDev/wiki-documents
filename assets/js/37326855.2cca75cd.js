"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[18622],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>c});var r=t(96540);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),g=p(t),m=l,c=g["".concat(s,".").concat(m)]||g[m]||u[m]||a;return t?r.createElement(c,o(o({ref:n},d),{},{components:t})):r.createElement(c,o({ref:n},d))}));function c(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,o=new Array(a);o[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[g]="string"==typeof e?e:l,o[1]=i;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},41928:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=t(58168),l=(t(96540),t(15680));const a={title:"Grove - \u53ef\u4e32\u8054RGB LED",description:"Grove - \u53ef\u4e32\u8054RGB LED",keywords:["docs","docusaurus"],image:"https://wiki.seeedstudio.com/Grove-Chainable_RGB_LED/",slug:"/cn/Grove-Chainable_RGB_LED",last_update:{date:"03/20/2024",author:"WuFeifei"}},o=void 0,i={unversionedId:"zh-CN/Sensor/Grove/Grove_Accessories/Actuator/cn-Grove-Chainable_RGB_LED",id:"zh-CN/Sensor/Grove/Grove_Accessories/Actuator/cn-Grove-Chainable_RGB_LED",title:"Grove - \u53ef\u4e32\u8054RGB LED",description:"Grove - \u53ef\u4e32\u8054RGB LED",source:"@site/docs/zh-CN/Sensor/Grove/Grove_Accessories/Actuator/cn-Grove-Chainable_RGB_LED.md",sourceDirName:"zh-CN/Sensor/Grove/Grove_Accessories/Actuator",slug:"/cn/Grove-Chainable_RGB_LED",permalink:"/cn/Grove-Chainable_RGB_LED",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/Grove/Grove_Accessories/Actuator/cn-Grove-Chainable_RGB_LED.md",tags:[],version:"current",lastUpdatedBy:"WuFeifei",lastUpdatedAt:1710892800,formattedLastUpdatedAt:"Mar 20, 2024",frontMatter:{title:"Grove - \u53ef\u4e32\u8054RGB LED",description:"Grove - \u53ef\u4e32\u8054RGB LED",keywords:["docs","docusaurus"],image:"https://wiki.seeedstudio.com/Grove-Chainable_RGB_LED/",slug:"/cn/Grove-Chainable_RGB_LED",last_update:{date:"03/20/2024",author:"WuFeifei"}}},s={},p=[{value:"\u7248\u672c",id:"\u7248\u672c",level:2},{value:"\u89c4\u683c",id:"\u89c4\u683c",level:2},{value:"\u652f\u6301\u7684\u5e73\u53f0",id:"\u652f\u6301\u7684\u5e73\u53f0",level:2},{value:"\u4f7f\u7528\u65b9\u6cd5",id:"\u4f7f\u7528\u65b9\u6cd5",level:3},{value:"\u73a9\u8f6c Arduino",id:"\u73a9\u8f6c-arduino",level:3},{value:"\u73a9\u8f6c Codecraft",id:"\u73a9\u8f6c-codecraft",level:3},{value:"\u786c\u4ef6",id:"\u786c\u4ef6",level:4},{value:"\u8f6f\u4ef6",id:"\u8f6f\u4ef6",level:4},{value:"\u73a9\u8f6c Raspberry Pi",id:"\u73a9\u8f6c-raspberry-pi",level:3},{value:"\u4f7f\u7528Beaglebone Green",id:"\u4f7f\u7528beaglebone-green",level:3},{value:"\u9879\u76ee",id:"\u9879\u76ee",level:2},{value:"\u6280\u672f\u652f\u6301\u4e0e\u4ea7\u54c1\u8ba8\u8bba",id:"\u6280\u672f\u652f\u6301\u4e0e\u4ea7\u54c1\u8ba8\u8bba",level:2}],d={toc:p},g="wrapper";function u(e){let{components:n,...t}=e;return(0,l.yg)(g,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-Chainable_RGB_LED/img/Grove-Chainable_RGB_LED_V2.0.jpg",alt:null})),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Grove - \u94fe\u5f0fRGB LED"),"\u662f\u57fa\u4e8eP9813\u82af\u7247\u7684\u5168\u5f69\u8272LED\u9a71\u52a8\u5668\u3002\u5b83\u63d0\u4f9b3\u4e2a\u6052\u6d41\u9a71\u52a8\u5668\u4ee5\u53ca256\u7ea7\u7070\u5ea6\u7684\u8c03\u5236\u8f93\u51fa\u3002\u5b83\u4f7f\u7528\u4e24\u7ebf\u4f20\u8f93\uff08\u6570\u636e\u548c\u65f6\u949f\uff09\u4e0eMCU\u8fdb\u884c\u901a\u4fe1\u3002\u8fd9\u79cd\u4e24\u7ebf\u4f20\u8f93\u53ef\u7528\u4e8e\u7ea7\u8054\u989d\u5916\u7684",(0,l.yg)("strong",{parentName:"p"},"Grove - \u94fe\u5f0fRGB LED"),"\u6a21\u5757\u3002\u5185\u7f6e\u7684\u65f6\u949f\u518d\u751f\u589e\u5f3a\u4e86\u4f20\u8f93\u8ddd\u79bb\u3002\u8fd9\u4e2aGrove\u6a21\u5757\u9002\u7528\u4e8e\u4efb\u4f55\u57fa\u4e8e\u5f69\u8272LED\u7684\u9879\u76ee\u3002"),(0,l.yg)("h2",{id:"\u7248\u672c"},"\u7248\u672c"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"\u4fee\u8ba2\u7248\u672c"),(0,l.yg)("th",{parentName:"tr",align:null},"\u63cf\u8ff0"),(0,l.yg)("th",{parentName:"tr",align:null},"\u53d1\u5e03\u65e5\u671f"),(0,l.yg)("th",{parentName:"tr",align:null},"\u8d2d\u4e70\u65b9\u5f0f"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"v1"),(0,l.yg)("td",{parentName:"tr",align:null},"\u521d\u59cb\u516c\u5f00\u53d1\u5e03\uff08\u6d4b\u8bd5\u7248\uff09"),(0,l.yg)("td",{parentName:"tr",align:null},"2011\u5e745\u67085\u65e5"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://www.seeedstudio.com/Grove-Chainable-RGB-LED-p-850.html"},(0,l.yg)("img",{parentName:"a",src:"https://files.seeedstudio.com/wiki/Seeed-WiKi/docs/images/get_one_now_small.png",alt:null})))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"v2"),(0,l.yg)("td",{parentName:"tr",align:null},"\u5c06P9813S16\u66ff\u6362\u4e3aP9813S14\uff0c\u5e76\u5c06Grove\u8fde\u63a5\u5668\u4ece\u5782\u76f4\u66f4\u6539\u4e3a\u6c34\u5e73"),(0,l.yg)("td",{parentName:"tr",align:null},"2016\u5e744\u670819\u65e5"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("a",{parentName:"td",href:"https://www.seeedstudio.com/Grove-%E2%80%93-Chainable-RGB-Led-V2.0-p-2903.html"},(0,l.yg)("img",{parentName:"a",src:"https://files.seeedstudio.com/wiki/Seeed-WiKi/docs/images/get_one_now_small.png",alt:null})))))),(0,l.yg)("h2",{id:"\u89c4\u683c"},"\u89c4\u683c"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u5de5\u4f5c\u7535\u538b: 5V"),(0,l.yg)("li",{parentName:"ul"},"\u5de5\u4f5c\u7535\u6d41: 20mA"),(0,l.yg)("li",{parentName:"ul"},"\u901a\u4fe1\u534f\u8bae: \u4e32\u884c\n\u5173\u4e8eGrove\u6a21\u5757\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605",(0,l.yg)("a",{parentName:"li",href:"https://wiki.seeedstudio.com/Grove_System/"},"Grove\u7cfb\u7edf"),"\n:::")),(0,l.yg)("h2",{id:"\u652f\u6301\u7684\u5e73\u53f0"},"\u652f\u6301\u7684\u5e73\u53f0"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Arduino"),(0,l.yg)("th",{parentName:"tr",align:null},"\u6811\u8393\u6d3e"),(0,l.yg)("th",{parentName:"tr",align:null}),(0,l.yg)("th",{parentName:"tr",align:null}),(0,l.yg)("th",{parentName:"tr",align:null}))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/arduino_logo.jpg",alt:null})),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/raspberry_pi_logo_n.jpg",alt:null})),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/bbg_logo.jpg",alt:null})),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/wio_logo_n.jpg",alt:null})),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("img",{parentName:"td",src:"https://files.seeedstudio.com/wiki/wiki_english/docs/images/linkit_logo.jpg",alt:null}))))),(0,l.yg)("p",null,":::\u8b66\u544a\n\u4e0a\u8ff0\u63d0\u5230\u7684\u652f\u6301\u5e73\u53f0\u662f\u8be5\u6a21\u5757\u8f6f\u4ef6\u6216\u7406\u8bba\u517c\u5bb9\u6027\u7684\u4e00\u4e2a\u6307\u6807\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u63d0\u4f9b\u9488\u5bf9Arduino\u5e73\u53f0\u7684\u8f6f\u4ef6\u5e93\u6216\u4ee3\u7801\u793a\u4f8b\u3002\u4e0d\u53ef\u80fd\u4e3a\u6240\u6709\u53ef\u80fd\u7684MCU\u5e73\u53f0\u63d0\u4f9b\u8f6f\u4ef6\u5e93/\u6f14\u793a\u4ee3\u7801\u3002\u56e0\u6b64\uff0c\u7528\u6237\u5fc5\u987b\u7f16\u5199\u81ea\u5df1\u7684\u8f6f\u4ef6\u5e93\u3002\n:::"),(0,l.yg)("h3",{id:"\u4f7f\u7528\u65b9\u6cd5"},"\u4f7f\u7528\u65b9\u6cd5"),(0,l.yg)("h3",{id:"\u73a9\u8f6c-arduino"},"\u73a9\u8f6c Arduino"),(0,l.yg)("p",null,"\u5f53\u4f60\u62ff\u5230Grove - \u94fe\u5f0fRGB LED\u65f6\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u5982\u4f55\u70b9\u4eae\u5b83\u3002\u73b0\u5728\u6211\u4eec\u5c06\u5411\u4f60\u5c55\u793a\u8fd9\u4e2a\u6f14\u793a\uff1aRGB\u7684\u6240\u6709\u989c\u8272\u4ee5\u7edf\u4e00\u7684\u65b9\u5f0f\u5faa\u73af\u3002"),(0,l.yg)("p",null,"\u8981\u5b8c\u6210\u6b64\u6f14\u793a\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2aGrove - \u94fe\u5f0fRGB LED\u3002\u8bf7\u6ce8\u610f\uff0c\u4e00\u4e2aGrove - \u94fe\u5f0fRGB LED\u7684IN\u63a5\u53e3\u5e94\u8fde\u63a5\u5230Grove - \u57fa\u7840\u5e95\u677f\u7684D7/D8\uff0c\u5176OUT\u63a5\u53e3\u8fde\u63a5\u5230\u53e6\u4e00\u4e2aGrove - \u94fe\u5f0fRGB LED\u7684IN\u63a5\u53e3\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u8fde\u63a5\u66f4\u591a\u7684LED\u3002"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u4e0b\u8f7d",(0,l.yg)("a",{parentName:"li",href:"https://github.com/pjpmarques/ChainableLED"},"Chainable LED\u5e93"),"\u5e76\u5c06\u5176\u5b89\u88c5\u5230Arduino\u5e93\u4e2d\u3002\u5728wiki\u9875\u9762\u4e2d\u6709\u5173\u4e8e",(0,l.yg)("a",{parentName:"li",href:"https://yiyan.baidu.com/How_to_install_Arduino_Library"},"\u5982\u4f55\u5b89\u88c5Arduino\u5e93"),"\u7684\u8bfe\u7a0b\u3002"),(0,l.yg)("li",{parentName:"ul"},"\u901a\u8fc7\u8def\u5f84\uff1a\u6587\u4ef6->\u793a\u4f8b->ChainableLED_master\u6253\u5f00\u793a\u4f8bCycleThroughColors\uff0c\u5e76\u5c06\u5176\u4e0a\u4f20\u5230Seeeduino\u3002")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"\n/* \n * \u4f7f\u7528ChainableRGB\u5e93\u63a7\u5236Grove RGB\u7684\u793a\u4f8b\u3002\n * \u8fd9\u6bb5\u4ee3\u7801\u4ee5\u7edf\u4e00\u7684\u65b9\u5f0f\u5faa\u73af\u904d\u5386\u6240\u6709\u989c\u8272\u3002\u8fd9\u662f\u901a\u8fc7\u4f7f\u7528HSB\u989c\u8272\u7a7a\u95f4\u6765\u5b9e\u73b0\u7684\u3002\n */\n\n\n#include <ChainableLED.h>\n\n#define NUM_LEDS  5\n\nChainableLED leds(7, 8, NUM_LEDS);\n\nvoid setup()\n{\n  leds.init();\n}\n\nfloat hue = 0.0;\nboolean up = true;\n\nvoid loop()\n{\n  for (byte i=0; i<NUM_LEDS; i++)\n    leds.setColorHSL(i, hue, 1.0, 0.5);\n    \n  delay(50);\n    \n  if (up)\n    hue+= 0.025;\n  else\n    hue-= 0.025;\n    \n  if (hue>=1.0 && up)\n    up = false;\n  else if (hue<=0.0 && !up)\n    up = true;\n}\n\n")),(0,l.yg)("p",null,"\u4f60\u53ef\u4ee5\u89c2\u5bdf\u5230\u8fd9\u6837\u7684\u573a\u666f\uff1a\u4e94\u4e2aLED\u7684\u989c\u8272\u4f1a\u8fde\u7eed\u6e10\u53d8\u3002"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6269\u5c55\u5e94\u7528\uff1a"),"\n\u57fa\u4e8e",(0,l.yg)("a",{parentName:"p",href:"https://github.com/pjpmarques/ChainableLED"},"Chainable LED\u5e93"),"\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u8fd9\u4e2a\u6f14\u793a\uff1aRGB\u989c\u8272\u968fGrove\u6e29\u5ea6\u4f20\u611f\u5668\u6d4b\u91cf\u7684\u6e29\u5ea6\u800c\u53d8\u5316\u3002\u5f53\u6e29\u5ea6\u4ece25\u5ea6\u53d8\u5316\u523032\u5ea6\u65f6\uff0cRGB\u989c\u8272\u4ece\u7eff\u8272\u53d8\u4e3a\u7ea2\u8272\u3002\u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\u6240\u793a\u3002\u5982\u679c\u4f60\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u3002"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'    // \u6e29\u5ea6 -> rgbLED \u6f14\u793a\n    // \u6e29\u5ea6\u4ece25\u523032\uff0crgbLed\u4ece\u7eff\u8272\u53d8\u4e3a\u7ea2\u8272\n    // Grove-\u6e29\u5ea6\u4f20\u611f\u5668\u63a5\u5165A0\n    // LED\u63a5\u5165D7\uff0cD8\n\n    #include <Streaming.h>\n    #include <ChainableLED.h>\n\n    #define TEMPUP 32\n    #define TEMPDOWN 25\n\n    ChainableLED leds(7, 8, 1); // connect to pin7 and pin8 , one led\n\n    int getAnalog() // get value from A0\n    {\n        int sum = 0;\n        for(int i=0; i<32; i++)\n        {\n            sum += analogRead(A0);\n        }\n\n        return sum>>5;\n    }\n\n    float getTemp() // get temperature\n    {\n        float temperature = 0.0;\n        float resistance = 0.0;\n        int B = 3975; //B value of the thermistor\n\n        int a = getAnalog();\n\n        resistance = (float)(1023-a)*10000/a; //get the resistance of the sensor;\n        temperature = 1/(log(resistance/10000)/B+1/298.15)-273.15; //convert to temperature via datasheet\xa0;\n        return temperature;\n    }\n\n    void ledLight(int dta) // light led\n    {\n\n        dta = dta/4; // 0 - 255\n\n        int colorR = dta;\n        int colorG = 255-dta;\n        int colorB = 0;\n\n        leds.setColorRGB(0, colorR, colorG, colorB);\n    }\n\n    void setup()\n    {\n        Serial.begin(38400);\n        cout << "hello world\xa0!" << endl;\n    }\n\n    void loop()\n    {\n        float temp = getTemp();\n        int nTemp = temp*100;\n\n        nTemp = nTemp > TEMPUP*100\xa0? TEMPUP*100\xa0: (nTemp < TEMPDOWN*100\xa0? TEMPDOWN*100\xa0: nTemp);\n        nTemp = map(nTemp, TEMPDOWN*100, TEMPUP*100, 0, 1023);\n        ledLight(nTemp);\n        delay(100);\n    }\n')),(0,l.yg)("h3",{id:"\u73a9\u8f6c-codecraft"},"\u73a9\u8f6c Codecraft"),(0,l.yg)("h4",{id:"\u786c\u4ef6"},"\u786c\u4ef6"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa4 1.")," \u5c06Grove - \u94fe\u5f0fRGB LED\u8fde\u63a5\u5230\u57fa\u7840\u5e95\u677f\u7684D7\u7aef\u53e3\u3002"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa4 2.")," \u5c06\u57fa\u7840\u5e95\u677f\u63d2\u63a5\u5230\u4f60\u7684Seeeduino/Arduino\u4e0a\u3002"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa4 3.")," \u901a\u8fc7USB\u7535\u7f06\u5c06Seeeduino/Arduino\u8fde\u63a5\u5230\u4f60\u7684PC\u3002"),(0,l.yg)("h4",{id:"\u8f6f\u4ef6"},"\u8f6f\u4ef6"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa4 1.")," \u6253\u5f00",(0,l.yg)("a",{parentName:"p",href:"https://ide.chmakered.com/"},"Codecraft"),"\uff0c\u6dfb\u52a0Arduino\u652f\u6301\uff0c\u5e76\u5c06\u4e00\u4e2a\u4e3b\u7a0b\u5e8f\u62d6\u653e\u5230\u5de5\u4f5c\u533a\u3002"),(0,l.yg)("p",null,":::\u6ce8\u610f\n\u5982\u679c\u4f60\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528Codecraft\uff0c\u4e5f\u53ef\u4ee5\u53c2\u9605",(0,l.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Guide_for_Codecraft_using_Arduino/"},"\u4f7f\u7528Arduino\u7684Codecraft\u6307\u5357"),"\u3002\n:::"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa4 2.")," \u6309\u7167\u4e0b\u9762\u7684\u56fe\u7247\u62d6\u52a8\u4ee3\u7801\u5757\uff0c\u6216\u8005\u6253\u5f00\u672c\u9875\u9762\u5e95\u90e8\u53ef\u4ee5\u4e0b\u8f7d\u7684cdc\u6587\u4ef6\u3002"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-Chainable_RGB_LED/img/Chainable_RGB_LED.png",alt:null})),(0,l.yg)("p",null,"\u5c06\u7a0b\u5e8f\u4e0a\u4f20\u5230\u4f60\u7684Arduino/Seeeduino\u3002"),(0,l.yg)("p",null,":::\u63d0\u793a\n\u5f53\u4ee3\u7801\u4e0a\u4f20\u5b8c\u6210\u540e\uff0c\u4f60\u4f1a\u770b\u5230LED\u706f\u6e10\u4eae\u6e10\u6697\u3002\n:::"),(0,l.yg)("h3",{id:"\u73a9\u8f6c-raspberry-pi"},"\u73a9\u8f6c Raspberry Pi"),(0,l.yg)("p",null,":::\u6ce8\u610f\n\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f",(0,l.yg)("strong",{parentName:"p"},"\u5e26\u6709Raspberry Pi OS >= Bullseye\u7684Raspberry Pi"),"\uff0c\u4f60\u5fc5\u987b",(0,l.yg)("strong",{parentName:"p"},"\u4ec5\u4f7f\u7528Python3"),"\u6765\u8fd0\u884c\u8fd9\u6761\u547d\u4ee4\u884c\u3002\n:::\n1.\u4f60\u5e94\u8be5\u5df2\u7ecf\u6709\u4e00\u4e2a\u6811\u8393\u6d3e\u548c\u4e00\u4e2agrovepi\u6216grovepi+\u3002"),(0,l.yg)("p",null,"2.\u4f60\u5e94\u8be5\u5df2\u7ecf\u5b8c\u6210\u4e86\u5f00\u53d1\u73af\u5883\u7684\u914d\u7f6e\uff0c\u5426\u5219\u8bf7\u6309\u7167",(0,l.yg)("a",{parentName:"p",href:"https://yiyan.baidu.com/GrovePi_Plus"},"\u8fd9\u91cc"),"\u7684\u8bf4\u660e\u64cd\u4f5c\u3002"),(0,l.yg)("p",null,"3.\u8fde\u63a5"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u4f7f\u7528grove\u7ebf\u5c06\u4f20\u611f\u5668\u8fde\u63a5\u5230grovepi\u7684D7\u63d2\u69fd\u3002")),(0,l.yg)("p",null,"4.\u5bfc\u822a\u5230\u6f14\u793a\u76ee\u5f55\uff1a"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"    cd yourpath/GrovePi/Software/Python/\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u67e5\u770b\u4ee3\u7801")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'     nano grove_chainable_rgb_led.py   # "Ctrl+x" to exit #\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'    import time\n    import grovepi\n\n    # Connect first LED in Chainable RGB LED chain to digital port D7\n    # In: CI,DI,VCC,GND\n    # Out: CO,DO,VCC,GND\n    pin = 7\n\n    # I have 10 LEDs connected in series with the first connected to the GrovePi and the last not connected\n    # First LED input socket connected to GrovePi, output socket connected to second LED input and so on\n    numleds = 1  \n\n    grovepi.pinMode(pin,"OUTPUT")\n    time.sleep(1)\n\n    # Chainable RGB LED methods\n    # grovepi.storeColor(red, green, blue)\n    # grovepi.chainableRgbLed_init(pin, numLeds)\n    # grovepi.chainableRgbLed_test(pin, numLeds, testColor)\n    # grovepi.chainableRgbLed_pattern(pin, pattern, whichLed)\n    # grovepi.chainableRgbLed_modulo(pin, offset, divisor)\n    # grovepi.chainableRgbLed_setLevel(pin, level, reverse)\n\n    # test colors used in grovepi.chainableRgbLed_test()\n    testColorBlack = 0   # 0b000 #000000\n    testColorBlue = 1    # 0b001 #0000FF\n    testColorGreen = 2   # 0b010 #00FF00\n    testColorCyan = 3    # 0b011 #00FFFF\n    testColorRed = 4     # 0b100 #FF0000\n    testColorMagenta = 5 # 0b101 #FF00FF\n    testColorYellow = 6  # 0b110 #FFFF00\n    testColorWhite = 7   # 0b111 #FFFFFF\n\n    # patterns used in grovepi.chainableRgbLed_pattern()\n    thisLedOnly = 0\n    allLedsExceptThis = 1\n    thisLedAndInwards = 2\n    thisLedAndOutwards = 3\n\n    try:\n\n        print "Test 1) Initialise"\n\n        # init chain of leds\n        grovepi.chainableRgbLed_init(pin, numleds)\n        time.sleep(.5)\n\n        # change color to green\n        grovepi.storeColor(0,255,0)\n        time.sleep(.5)\n\n        # set led 1 to green\n        grovepi.chainableRgbLed_pattern(pin, thisLedOnly, 0)\n        time.sleep(.5)\n\n        # change color to red\n        grovepi.storeColor(255,0,0)\n        time.sleep(.5)\n\n        # set led 10 to red\n        grovepi.chainableRgbLed_pattern(pin, thisLedOnly, 9)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 2a) Test Patterns - black"\n\n        # test pattern 0 - black (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(1)\n\n\n        print "Test 2b) Test Patterns - blue"\n\n        # test pattern 1 blue\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlue)\n        time.sleep(1)\n\n\n        print "Test 2c) Test Patterns - green"\n\n        # test pattern 2 green\n        grovepi.chainableRgbLed_test(pin, numleds, testColorGreen)\n        time.sleep(1)\n\n\n        print "Test 2d) Test Patterns - cyan"\n\n        # test pattern 3 cyan\n        grovepi.chainableRgbLed_test(pin, numleds, testColorCyan)\n        time.sleep(1)\n\n\n        print "Test 2e) Test Patterns - red"\n\n        # test pattern 4 red\n        grovepi.chainableRgbLed_test(pin, numleds, testColorRed)\n        time.sleep(1)\n\n\n        print "Test 2f) Test Patterns - magenta"\n\n        # test pattern 5 magenta\n        grovepi.chainableRgbLed_test(pin, numleds, testColorMagenta)\n        time.sleep(1)\n\n\n        print "Test 2g) Test Patterns - yellow"\n\n        # test pattern 6 yellow\n        grovepi.chainableRgbLed_test(pin, numleds, testColorYellow)\n        time.sleep(1)\n\n\n        print "Test 2h) Test Patterns - white"\n\n        # test pattern 7 white\n        grovepi.chainableRgbLed_test(pin, numleds, testColorWhite)\n        time.sleep(1)\n\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 3a) Set using pattern - this led only"\n\n        # change color to red\n        grovepi.storeColor(255,0,0)\n        time.sleep(.5)\n\n        # set led 3 to red\n        grovepi.chainableRgbLed_pattern(pin, thisLedOnly, 2)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 3b) Set using pattern - all leds except this"\n\n        # change color to blue\n        grovepi.storeColor(0,0,255)\n        time.sleep(.5)\n\n        # set all leds except for 3 to blue\n        grovepi.chainableRgbLed_pattern(pin, allLedsExceptThis, 3)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 3c) Set using pattern - this led and inwards"\n\n        # change color to green\n        grovepi.storeColor(0,255,0)\n        time.sleep(.5)\n\n        # set leds 1-3 to green\n        grovepi.chainableRgbLed_pattern(pin, thisLedAndInwards, 2)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 3d) Set using pattern - this led and outwards"\n\n        # change color to green\n        grovepi.storeColor(0,255,0)\n        time.sleep(.5)\n\n        # set leds 7-10 to green\n        grovepi.chainableRgbLed_pattern(pin, thisLedAndOutwards, 6)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 4a) Set using modulo - all leds"\n\n        # change color to black (fully off)\n        grovepi.storeColor(0,0,0)\n        time.sleep(.5)\n\n        # set all leds black\n        # offset 0 means start at first led\n        # divisor 1 means every led\n        grovepi.chainableRgbLed_modulo(pin, 0, 1)\n        time.sleep(.5)\n\n        # change color to white (fully on)\n        grovepi.storeColor(255,255,255)\n        time.sleep(.5)\n\n        # set all leds white\n        grovepi.chainableRgbLed_modulo(pin, 0, 1)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 4b) Set using modulo - every 2"\n\n        # change color to red\n        grovepi.storeColor(255,0,0)\n        time.sleep(.5)\n\n        # set every 2nd led to red\n        grovepi.chainableRgbLed_modulo(pin, 0, 2)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n\n        print "Test 4c) Set using modulo - every 2, offset 1"\n\n        # change color to green\n        grovepi.storeColor(0,255,0)\n        time.sleep(.5)\n\n        # set every 2nd led to green, offset 1\n        grovepi.chainableRgbLed_modulo(pin, 1, 2)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 4d) Set using modulo - every 3, offset 0"\n\n        # change color to red\n        grovepi.storeColor(255,0,0)\n        time.sleep(.5)\n\n        # set every 3nd led to red\n        grovepi.chainableRgbLed_modulo(pin, 0, 3)\n        time.sleep(.5)\n\n        # change color to green\n        grovepi.storeColor(0,255,0)\n        time.sleep(.5)\n\n        # set every 3nd led to green, offset 1\n        grovepi.chainableRgbLed_modulo(pin, 1, 3)\n        time.sleep(.5)\n\n        # change color to blue\n        grovepi.storeColor(0,0,255)\n        time.sleep(.5)\n\n        # set every 3nd led to blue, offset 2\n        grovepi.chainableRgbLed_modulo(pin, 2, 3)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 4e) Set using modulo - every 3, offset 1"\n\n        # change color to yellow\n        grovepi.storeColor(255,255,0)\n        time.sleep(.5)\n\n        # set every 4nd led to yellow\n        grovepi.chainableRgbLed_modulo(pin, 1, 3)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n\n        print "Test 4f) Set using modulo - every 3, offset 2"\n\n        # change color to magenta\n        grovepi.storeColor(255,0,255)\n        time.sleep(.5)\n\n        # set every 4nd led to magenta\n        grovepi.chainableRgbLed_modulo(pin, 2, 3)\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 5a) Set level 6"\n\n        # change color to green\n        grovepi.storeColor(0,255,0)\n        time.sleep(.5)\n\n        # set leds 1-6 to green\n        grovepi.write_i2c_block(0x04,[95,pin,6,0])\n        time.sleep(.5)\n\n        # pause so you can see what happened\n        time.sleep(2)\n\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        time.sleep(.5)\n\n\n        print "Test 5b) Set level 7 - reverse"\n\n        # change color to red\n        grovepi.storeColor(255,0,0)\n        time.sleep(.5)\n\n        # set leds 4-10 to red\n        grovepi.write_i2c_block(0x04,[95,pin,7,1])\n        time.sleep(.5)\n\n\n    except KeyboardInterrupt:\n        # reset (all off)\n        grovepi.chainableRgbLed_test(pin, numleds, testColorBlack)\n        break\n    except IOError:\n        print "Error"\n')),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u6ce8\u610f\uff0c\u6709\u4e00\u4e9b\u4f60\u9700\u8981\u5173\u5fc3\u7684\u4e8b\u60c5\uff1a")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"    pin = 7         #setting up the output pin\n    numleds = 1     #how many leds you plug\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"\u540c\u65f6\uff0c\u4f60\u53ef\u4ee5\u5728grovepi.py\u4e2d\u770b\u5230\u7684\u6240\u6709\u65b9\u6cd5\u662f\uff1a")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"    storeColor(red, green, blue)\n    chainableRgbLed_init(pin, numLeds)\n    chainableRgbLed_test(pin, numLeds, testColor)\n    chainableRgbLed_pattern(pin, pattern, whichLed)\n    chainableRgbLed_modulo(pin, offset, divisor)\n    chainableRgbLed_setLevel(pin, level, reverse)\n")),(0,l.yg)("p",null,"5.\u8fd0\u884c\u6f14\u793a\u3002"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"    sudo python3 grove_chainable_rgb_led.py\n")),(0,l.yg)("p",null,"6.\u5982\u679c\u4f60\u7684grovepi\u6ca1\u6709\u6700\u65b0\u7684\u56fa\u4ef6\uff0c\u8fd9\u4e2a\u6f14\u793a\u53ef\u80fd\u65e0\u6cd5\u5de5\u4f5c\uff0c\u8bf7\u66f4\u65b0\u56fa\u4ef6\u3002"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"    cd yourpath/GrovePi/Firmware\n    sudo ./firmware_update.sh\n")),(0,l.yg)("h3",{id:"\u4f7f\u7528beaglebone-green"},"\u4f7f\u7528Beaglebone Green"),(0,l.yg)("p",null,"\u8981\u5f00\u59cb\u7f16\u8f91\u5728BBG\u4e0a\u8fd0\u884c\u7684\u7a0b\u5e8f\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528Cloud9 IDE\u3002"),(0,l.yg)("p",null,"\u4f5c\u4e3a\u719f\u6089Cloud9 IDE\u7684\u7b80\u5355\u7ec3\u4e60\uff0c\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u95ea\u70c1BeagleBone\u4e0a4\u4e2a\u7528\u6237\u53ef\u7f16\u7a0bLED\u4e2d\u7684\u4e00\u4e2a\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5f00\u59cb\u3002"),(0,l.yg)("p",null,"\u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528Cloud9 IDE\uff0c\u8bf7\u6309\u7167\u6b64",(0,l.yg)("a",{parentName:"p",href:"https://yiyan.baidu.com/BeagleBone_Green"},(0,l.yg)("strong",{parentName:"a"},"\u94fe\u63a5")),"\u64cd\u4f5c\u3002"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa41\uff1a"),"\u5c06Grove - UART\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3aGrove - GPIO\u5957\u63a5\u5b57\uff0c\u53ea\u9700\u6309\u7167\u6b64",(0,l.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/recipe/362-how-to-use-the-grove-uart-port-as-a-gpio-on-bbg.html"},(0,l.yg)("strong",{parentName:"a"},"\u94fe\u63a5")),"\u64cd\u4f5c\u5373\u53ef\u3002"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa42\uff1a"),"\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u201c+\u201d\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\u3002"),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-Chainable_RGB_LED/img/C9-create-tab.png",alt:null})),(0,l.yg)("p",null,(0,l.yg)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Grove-Chainable_RGB_LED/img/C9_newfile.jpg",alt:null})),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa43\uff1a"),"\u5c06\u4ee5\u4e0b\u4ee3\u7801\u590d\u5236\u5e76\u7c98\u8d34\u5230\u65b0\u6807\u7b7e\u9875\u4e2d"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},'import time\nimport Adafruit_BBIO.GPIO as GPIO\n\xa0\nCLK_PIN = "P9_22"\nDATA_PIN = "P9_21"\nNUMBER_OF_LEDS = 1\n\xa0\nclass ChainableLED():\n    def __init__(self, clk_pin, data_pin, number_of_leds):\n        self.__clk_pin = clk_pin\n        self.__data_pin = data_pin\n        self.__number_of_leds = number_of_leds\n\xa0\n        GPIO.setup(self.__clk_pin, GPIO.OUT)\n        GPIO.setup(self.__data_pin, GPIO.OUT)\n\xa0\n        for i in range(self.__number_of_leds):\n            self.setColorRGB(i, 0, 0, 0)\n\xa0\n    def clk(self):\n        GPIO.output(self.__clk_pin, GPIO.LOW)\n        time.sleep(0.00002)\n        GPIO.output(self.__clk_pin, GPIO.HIGH)\n        time.sleep(0.00002)\n\xa0\n    def sendByte(self, b):\n        "Send one bit at a time, starting with the MSB"\n        for i in range(8):\n            # If MSB is 1, write one and clock it, else write 0 and clock\n            if (b & 0x80) != 0:\n                GPIO.output(self.__data_pin, GPIO.HIGH)\n            else:\n                GPIO.output(self.__data_pin, GPIO.LOW)\n            self.clk()\n\xa0\n            # Advance to the next bit to send\n            b = b << 1\n\xa0\n    def sendColor(self, red, green, blue):\n        "Start by sending a byte with the format \'1 1 /B7 /B6 /G7 /G6 /R7 /R6\' "\n        #prefix = B11000000\n        prefix = 0xC0\n        if (blue & 0x80) == 0:     \n            #prefix |= B00100000\n            prefix |= 0x20\n        if (blue & 0x40) == 0:     \n            #prefix |= B00010000\n            prefix |= 0x10\n        if (green & 0x80) == 0:    \n            #prefix |= B00001000\n            prefix |= 0x08\n        if (green & 0x40) == 0:    \n            #prefix |= B00000100\n            prefix |= 0x04\n        if (red & 0x80) == 0:      \n            #prefix |= B00000010\n            prefix |= 0x02\n        if (red & 0x40) == 0:      \n            #prefix |= B00000001\n            prefix |= 0x01\n        self.sendByte(prefix)\n\xa0\n        # Now must send the 3 colors\n        self.sendByte(blue)\n        self.sendByte(green)\n        self.sendByte(red)\n\xa0\n    def setColorRGB(self, led, red, green, blue):\n        # Send data frame prefix (32x \'0\')\n        self.sendByte(0x00)\n        self.sendByte(0x00)\n        self.sendByte(0x00)\n        self.sendByte(0x00)\n\xa0\n        # Send color data for each one of the leds\n        for i in range(self.__number_of_leds):\n            \'\'\'\n            if i == led:\n                _led_state[i*3 + _CL_RED] = red;\n                _led_state[i*3 + _CL_GREEN] = green;\n                _led_state[i*3 + _CL_BLUE] = blue;\n            sendColor(_led_state[i*3 + _CL_RED],\n                      _led_state[i*3 + _CL_GREEN],\n                      _led_state[i*3 + _CL_BLUE]);\n            \'\'\'\n            self.sendColor(red, green, blue)\n\xa0\n        # Terminate data frame (32x "0")\n        self.sendByte(0x00)\n        self.sendByte(0x00)\n        self.sendByte(0x00)\n        self.sendByte(0x00)\n\xa0\n\xa0\n# Note: Use P9_22(UART2_RXD) and P9_21(UART2_TXD) as GPIO.\n# Connect the Grove - Chainable RGB LED to UART Grove port of Beaglebone Green.\nif __name__ == "__main__":\n    rgb_led = ChainableLED(CLK_PIN, DATA_PIN, NUMBER_OF_LEDS)\n\xa0\n    while True:\n        # The first parameter: NUMBER_OF_LEDS - 1; Other parameters: the RGB values.\n        rgb_led.setColorRGB(0, 255, 0, 0)\n        time.sleep(2)\n        rgb_led.setColorRGB(0, 0, 255, 0)\n        time.sleep(2)\n        rgb_led.setColorRGB(0, 0, 0, 255)\n        time.sleep(2)\n        rgb_led.setColorRGB(0, 0, 255, 255)\n        time.sleep(2)\n        rgb_led.setColorRGB(0, 255, 0, 255)\n        time.sleep(2)\n        rgb_led.setColorRGB(0, 255, 255, 0)\n        time.sleep(2)\n        rgb_led.setColorRGB(0, 255, 255, 255)\n        time.sleep(2)\n')),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa44\uff1a"),"\u901a\u8fc7\u70b9\u51fb\u78c1\u76d8\u56fe\u6807\u5e76\u7ed9\u6587\u4ef6\u4e00\u4e2a\u4ee5.py\u4e3a\u6269\u5c55\u540d\u7684\u540d\u79f0\u6765\u4fdd\u5b58\u6587\u4ef6\u3002"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa45\uff1a"),"\u5c06Grove Chainable RGB LED\u8fde\u63a5\u5230BBG\u4e0a\u7684Grove UART\u63d2\u5ea7\u3002"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u6b65\u9aa46\uff1a"),"\u8fd0\u884c\u4ee3\u7801\u3002 \u4f60\u4f1a\u53d1\u73b0RGB LED\u6bcf2\u79d2\u6539\u53d8\u4e00\u6b21\u989c\u8272\u3002"),(0,l.yg)("h1",{id:"\u94fe\u5f0frgb-led-eagle\u6587\u4ef6-v1"},"\u94fe\u5f0fRGB LED eagle\u6587\u4ef6 V1"),(0,l.yg)("div",{className:"altium-ecad-viewer","data-project-src":"https://files.seeedstudio.com/wiki/Grove-Chainable_RGB_LED/res/Chainable_RGB_LED_eagle_file%20V1%20(2).zip",style:{borderRadius:"0px 0px 4px 4px",height:500,borderStyle:"solid",borderWidth:1,borderColor:"rgb(241, 241, 241)",overflow:"hidden",maxWidth:1280,maxHeight:700,boxSizing:"border-box"}}),"# \u94fe\u5f0fRGB LED eagle\u6587\u4ef6 V2",(0,l.yg)("div",{className:"altium-ecad-viewer","data-project-src":"https://files.seeedstudio.com/wiki/Grove-Chainable_RGB_LED/res/Grove%20-%20Chainable%20RGB%20LED%20v2.0%20(1).zip",style:{borderRadius:"0px 0px 4px 4px",height:500,borderStyle:"solid",borderWidth:1,borderColor:"rgb(241, 241, 241)",overflow:"hidden",maxWidth:1280,maxHeight:700,boxSizing:"border-box"}}),(0,l.yg)("h1",{id:"\u8d44\u6e90"},"\u8d44\u6e90"),(0,l.yg)("hr",null),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("strong",{parentName:"li"},"[\u5e93]"),(0,l.yg)("a",{parentName:"li",href:"https://github.com/pjpmarques/ChainableLED"},"P9813\u7684\u94fe\u5f0fRGB LED \u5e93")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("strong",{parentName:"li"},"[\u5e93]"),(0,l.yg)("a",{parentName:"li",href:"https://github.com/Seeed-Studio/Grove_Chainable_RGB_LED"},"\u94fe\u5f0f RGB LED \u5e93\u7684\u65b0\u7248GitHub\u4ed3\u5e93")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("strong",{parentName:"li"},"[\u5e93]")," ",(0,l.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove-Chainable_RGB_LED/res/Chainable%20RGB%20LED.zip"},"CodeCraft \u4ee3\u7801")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("strong",{parentName:"li"},"[Eagle]"),(0,l.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove-Chainable_RGB_LED/res/Chainable_RGB_LED_eagle_file%20V1.zip"},"\u94fe\u5f0fRGB LED eagle \u6587\u4ef6 V1")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("strong",{parentName:"li"},"[Eagle]"),(0,l.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove-Chainable_RGB_LED/res/Grove%20-%20Chainable%20RGB%20LED%20v2.0.zip"},"\u94fe\u5f0fRGB LED eagle \u6587\u4ef6 V2")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("strong",{parentName:"li"},"[\u6570\u636e\u624b\u518c]"),(0,l.yg)("a",{parentName:"li",href:"https://files.seeedstudio.com/wiki/Grove-Chainable_RGB_LED/res/P9813_datasheet.pdf"},"P9813 \u6570\u636e\u7ed3\u6784"))),(0,l.yg)("h2",{id:"\u9879\u76ee"},"\u9879\u76ee"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Grove - \u94fe\u5f0fLED\u4ecb\u7ecd"),"\uff1a\u672c\u9879\u76ee\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u94fe\u5f0fLED\u8fde\u63a5\u5230Grove\u3002"),(0,l.yg)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/ingo-lohs/grove-introduction-to-chainable-led-d668b7/embed",width:"350"}),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"DIY\u4e00\u4e2a\u7528\u4e8e\u89e3\u91caRGB\u989c\u8272\u6a21\u578b\u7684\u8bbe\u5907")),(0,l.yg)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/kevin-lee2/diy-a-device-for-explaining-rgb-color-model-496cbc/embed",width:"350"}),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"\u4f7f\u7528Seeeduino Lotus\u8fdb\u884c\u5b89\u5168\u8bbf\u95ee")," \u5f53\u4f60\u6572\u95e8\u6216\u9760\u8fd1\u95e8\u65f6\uff0c\u95e8\u4f1a\u81ea\u52a8\u6253\u5f00\u3002"),(0,l.yg)("iframe",{frameborder:"0",height:"327.5",scrolling:"no",src:"https://www.hackster.io/limanchen/security-access-using-seeeduino-lotus-7eb90f/embed",width:"350"}),(0,l.yg)("h2",{id:"\u6280\u672f\u652f\u6301\u4e0e\u4ea7\u54c1\u8ba8\u8bba"},"\u6280\u672f\u652f\u6301\u4e0e\u4ea7\u54c1\u8ba8\u8bba"),(0,l.yg)("p",null,"\u611f\u8c22\u60a8\u9009\u62e9\u6211\u4eec\u7684\u4ea7\u54c1\uff01\u6211\u4eec\u5728\u6b64\u4e3a\u60a8\u63d0\u4f9b\u4e0d\u540c\u7684\u652f\u6301\uff0c\u4ee5\u786e\u4fdd\u60a8\u4f7f\u7528\u6211\u4eec\u7684\u4ea7\u54c1\u65f6\u5c3d\u53ef\u80fd\u987a\u5229\u3002\u6211\u4eec\u63d0\u4f9b\u591a\u79cd\u6c9f\u901a\u6e20\u9053\uff0c\u4ee5\u6ee1\u8db3\u4e0d\u540c\u7684\u504f\u597d\u548c\u9700\u6c42\u3002"),(0,l.yg)("div",{class:"button_tech_support_container"},(0,l.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,l.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,l.yg)("div",{class:"button_tech_support_container"},(0,l.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,l.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}u.isMDXComponent=!0}}]);