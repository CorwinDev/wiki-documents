"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[49781],{15680:(n,e,i)=>{i.d(e,{xA:()=>p,yg:()=>m});var t=i(96540);function r(n,e,i){return e in n?Object.defineProperty(n,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[e]=i,n}function a(n,e){var i=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.push.apply(i,t)}return i}function l(n){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?a(Object(i),!0).forEach((function(e){r(n,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(i,e))}))}return n}function o(n,e){if(null==n)return{};var i,t,r=function(n,e){if(null==n)return{};var i,t,r={},a=Object.keys(n);for(t=0;t<a.length;t++)i=a[t],e.indexOf(i)>=0||(r[i]=n[i]);return r}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(t=0;t<a.length;t++)i=a[t],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(n,i)&&(r[i]=n[i])}return r}var s=t.createContext({}),c=function(n){var e=t.useContext(s),i=e;return n&&(i="function"==typeof n?n(e):l(l({},e),n)),i},p=function(n){var e=c(n.components);return t.createElement(s.Provider,{value:e},n.children)},d="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},g=t.forwardRef((function(n,e){var i=n.components,r=n.mdxType,a=n.originalType,s=n.parentName,p=o(n,["components","mdxType","originalType","parentName"]),d=c(i),g=r,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||a;return i?t.createElement(m,l(l({ref:e},p),{},{components:i})):t.createElement(m,l({ref:e},p))}));function m(n,e){var i=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var a=i.length,l=new Array(a);l[0]=g;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=n,o[d]="string"==typeof n?n:r,l[1]=o;for(var c=2;c<a;c++)l[c]=i[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,i)}g.displayName="MDXCreateElement"},7188:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=i(9668),r=(i(96540),i(15680));const a={title:"Wi-Fi\u8fde\u63a5",nointro:null,keywords:["docs","docusaurus"],image:"https://wiki.seeedstudio.com/Wio-Terminal-Wi-Fi/",slug:"/cn/Wio-Terminal-Wi-Fi",last_update:{date:"3/11/2024",author:"\u91d1\u83ca"}},l="Wi-Fi\u8fde\u63a5",o={unversionedId:"zh-CN/Sensor/Wio_Terminal/Hardware_Overview/Wi-Fi/CN-Wio-Terminal-Wi-Fi",id:"zh-CN/Sensor/Wio_Terminal/Hardware_Overview/Wi-Fi/CN-Wio-Terminal-Wi-Fi",title:"Wi-Fi\u8fde\u63a5",description:"\u672c wiki \u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Realtek RTL8720\u6838\u5fc3\u5728Wio Terminal\u4e0a\u914d\u7f6eWi-Fi\u8fde\u63a5\u3002",source:"@site/docs/zh-CN/Sensor/Wio_Terminal/Hardware_Overview/Wi-Fi/CN-Wio-Terminal-Wi-Fi.md",sourceDirName:"zh-CN/Sensor/Wio_Terminal/Hardware_Overview/Wi-Fi",slug:"/cn/Wio-Terminal-Wi-Fi",permalink:"/cn/Wio-Terminal-Wi-Fi",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/Wio_Terminal/Hardware_Overview/Wi-Fi/CN-Wio-Terminal-Wi-Fi.md",tags:[],version:"current",lastUpdatedBy:"\u91d1\u83ca",lastUpdatedAt:1710115200,formattedLastUpdatedAt:"Mar 11, 2024",frontMatter:{title:"Wi-Fi\u8fde\u63a5",nointro:null,keywords:["docs","docusaurus"],image:"https://wiki.seeedstudio.com/Wio-Terminal-Wi-Fi/",slug:"/cn/Wio-Terminal-Wi-Fi",last_update:{date:"3/11/2024",author:"\u91d1\u83ca"}},sidebar:"CNSidebar",previous:{title:"Wio Terminal \u7f51\u7edc\u914d\u7f6e",permalink:"/cn/Wio-Terminal-Network-Overview"},next:{title:"\u9ad8\u7ea7 Wi-Fi \u4f7f\u7528\u65b9\u6cd5",permalink:"/cn/Wio-Terminal-Advanced-Wi-Fi"}},s={},c=[{value:"\u914d\u7f6e\u4e3a\u7ad9\u70b9\uff08STA\uff09\u6a21\u5f0f",id:"\u914d\u7f6e\u4e3a\u7ad9\u70b9sta\u6a21\u5f0f",level:2},{value:"\u626b\u63cfWi-Fi\u7f51\u7edc\u793a\u4f8b\u4ee3\u7801",id:"\u626b\u63cfwi-fi\u7f51\u7edc\u793a\u4f8b\u4ee3\u7801",level:3},{value:"\u8fde\u63a5\u5230\u6307\u5b9a\u7f51\u7edc\u793a\u4f8b\u4ee3\u7801",id:"\u8fde\u63a5\u5230\u6307\u5b9a\u7f51\u7edc\u793a\u4f8b\u4ee3\u7801",level:3},{value:"WiFi\u591a\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801",id:"wifi\u591a\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801",level:3},{value:"Wi-Fi\u5ba2\u6237\u7aef\u793a\u4f8b\u4ee3\u7801",id:"wi-fi\u5ba2\u6237\u7aef\u793a\u4f8b\u4ee3\u7801",level:3},{value:"Wi-Fi HTTPS\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801",id:"wi-fi-https\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801",level:3},{value:"\u83b7\u53d6\u7f51\u7ad9\u7684\u6839CA",id:"\u83b7\u53d6\u7f51\u7ad9\u7684\u6839ca",level:4},{value:"MQTT\u670d\u52a1\u5668\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801",id:"mqtt\u670d\u52a1\u5668\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801",level:3},{value:"MQTTs\u670d\u52a1\u5668\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801",id:"mqtts\u670d\u52a1\u5668\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801",level:3},{value:"UDP\u5ba2\u6237\u7aef\u793a\u4f8b\u4ee3\u7801",id:"udp\u5ba2\u6237\u7aef\u793a\u4f8b\u4ee3\u7801",level:3},{value:"Python UDP\u670d\u52a1\u5668\u4ee3\u7801",id:"python-udp\u670d\u52a1\u5668\u4ee3\u7801",level:4},{value:"Arduino\u4ee3\u7801",id:"arduino\u4ee3\u7801",level:4},{value:"Wi-Fi NTP\u793a\u4f8b\u4ee3\u7801",id:"wi-fi-ntp\u793a\u4f8b\u4ee3\u7801",level:3},{value:"\u5c06Wi-Fi\u914d\u7f6e\u4e3a\u8bbf\u95ee\u70b9\uff08AP\uff09\u6a21\u5f0f/ Web\u670d\u52a1\u5668",id:"\u5c06wi-fi\u914d\u7f6e\u4e3a\u8bbf\u95ee\u70b9ap\u6a21\u5f0f-web\u670d\u52a1\u5668",level:2},{value:"\u914d\u7f6e\u4e3aAP\u6a21\u5f0f\uff08\u7b80\u5355Web\u670d\u52a1\u5668\uff09\u793a\u4f8b\u4ee3\u7801",id:"\u914d\u7f6e\u4e3aap\u6a21\u5f0f\u7b80\u5355web\u670d\u52a1\u5668\u793a\u4f8b\u4ee3\u7801",level:3},{value:"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54",id:"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54",level:2},{value:"\u6280\u672f\u652f\u6301 &amp; \u4ea7\u54c1\u8ba8\u8bba",id:"\u6280\u672f\u652f\u6301--\u4ea7\u54c1\u8ba8\u8bba",level:2}],p={toc:c},d="wrapper";function u(n){let{components:e,...i}=n;return(0,r.yg)(d,(0,t.A)({},p,i,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"wi-fi\u8fde\u63a5"},"Wi-Fi\u8fde\u63a5"),(0,r.yg)("p",null,"\u672c wiki \u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Realtek RTL8720\u6838\u5fc3\u5728Wio Terminal\u4e0a\u914d\u7f6eWi-Fi\u8fde\u63a5\u3002"),(0,r.yg)("p",null,":::\u6ce8\n\u786e\u4fdd\u60a8\u5df2\u7ecf\u6309\u7167\u7f51\u7edc\u6982\u8ff0\u4e2d\u7684\u8bf4\u660e\u64cd\u4f5c\uff0c ",(0,r.yg)("strong",{parentName:"p"},"\u66f4\u65b0\u4e86RTL8720\u7684\u6700\u65b0\u56fa\u4ef6\u5e76\u4e0b\u8f7d\u4e86\u6240\u9700\u7684Arduino\u5e93\u3002"),"\n:::"),(0,r.yg)("div",{className:"tips",style:{display:"table",tableLayout:"fixed",backgroundColor:"#f5cfa9",height:"auto",width:"100%"}},(0,r.yg)("div",{className:"left-icon",style:{display:"table-cell",verticalAlign:"middle",backgroundColor:"#eda964",paddingTop:10,boxSizing:"border-box",height:"auto",width:38,textAlign:"center"}},(0,r.yg)("img",{style:{width:26,verticalAlign:"middle"},src:"https://s3-us-west-2.amazonaws.com/static.seeed.cc/seeed/icon/Danger.svg",alt:"attention icon"})),(0,r.yg)("div",{className:"right-desc",style:{display:"table-cell",verticalAlign:"middle",paddingLeft:15,boxSizing:"border-box",width:"calc(95% - 38px)"}},(0,r.yg)("p",{style:{color:"#000000",fontWeight:"bold",marginTop:10}},"Attention"),(0,r.yg)("p",{style:{color:"#000000",fontSize:14}},"The following examples have updated to work with ",(0,r.yg)("b",null,"eRPC Structure Framework Firmware"),", please update to eRPC structure. Simply replace the ",(0,r.yg)("code",null,(0,r.yg)("b",null,"AtWifi.h"))," with ",(0,r.yg)("code",null,(0,r.yg)("b",null,"rpcWiFi.h")),"."))),(0,r.yg)("h2",{id:"\u914d\u7f6e\u4e3a\u7ad9\u70b9sta\u6a21\u5f0f"},"\u914d\u7f6e\u4e3a\u7ad9\u70b9\uff08STA\uff09\u6a21\u5f0f"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5728Arduino\u4e2d\u5305\u542b ",(0,r.yg)("inlineCode",{parentName:"p"},"rpcWifi.h")," \u5e93\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u914d\u7f6e\u4e3aSTA\u6a21\u5f0f\uff1a"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"WiFi.mode(WIFI_STA);\n")),(0,r.yg)("h3",{id:"\u626b\u63cfwi-fi\u7f51\u7edc\u793a\u4f8b\u4ee3\u7801"},"\u626b\u63cfWi-Fi\u7f51\u7edc\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("p",null,"\u8be5\u793a\u4f8b\u5c06\u914d\u7f6eWio Terminal\u4e3aWi-Fi STA\u6a21\u5f0f\uff0c\u5e76\u626b\u63cf\u5e76\u6253\u5370\u51fa\u6240\u6709\u53ef\u7528\u7f51\u7edc\u5230\u4e32\u884c\u76d1\u89c6\u5668\u4e2d\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n\nvoid setup() {\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n    delay(1000);\n\n    // Set WiFi to station mode and disconnect from an AP if it was previously connected\n    WiFi.mode(WIFI_STA);\n    WiFi.disconnect();\n    delay(100);\n\n    Serial.println("Setup done");\n}\n\nvoid loop() {\n    Serial.println("scan start");\n\n    // WiFi.scanNetworks will return the number of networks found\n    int n = WiFi.scanNetworks();\n    Serial.println("scan done");\n    if (n == 0) {\n        Serial.println("no networks found");\n    } else {\n        Serial.print(n);\n        Serial.println(" networks found");\n        for (int i = 0; i < n; ++i) {\n            // Print SSID and RSSI for each network found\n            Serial.print(i + 1);\n            Serial.print(": ");\n            Serial.print(WiFi.SSID(i));\n            Serial.print(" (");\n            Serial.print(WiFi.RSSI(i));\n            Serial.print(")");\n            Serial.println((WiFi.encryptionType(i) == WIFI_AUTH_OPEN) ? " " : "*");\n            delay(10);\n        }\n    }\n    Serial.println("");\n\n    // Wait a bit before scanning again\n    delay(5000);\n}\n')),(0,r.yg)("h3",{id:"\u8fde\u63a5\u5230\u6307\u5b9a\u7f51\u7edc\u793a\u4f8b\u4ee3\u7801"},"\u8fde\u63a5\u5230\u6307\u5b9a\u7f51\u7edc\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("p",null,"\u8be5\u793a\u4f8b\u8fde\u63a5\u5230\u6307\u5b9a\u7684Wi-Fi\u7f51\u7edc\u3002\u5c06 ",(0,r.yg)("inlineCode",{parentName:"p"},"ssid")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"password")," \u66f4\u6539\u4e3a\u60a8\u7684Wi-Fi\u7f51\u7edc\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n\nconst char* ssid = "yourNetworkName";\nconst char* password =  "yourNetworkPassword";\n\nvoid setup() {\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n\n    // Set WiFi to station mode and disconnect from an AP if it was previously connected\n    WiFi.mode(WIFI_STA);\n    WiFi.disconnect();\n\n    Serial.println("Connecting to WiFi..");\n    WiFi.begin(ssid, password);\n\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n        Serial.println("Connecting to WiFi..");\n        WiFi.begin(ssid, password);\n    }\n    Serial.println("Connected to the WiFi network");\n    Serial.print("IP Address: ");\n    Serial.println (WiFi.localIP()); // prints out the device\'s IP address\n    }\n\nvoid loop() {\n\n}\n')),(0,r.yg)("h3",{id:"wifi\u591a\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801"},"WiFi\u591a\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u5728Arduino\u4e2d\u5305\u542b ",(0,r.yg)("inlineCode",{parentName:"li"},"rpcWiFi.h")," \u548c  ",(0,r.yg)("inlineCode",{parentName:"li"},"WiFiMulti.h")," \u5e93\u3002")),(0,r.yg)("p",null,"\u6b64\u793a\u4f8b\u8c03\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"WiFiMulti")," \u7c7b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'wifiMulti.addAP("ssid", "password");\n')),(0,r.yg)("p",null,"\u5c06\u591a\u4e2aAP Wi-Fi\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\uff0c ",(0,r.yg)("inlineCode",{parentName:"p"},"wifiMulti.run()")," \u5c06\u5c1d\u8bd5\u8fde\u63a5\u5230\u4fe1\u53f7\u6700\u597d\u7684Wi-Fi\u3002"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"\u6ce8:")," \u6839\u636e\u60a8\u7684Wi-Fi\u66f4\u6539 ",(0,r.yg)("inlineCode",{parentName:"p"},"SSID")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"Password")," \u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n#include <WiFiMulti.h>\n\nWiFiMulti wifiMulti;\n\nvoid setup() {\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n    delay(1000);\n\n    wifiMulti.addAP("ssid_from_AP_1", "your_password_for_AP_1");\n    wifiMulti.addAP("ssid_from_AP_2", "your_password_for_AP_2");\n    wifiMulti.addAP("ssid_from_AP_3", "your_password_for_AP_3");\n\n    Serial.println("Connecting Wifi...");\n    if (wifiMulti.run() == WL_CONNECTED) {\n        Serial.println("");\n        Serial.println("WiFi connected");\n        Serial.println("IP address: ");\n        Serial.println(WiFi.localIP());\n    }\n}\n\nvoid loop() {\n    if (wifiMulti.run() != WL_CONNECTED) {\n        Serial.println("WiFi not connected!");\n        delay(1000);\n    }\n}\n')),(0,r.yg)("h3",{id:"wi-fi\u5ba2\u6237\u7aef\u793a\u4f8b\u4ee3\u7801"},"Wi-Fi\u5ba2\u6237\u7aef\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("p",null,"\u8be5\u793a\u4f8b\u6f14\u793a\u4e86Wio Terminal\u914d\u7f6e\u4e3aSTA\u6a21\u5f0f\uff0c\u8fde\u63a5\u5230\u7279\u5b9aAP Wi-Fi\uff0c\u5e76\u4ece\u540c\u4e00\u7f51\u7edc\u4e0a\u7684Web\u670d\u52a1\u5668\u53d1\u9001HTTP GET\u8bf7\u6c42\u5e76\u63a5\u6536HTTP\u54cd\u5e94\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5c06 ",(0,r.yg)("inlineCode",{parentName:"p"},"ssid")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"password")," \u66f4\u6539\u4e3a\u60a8\u7684Wi-Fi\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5c06 ",(0,r.yg)("inlineCode",{parentName:"p"},"host")," \u66f4\u6539\u4e3aWeb\u670d\u52a1\u5668\u7684IP\u5730\u5740\u3002"))),(0,r.yg)("p",null,"\u8981\u7b80\u5355\u6d4b\u8bd5\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u5728PC\u4e0a\u4f7f\u7528Python\u542f\u52a8\u4e00\u4e2a\u7b80\u5355\u7684Web\u670d\u52a1\u5668\uff1a"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"\u5c06\u4ee5\u4e0b\u5185\u5bb9\u590d\u5236\u5e76\u4fdd\u5b58\u5728\u672c\u5730\u9a71\u52a8\u5668\u4e0a\uff0c\u547d\u540d\u4e3a ",(0,r.yg)("inlineCode",{parentName:"li"},"index.html")," \u3002")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-html"},"<html>\n<body>\nHello World!\n</body>\n</html>\n")),(0,r.yg)("ol",{start:2},(0,r.yg)("li",{parentName:"ol"},"\u5728Powershell/Terminal\u4e2d\uff0c\u5c06\u76ee\u5f55\u66f4\u6539\u4e3a\u521a\u521a\u4fdd\u5b58 ",(0,r.yg)("inlineCode",{parentName:"li"},"index.html")," \u7684\u8def\u5f84\uff0c\u5e76\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u4ee5\u4f7f\u7528Python\u542f\u52a8\u4e00\u4e2a\u7b80\u5355\u7684Web\u670d\u52a1\u5668\uff1a")),(0,r.yg)("p",null,"For Pyhton 3:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},"python3 -m http.server 80\n")),(0,r.yg)("p",null,"For Python 2:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},"python -m SimpleHTTPServer 80\n")),(0,r.yg)("ol",{start:3},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"\u5728Arduino\u4ee3\u7801\u4e2d\u5c06 ",(0,r.yg)("inlineCode",{parentName:"p"},"host")," \u66f4\u6539\u4e3a\u6b64PC\u7684IP\u5730\u5740\u3002\u8fd8\u8981\u5c06Arduino\u4ee3\u7801\u4e2d\u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"ssid")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"password")," \u66f4\u6539\u4e3a\u4e0e\u6b64PC\u8fde\u63a5\u7684\u76f8\u540cWi-Fi\u3002")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230Wio Terminal\uff0c\u6253\u5f00\u4e32\u884c\u76d1\u89c6\u5668\u4ee5\u89c2\u5bdf\u7ed3\u679c\u3002"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <rpcWiFi.h>\n\nconst char* ssid = "yourNetworkName";\nconst char* password =  "yourNetworkPassword";\n\nvoid setup() {\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n    delay(1000);\n\n    // Set WiFi to station mode and disconnect from an AP if it was previously connected\n    WiFi.mode(WIFI_STA);\n    WiFi.disconnect();\n    delay(2000);\n\n    WiFi.begin(ssid, password);\n\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n        Serial.println("Connecting to WiFi..");\n    }\n    Serial.println("Connected to the WiFi network");\n    Serial.print("IP Address: ");\n    Serial.println (WiFi.localIP()); // prints out the device\'s IP address\n}\n\n\nvoid loop() {\n    const uint16_t port = 80; // Default port\n    const char* host = "192.168.0.10";  // Target Server IP Address\n\n    Serial.print("Connecting to ");\n    Serial.println(host);\n\n    // Use WiFiClient class to create TCP connections\n    WiFiClient client;\n\n    if (!client.connect(host, port)) {\n        Serial.println("Connection failed.");\n        Serial.println("Waiting 5 seconds before retrying...");\n        delay(5000);\n        return;\n    }\n\n    // This will send a request to the server\n    //uncomment this line to send an arbitrary string to the server\n    //client.print("Send this data to the server");\n    //uncomment this line to send a basic document request to the server\n    client.print("GET /index.html HTTP/1.1\\n\\n"); // sending HTTP GET request\n\n    int maxloops = 0;\n\n    //wait for the server\'s reply to become available\n    while (!client.available() && maxloops < 1000) {\n        maxloops++;\n        delay(1); //delay 1 msec\n    }\n    if (client.available() > 0) {\n        //read back one line from the server\n        String line = client.readString(); // Read from the server response\n        // Proceed various line-endings\n        line.replace("\\r\\n", "\\n");\n        line.replace(\'\\r\', \'\\n\');\n        line.replace("\\n", "\\r\\n");\n        Serial.println(line);\n    } else {\n        Serial.println("client.available() timed out ");\n    }\n\n    Serial.println("Closing connection.");\n    client.stop();\n\n    Serial.println("Waiting 5 seconds before restarting...");\n    delay(5000);\n}\n')),(0,r.yg)("h3",{id:"wi-fi-https\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801"},"Wi-Fi HTTPS\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("p",null,"\u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u4f7f\u7528Wio Terminal\u5efa\u7acbHttps\u8fde\u63a5\u3002\u901a\u8fc7\u4f7f\u7528\u6b64\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u8fde\u63a5\u5230\u51e0\u4e4e\u6240\u6709\u7f51\u7ad9\u5e76\u83b7\u53d6\u6240\u9700\u7684\u6570\u636e\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u5c06 ",(0,r.yg)("inlineCode",{parentName:"li"},"ssid")," \u548c ",(0,r.yg)("inlineCode",{parentName:"li"},"password")," \u66f4\u6539\u4e3a\u60a8\u7684Wi-Fi\u3002")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <rpcWiFi.h>\n#include <WiFiClientSecure.h>\n\nconst char* ssid     = "yourNetworkName";     // your network SSID\nconst char* password = "yourNetworkPassword"; // your network password\n\nconst char*  server = "www.example.com";  // Server URL\nconst char* test_root_ca = \\\n                            "-----BEGIN CERTIFICATE-----\\n"\n                            "MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh\\n"\n                            "MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\\n"\n                            "d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD\\n"\n                            "QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT\\n"\n                            "MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j\\n"\n                            "b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG\\n"\n                            "9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB\\n"\n                            "CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97\\n"\n                            "nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt\\n"\n                            "43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P\\n"\n                            "T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4\\n"\n                            "gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO\\n"\n                            "BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR\\n"\n                            "TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw\\n"\n                            "DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr\\n"\n                            "hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg\\n"\n                            "06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF\\n"\n                            "PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls\\n"\n                            "YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk\\n"\n                            "CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=\\n"\n                            "-----END CERTIFICATE-----\\n";\n\n// You can use x.509 client certificates if you want\n//const char* test_client_key = "";   //to verify the client\n//const char* test_client_cert = "";  //to verify the client\n\nWiFiClientSecure client;\n\nvoid setup() {\n    //Initialize serial and wait for port to open:\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n    delay(1000);\n\n    Serial.print("Attempting to connect to SSID: ");\n    Serial.println(ssid);\n    WiFi.begin(ssid, password);\n\n    // attempt to connect to Wifi network:\n    while (WiFi.status() != WL_CONNECTED) {\n        Serial.print(".");\n        // wait 1 second for re-trying\n        delay(1000);\n    }\n    Serial.print("Connected to ");\n    Serial.println(ssid);\n\n    client.setCACert(test_root_ca);\n    //client.setCertificate(test_client_key); // for client verification\n    //client.setPrivateKey(test_client_cert); // for client verification\n\n    Serial.println("\\nStarting connection to server...");\n    if (!client.connect(server, 443)) {\n        Serial.println("Connection failed!");\n    } else {\n        Serial.println("Connected to server!");\n        // Make a HTTP request:\n        client.println("GET https://www.example.com HTTP/1.0");\n        client.println("Host: www.example.com");\n        client.println("Connection: close");\n        client.println();\n\n        while (client.connected()) {\n            String line = client.readStringUntil(\'\\n\');\n            if (line == "\\r") {\n                Serial.println("headers received");\n                break;\n            }\n        }\n        // if there are incoming bytes available\n        // from the server, read them and print them:\n        while (client.available()) {\n            char c = client.read();\n            if (c == \'\\n\') {\n                Serial.write(\'\\r\');\n            }\n            Serial.write(c);\n        }\n        client.stop();\n    }\n}\n\nvoid loop() {\n    // do nothing\n}\n')),(0,r.yg)("h4",{id:"\u83b7\u53d6\u7f51\u7ad9\u7684\u6839ca"},"\u83b7\u53d6\u7f51\u7ad9\u7684\u6839CA"),(0,r.yg)("p",null,"\u8981\u83b7\u53d6\u7f51\u7ad9\u7684\u6839CA\uff0c\u60a8\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff08Linux Bash Shell\uff09\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"openssl s_client -showcerts -verify 5 -connect www.example.com:443 < /dev/null\n")),(0,r.yg)("p",null,"\u5c06 ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"www.example.com"))," \u66ff\u6362\u4e3a\u6240\u9700\u7f51\u7ad9\u7684\u6839URL\u3002"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"For Windows"),", \u60a8\u53ef\u4ee5\u4f7f\u7528 ",(0,r.yg)("strong",{parentName:"p"},"Windows \u5b50\u7cfb\u7edf\u7528\u4e8eLinux\uff08WSL\uff09")," \u8fd0\u884c\u76f8\u540c\u7684Linux\u547d\u4ee4\u3002"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"\u6ce8:")," \u786e\u4fdd\u60a8\u5df2\u5b89\u88c5\u4f9d\u8d56\u9879\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"sudo apt update\nsudo apt install openssl\n")),(0,r.yg)("h3",{id:"mqtt\u670d\u52a1\u5668\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801"},"MQTT\u670d\u52a1\u5668\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("p",null,"\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528Wio Terminal\u8fde\u63a5\u5230MQTT\u670d\u52a1\u5668\u3002\u901a\u8fc7\u8fd9\u4e2a\u793a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528Wio Terminal\u8ba2\u9605\u548c\u53d1\u5e03\u6d88\u606f\u5230MQTT\u670d\u52a1\u5668\u3002\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u514d\u8d39\u7684MQTT\u670d\u52a1\u5668\uff1a ",(0,r.yg)("a",{parentName:"p",href:"https://test.mosquitto.org/"},"https://test.mosquitto.org/"),"."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u5728\u8fd9\u91cc\u4e0b\u8f7d\u5e76\u5b89\u88c5 ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/knolleary/pubsubclient"},(0,r.yg)("strong",{parentName:"a"},"Arduino MQTT Library"))," here.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n#include <PubSubClient.h>\n\n// Update these with values suitable for your network.\nconst char *ssid = "yourNetworkName";      // your network SSID\nconst char *password = "yourNetworkPassword"; // your network password\n\nconst char *ID = "Wio-Terminal-Client";  // Name of our device, must be unique\nconst char *TOPIC = "WioTerminal";  // Topic to subcribe to\nconst char *subTopic = "inTopic";  // Topic to subcribe to\nconst char *server = "test.mosquitto.org"; // Server URL\n\n\nWiFiClient wifiClient;\nPubSubClient client(wifiClient);\n\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  Serial.print("Message arrived [");\n  Serial.print(topic);\n  Serial.print("] ");\n  for (int i=0;i<length;i++) {\n    Serial.print((char)payload[i]);\n  }\n  Serial.println();\n}\n\nvoid reconnect() {\n  // Loop until we\'re reconnected\n  while (!client.connected())\n  {\n    Serial.print("Attempting MQTT connection...");\n    // Attempt to connect\n    if (client.connect(ID)) {\n      Serial.println("connected");\n      // Once connected, publish an announcement...\n      client.publish(TOPIC, "{\\"message\\": \\"Wio Terminal is connected!\\"}");\n      Serial.println("Published connection message successfully!");\n      // ... and resubscribe\n      client.subscribe(subTopic);\n      Serial.print("Subcribed to: ");\n      Serial.println(subTopic);\n    }\n    else {\n      Serial.print("failed, rc=");\n      Serial.print(client.state());\n      Serial.println(" try again in 5 seconds");\n      // Wait 5 seconds before retrying\n      delay(5000);\n    }\n  }\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  while (!Serial)\n    ; // Wait for Serial to be ready\n  Serial.print("Attempting to connect to SSID: ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n\n  // attempt to connect to Wifi network:\n  while (WiFi.status() != WL_CONNECTED)\n  {\n    Serial.print(".");\n    WiFi.begin(ssid, password);\n    // wait 1 second for re-trying\n    delay(1000);\n  }\n  \n  Serial.print("Connected to ");\n  Serial.println(ssid);\n  delay(500);\n\n  client.setServer(server, 1883);\n  client.setCallback(callback);\n}\n\nvoid loop()\n{\n  if (!client.connected()) {\n    reconnect();\n  }\n  client.loop();\n}\n')),(0,r.yg)("h3",{id:"mqtts\u670d\u52a1\u5668\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801"},"MQTTs\u670d\u52a1\u5668\u8fde\u63a5\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("div",{align:"center"},(0,r.yg)("video",{width:560,height:315,controls:!0},(0,r.yg)("source",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/mqtts.mp4",type:"video/mp4"}))),(0,r.yg)("p",null,"\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528Wio Terminal\u5efa\u7acbMQTTs\u8fde\u63a5\u3002\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u514d\u8d39\u7684MQTTs\u670d\u52a1\u5668\uff1a ",(0,r.yg)("a",{parentName:"p",href:"https://test.mosquitto.org/"},"https://test.mosquitto.org/")," \u5e76\u5c06\u52a0\u901f\u5ea6\u8ba1\u6570\u636e\u53d1\u9001\u5230\u4e00\u4e2a\u4e3b\u9898\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5728\u8fd9\u91cc\u4e0b\u8f7d\u5e76\u5b89\u88c5 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/knolleary/pubsubclient"},(0,r.yg)("strong",{parentName:"a"},"Arduino MQTT \u5e93"))," \u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u6839\u636e ",(0,r.yg)("a",{parentName:"p",href:"https://wiki.seeedstudio.com/Wio-Terminal-IMU-Overview/"},(0,r.yg)("strong",{parentName:"a"},"\u6b64 wiki"))," \u5b89\u88c5Wio Terminal\u7684\u52a0\u901f\u5ea6\u8ba1\u5e93\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Wio Terminal\u5c06\u4f1a\u53d1\u5e03\u52a0\u901f\u5ea6\u8ba1\u6570\u636e\u5230 ",(0,r.yg)("inlineCode",{parentName:"p"},"WioTerminal/IMU")," \u4e3b\u9898\uff0c\u5e76\u8ba2\u9605\u6765\u81ea ",(0,r.yg)("inlineCode",{parentName:"p"},"inTopic")," \u4e3b\u9898\u7684\u6d88\u606f\u3002"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n#include <PubSubClient.h>\n#include <WiFiClientSecure.h>\n#include"LIS3DHTR.h"\n\nconst char *ssid = "yourNetworkName";      // your network SSID\nconst char *password = "yourNetworkPassword"; // your network password\n\nconst char *ID = "Wio-Terminal-Client";  // Name of our device, must be unique\nconst char *TOPIC = "WioTerminal/IMU";  // Topic to subcribe to\nconst char *subTopic = "inTopic";  // Topic to subcribe to\n\nconst char *server = "test.mosquitto.org"; // Server URL\nconst char *test_root_ca =\n"-----BEGIN CERTIFICATE-----\\n"\n"MIIEAzCCAuugAwIBAgIUBY1hlCGvdj4NhBXkZ/uLUZNILAwwDQYJKoZIhvcNAQEL\\n"\n"BQAwgZAxCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5Vbml0ZWQgS2luZ2RvbTEOMAwG\\n"\n"A1UEBwwFRGVyYnkxEjAQBgNVBAoMCU1vc3F1aXR0bzELMAkGA1UECwwCQ0ExFjAU\\n"\n"BgNVBAMMDW1vc3F1aXR0by5vcmcxHzAdBgkqhkiG9w0BCQEWEHJvZ2VyQGF0Y2hv\\n"\n"by5vcmcwHhcNMjAwNjA5MTEwNjM5WhcNMzAwNjA3MTEwNjM5WjCBkDELMAkGA1UE\\n"\n"BhMCR0IxFzAVBgNVBAgMDlVuaXRlZCBLaW5nZG9tMQ4wDAYDVQQHDAVEZXJieTES\\n"\n"MBAGA1UECgwJTW9zcXVpdHRvMQswCQYDVQQLDAJDQTEWMBQGA1UEAwwNbW9zcXVp\\n"\n"dHRvLm9yZzEfMB0GCSqGSIb3DQEJARYQcm9nZXJAYXRjaG9vLm9yZzCCASIwDQYJ\\n"\n"KoZIhvcNAQEBBQADggEPADCCAQoCggEBAME0HKmIzfTOwkKLT3THHe+ObdizamPg\\n"\n"UZmD64Tf3zJdNeYGYn4CEXbyP6fy3tWc8S2boW6dzrH8SdFf9uo320GJA9B7U1FW\\n"\n"Te3xda/Lm3JFfaHjkWw7jBwcauQZjpGINHapHRlpiCZsquAthOgxW9SgDgYlGzEA\\n"\n"s06pkEFiMw+qDfLo/sxFKB6vQlFekMeCymjLCbNwPJyqyhFmPWwio/PDMruBTzPH\\n"\n"3cioBnrJWKXc3OjXdLGFJOfj7pP0j/dr2LH72eSvv3PQQFl90CZPFhrCUcRHSSxo\\n"\n"E6yjGOdnz7f6PveLIB574kQORwt8ePn0yidrTC1ictikED3nHYhMUOUCAwEAAaNT\\n"\n"MFEwHQYDVR0OBBYEFPVV6xBUFPiGKDyo5V3+Hbh4N9YSMB8GA1UdIwQYMBaAFPVV\\n"\n"6xBUFPiGKDyo5V3+Hbh4N9YSMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL\\n"\n"BQADggEBAGa9kS21N70ThM6/Hj9D7mbVxKLBjVWe2TPsGfbl3rEDfZ+OKRZ2j6AC\\n"\n"6r7jb4TZO3dzF2p6dgbrlU71Y/4K0TdzIjRj3cQ3KSm41JvUQ0hZ/c04iGDg/xWf\\n"\n"+pp58nfPAYwuerruPNWmlStWAXf0UTqRtg4hQDWBuUFDJTuWuuBvEXudz74eh/wK\\n"\n"sMwfu1HFvjy5Z0iMDU8PUDepjVolOCue9ashlS4EB5IECdSR2TItnAIiIwimx839\\n"\n"LdUdRudafMu5T5Xma182OC0/u/xRlEm+tvKGGmfFcN0piqVl8OrSPBgIlb+1IKJE\\n"\n"m/XriWr/Cq4h/JfB7NTsezVslgkBaoU=\\n"\n"-----END CERTIFICATE-----\\n";\n\nlong lastMsg = 0;\n\nLIS3DHTR<TwoWire> lis;\nWiFiClientSecure wifiClient;\nPubSubClient client(wifiClient);\n\nvoid callback(char *topic, byte *payload, unsigned int length)\n{\n  Serial.print("Message arrived [");\n  Serial.print(topic);\n  Serial.print("] ");\n  for (int i = 0; i < length; i++)\n  {\n    Serial.print((char)payload[i]);\n  }\n  Serial.println();\n}\n\nvoid reconnect()\n{\n  // Loop until we\'re reconnected\n  while (!client.connected())\n  {\n    Serial.print("Attempting MQTT connection...");\n    // Attempt to connect\n    if (client.connect(ID))\n    {\n      Serial.println("connected");\n      // Once connected, publish an announcement...\n      client.publish(TOPIC, "{\\"message\\": \\"Wio Terminal is connected!\\"}");\n      Serial.println("Published connection message successfully!");\n      // ... and resubscribe\n      client.subscribe(subTopic);\n      Serial.print("Subcribed to: ");\n      Serial.println(subTopic);\n    }\n    else\n    {\n      Serial.print("failed, rc=");\n      Serial.print(client.state());\n      Serial.println(" try again in 5 seconds");\n      // Wait 5 seconds before retrying\n      delay(5000);\n    }\n  }\n}\n\nvoid setup()\n{\n  //Initialize serial and wait for port to open:\n  Serial.begin(115200);\n  while (!Serial)\n    ; // Wait for Serial to be ready\n  delay(1000);\n\n  lis.begin(Wire1);\n \n  if (!lis) {\n    Serial.println("ERROR");\n    while(1);\n  }\n  lis.setOutputDataRate(LIS3DHTR_DATARATE_25HZ); //Data output rate\n  lis.setFullScaleRange(LIS3DHTR_RANGE_2G); //Scale range set to 2g\n\n  Serial.print("Attempting to connect to SSID: ");\n  Serial.println(ssid);\n  WiFi.begin(ssid, password);\n\n  // attempt to connect to Wifi network:\n  while (WiFi.status() != WL_CONNECTED)\n  {\n    Serial.print(".");\n    WiFi.begin(ssid, password);\n    // wait 1 second for re-trying\n    delay(1000);\n  }\n  Serial.print("Connected to ");\n  Serial.println(ssid);\n\n  wifiClient.setCACert(test_root_ca);\n\n  client.setServer(server, 8883);\n  client.setCallback(callback);\n}\n\n\nvoid loop()\n{\n  if (!client.connected())\n  {\n    reconnect();\n  }\n  \n  float x_values, y_values, z_values;\n  \n  // Sending Data\n  long now = millis();\n  if (now - lastMsg > 5000) {\n    lastMsg = now;\n \n  x_values = lis.getAccelerationX();\n  y_values = lis.getAccelerationY();\n  z_values = lis.getAccelerationZ();\n  String data="{\\"x-axis\\": "+String(x_values)+","+"\\"y-axis\\": "+String(y_values)+","+"\\"z-axis\\": "+String(z_values)+"}";\n\n  if (!client.publish(TOPIC, data.c_str())) {\n    Serial.println("Message failed to send.");\n  }\n  Serial.printf("Message Send [%s] ", TOPIC);\n  Serial.println(data);\n  }\n  \n  client.loop();\n}\n')),(0,r.yg)("h3",{id:"udp\u5ba2\u6237\u7aef\u793a\u4f8b\u4ee3\u7801"},"UDP\u5ba2\u6237\u7aef\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/udp-example.png"})),(0,r.yg)("p",null,"\u6b64\u793a\u4f8b\u8fde\u63a5\u5230Wi-Fi\u5e76\u5411\u5728\u60a8\u7684PC\u4e0a\u8fd0\u884c\u7684UDP\u670d\u52a1\u5668\u53d1\u9001UDP\u6570\u636e\u5305\u3002"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"\u6ce8:")," \u786e\u4fdd\u60a8\u7684PC\u548cWio\u7ec8\u7aef\u5904\u4e8e\u540c\u4e00\u4e2a\u7f51\u7edc\u4e2d\uff01"),(0,r.yg)("h4",{id:"python-udp\u670d\u52a1\u5668\u4ee3\u7801"},"Python UDP\u670d\u52a1\u5668\u4ee3\u7801"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4fdd\u5b58\u4e3a ",(0,r.yg)("inlineCode",{parentName:"p"},"udp_server.py")," \u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u8fd0\u884cPython\u811a\u672c\uff1a ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"python udp_server.py"))," \u3002"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},"# This python script listens on UDP port 3333 \n# for messages from the Wio Terminal board and prints them\nimport socket\nimport sys\n\ntry :\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nexcept socket.error, msg :\n    print 'Failed to create socket. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]\n    sys.exit()\n\ntry:\n    s.bind(('', 3333))\nexcept socket.error , msg:\n    print 'Bind failed. Error: ' + str(msg[0]) + ': ' + msg[1]\n    sys.exit()\n     \nprint 'Server listening'\n\nwhile 1:\n    d = s.recvfrom(1024)\n    data = d[0]\n     \n    if not data: \n        break\n    \n    print data.strip()\n    \ns.close()\n")),(0,r.yg)("h4",{id:"arduino\u4ee3\u7801"},"Arduino\u4ee3\u7801"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5c06 ",(0,r.yg)("inlineCode",{parentName:"p"},"networkName")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"networkPswd")," \u66f4\u6539\u4e3a\u60a8\u7684Wi-Fi\u8bbe\u7f6e\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5c06 ",(0,r.yg)("inlineCode",{parentName:"p"},"udpAddress")," \u66f4\u6539\u4e3a\u60a8\u7684PC\u7684IP\u5730\u5740\uff0c\u5e76\u786e\u4fdd\u8fd0\u884cUDP\u670d\u52a1\u5668\u7684PC\u4e0eWio\u7ec8\u7aef\u5904\u4e8e\u540c\u4e00\u7f51\u7edc\u4e2d\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5c06\u4ee3\u7801\u4e0a\u4f20\u5230Wio\u7ec8\u7aef\u3002"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <rpcWiFi.h>\n#include <WiFiUdp.h>\n\n// WiFi network name and password:\nconst char * networkName = "your-ssid";\nconst char * networkPswd = "your-password";\n\n//IP address to send UDP data to:\n// either use the ip address of the server or \n// a network broadcast address\nconst char * udpAddress = "192.168.0.255";\nconst int udpPort = 3333;\n\n//Are we currently connected?\nboolean connected = false;\n\n//The udp library class\nWiFiUDP udp;\n\nvoid setup(){\n  // Initilize hardware serial:\n  Serial.begin(115200);\n  \n  //Connect to the WiFi network\n  connectToWiFi(networkName, networkPswd);\n}\n\nvoid loop(){\n  //only send data when connected\n  if(connected){\n    //Send a packet\n    udp.beginPacket(udpAddress,udpPort);\n    udp.printf("Seconds since boot: %lu", millis()/1000);\n    udp.endPacket();\n  }\n  //Wait for 1 second\n  delay(1000);\n}\n\nvoid connectToWiFi(const char * ssid, const char * pwd){\n  Serial.println("Connecting to WiFi network: " + String(ssid));\n\n  // delete old config\n  WiFi.disconnect(true);\n  //register event handler\n  WiFi.onEvent(WiFiEvent);\n  \n  //Initiate connection\n  WiFi.begin(ssid, pwd);\n\n  Serial.println("Waiting for WIFI connection...");\n}\n\n//wifi event handler\nvoid WiFiEvent(WiFiEvent_t event){\n    switch(event) {\n      case SYSTEM_EVENT_STA_GOT_IP:\n          //When connected set \n          Serial.print("WiFi connected! IP address: ");\n          Serial.println(WiFi.localIP());  \n          //initializes the UDP state\n          //This initializes the transfer buffer\n          udp.begin(WiFi.localIP(),udpPort);\n          connected = true;\n          break;\n      case SYSTEM_EVENT_STA_DISCONNECTED:\n          Serial.println("WiFi lost connection");\n          connected = false;\n          break;\n      default: break;\n    }\n}\n\n')),(0,r.yg)("h3",{id:"wi-fi-ntp\u793a\u4f8b\u4ee3\u7801"},"Wi-Fi NTP\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/wifi-udp-rpc.png"})),(0,r.yg)("p",null,"\u6b64\u793a\u4f8b\u4f7f\u7528UDP\u83b7\u53d6NTP\u65f6\u95f4\uff0c\u5e76\u4f7f\u7528SAMD51\u6838\u5fc3\u4e0a\u7684\u5185\u7f6eRTC\u6765\u66f4\u65b0\u65f6\u95f4\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5b89\u88c5 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_RTC"},(0,r.yg)("strong",{parentName:"a"},"Seeed_Arduino_RTC"))," \u5e93\u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5b89\u88c5 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/ansonhe97/millisDelay"},(0,r.yg)("strong",{parentName:"a"},"millisDelay"))," \u5e93\u3002"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <rpcWiFi.h>\n#include <millisDelay.h>\n#include "RTC_SAMD51.h"\n\nconst char ssid[] = "yourNetworkName"; // add your required ssid\nconst char password[] = "yourNetworkPassword"; // add your own netywork password\n\nmillisDelay updateDelay; // the update delay object. used for ntp periodic update.\n\nunsigned int localPort = 2390;      // local port to listen for UDP packets\nchar timeServer[] = "time.nist.gov"; // extenral NTP server e.g. time.nist.gov\n\nconst int NTP_PACKET_SIZE = 48; // NTP time stamp is in the first 48 bytes of the message\nbyte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming and outgoing packets\n\n// declare a time object\nDateTime now;\n\n// define WiFI client\nWiFiClient client;\n\n//The udp library class\nWiFiUDP udp;\n\n// localtime\nunsigned long devicetime;\n\nRTC_SAMD51 rtc;\n\n// for use by the Adafuit RTClib library\nchar daysOfTheWeek[7][12] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };\n\nvoid setup() {\n\n    Serial.begin(115200);\n\n    while (!Serial); // wait for serial port to connect. Needed for native USB\n\n    // setup network before rtc check \n    connectToWiFi(ssid, password);\n\n    // get the time via NTP (udp) call to time server\n    // getNTPtime returns epoch UTC time adjusted for timezone but not daylight savings\n    // time\n    devicetime = getNTPtime();\n\n    // check if rtc present\n    if (devicetime == 0) {\n        Serial.println("Failed to get time from network time server.");\n    }\n\n    if (!rtc.begin()) {\n        Serial.println("Couldn\'t find RTC");\n        while (1) delay(10); // stop operating\n    }\n\n    // get and print the current rtc time\n    now = rtc.now();\n    Serial.print("RTC time is: ");\n    Serial.println(now.timestamp(DateTime::TIMESTAMP_FULL));\n\n    // adjust time using ntp time\n    rtc.adjust(DateTime(devicetime));\n\n    // print boot update details\n    Serial.println("RTC (boot) time updated.");\n    // get and print the adjusted rtc time\n    now = rtc.now();\n    Serial.print("Adjusted RTC (boot) time is: ");\n    Serial.println(now.timestamp(DateTime::TIMESTAMP_FULL));\n\n    // start millisdelays timers as required, adjust to suit requirements\n    updateDelay.start(1 * 60 * 60 * 1000); // update time via ntp every hr\n\n}\n\nvoid loop() {\n\n    if (updateDelay.justFinished()) { // 12 hour loop\n        // repeat timer\n        updateDelay.repeat(); // repeat\n\n        // update rtc time\n        devicetime = getNTPtime();\n        if (devicetime == 0) {\n            Serial.println("Failed to get time from network time server.");\n        }\n        else {\n            rtc.adjust(DateTime(devicetime));\n            Serial.println("");\n            Serial.println("rtc time updated.");\n            // get and print the adjusted rtc time\n            now = rtc.now();\n            Serial.print("Adjusted RTC time is: ");\n            Serial.println(now.timestamp(DateTime::TIMESTAMP_FULL));\n        }\n    }\n}\n\n\nvoid connectToWiFi(const char* ssid, const char* pwd) {\n    Serial.println("Connecting to WiFi network: " + String(ssid));\n\n    // delete old config\n    WiFi.disconnect(true);\n\n    Serial.println("Waiting for WIFI connection...");\n\n    //Initiate connection\n    WiFi.begin(ssid, pwd);\n\n    while (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(ssid, pwd);\n        delay(500);\n    }\n    Serial.println("Connected.");\n    printWifiStatus();\n\n}\n\nunsigned long getNTPtime() {\n\n    // module returns a unsigned long time valus as secs since Jan 1, 1970 \n    // unix time or 0 if a problem encounted\n\n    //only send data when connected\n    if (WiFi.status() == WL_CONNECTED) {\n        //initializes the UDP state\n        //This initializes the transfer buffer\n        udp.begin(WiFi.localIP(), localPort);\n\n        sendNTPpacket(timeServer); // send an NTP packet to a time server\n        // wait to see if a reply is available\n        delay(1000);\n\n        if (udp.parsePacket()) {\n            Serial.println("udp packet received");\n            Serial.println("");\n            // We\'ve received a packet, read the data from it\n            udp.read(packetBuffer, NTP_PACKET_SIZE); // read the packet into the buffer\n\n            //the timestamp starts at byte 40 of the received packet and is four bytes,\n            // or two words, long. First, extract the two words:\n\n            unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);\n            unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);\n            // combine the four bytes (two words) into a long integer\n            // this is NTP time (seconds since Jan 1 1900):\n            unsigned long secsSince1900 = highWord << 16 | lowWord;\n            // Unix time starts on Jan 1 1970. In seconds, that\'s 2208988800:\n            const unsigned long seventyYears = 2208988800UL;\n            // subtract seventy years:\n            unsigned long epoch = secsSince1900 - seventyYears;\n\n            // adjust time for timezone offset in secs +/- from UTC\n            // WA time offset from UTC is +8 hours (28,800 secs)\n            // + East of GMT\n            // - West of GMT\n            long tzOffset = 28800UL;\n\n            // WA local time \n            unsigned long adjustedTime;\n            return adjustedTime = epoch + tzOffset;\n        }\n        else {\n            // were not able to parse the udp packet successfully\n            // clear down the udp connection\n            udp.stop();\n            return 0; // zero indicates a failure\n        }\n        // not calling ntp time frequently, stop releases resources\n        udp.stop();\n    }\n    else {\n        // network not connected\n        return 0;\n    }\n\n}\n\n// send an NTP request to the time server at the given address\nunsigned long sendNTPpacket(const char* address) {\n    // set all bytes in the buffer to 0\n    for (int i = 0; i < NTP_PACKET_SIZE; ++i) {\n        packetBuffer[i] = 0;\n    }\n    // Initialize values needed to form NTP request\n    // (see URL above for details on the packets)\n    packetBuffer[0] = 0b11100011;   // LI, Version, Mode\n    packetBuffer[1] = 0;     // Stratum, or type of clock\n    packetBuffer[2] = 6;     // Polling Interval\n    packetBuffer[3] = 0xEC;  // Peer Clock Precision\n    // 8 bytes of zero for Root Delay & Root Dispersion\n    packetBuffer[12] = 49;\n    packetBuffer[13] = 0x4E;\n    packetBuffer[14] = 49;\n    packetBuffer[15] = 52;\n\n    // all NTP fields have been given values, now\n    // you can send a packet requesting a timestamp:\n    udp.beginPacket(address, 123); //NTP requests are to port 123\n    udp.write(packetBuffer, NTP_PACKET_SIZE);\n    udp.endPacket();\n}\n\nvoid printWifiStatus() {\n    // print the SSID of the network you\'re attached to:\n    Serial.println("");\n    Serial.print("SSID: ");\n    Serial.println(WiFi.SSID());\n\n    // print your WiFi shield\'s IP address:\n    IPAddress ip = WiFi.localIP();\n    Serial.print("IP Address: ");\n    Serial.println(ip);\n\n    // print the received signal strength:\n    long rssi = WiFi.RSSI();\n    Serial.print("signal strength (RSSI):");\n    Serial.print(rssi);\n    Serial.println(" dBm");\n    Serial.println("");\n}\n')),(0,r.yg)("h2",{id:"\u5c06wi-fi\u914d\u7f6e\u4e3a\u8bbf\u95ee\u70b9ap\u6a21\u5f0f-web\u670d\u52a1\u5668"},"\u5c06Wi-Fi\u914d\u7f6e\u4e3a\u8bbf\u95ee\u70b9\uff08AP\uff09\u6a21\u5f0f/ Web\u670d\u52a1\u5668"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5728Arduino\u4e2d\u5305\u62ec ",(0,r.yg)("inlineCode",{parentName:"p"},"rpcWiFi.h"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"WiFiClient.h")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"WifiAP.h")," \u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u914d\u7f6eAP Wi-Fi\u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"ssid")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"password")," \u3002")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5728\u7aef\u53e380\u4e0a\u521d\u59cb\u5316Wi-Fi\u670d\u52a1\u5668\uff1a"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"WiFiServer server(80);\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"li"},"ssid")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"password")," \u521d\u59cb\u5316AP:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"WiFi.softAP(ssid, password);\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u521d\u59cb\u5316AP:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"server.begin();\n")),(0,r.yg)("h3",{id:"\u914d\u7f6e\u4e3aap\u6a21\u5f0f\u7b80\u5355web\u670d\u52a1\u5668\u793a\u4f8b\u4ee3\u7801"},"\u914d\u7f6e\u4e3aAP\u6a21\u5f0f\uff08\u7b80\u5355Web\u670d\u52a1\u5668\uff09\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("p",null,"\u6b64\u793a\u4f8b\u5c06Wio\u7ec8\u7aef\u914d\u7f6e\u4e3a\u7b80\u5355\u7684Web\u670d\u52a1\u5668\uff0c\u5e76\u5141\u8bb8\u60a8\u8fde\u63a5\u5230\u5176AP\u7f51\u7edc\uff0c\u5e76\u6839\u636eHTTP\u54cd\u5e94\u63a7\u5236\u786c\u4ef6\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'/*\n    WiFiAccessPoint.ino creates a WiFi access point and provides a web server on it.\n\n    Steps:\n    1. Connect to the access point "yourAp"\n    2. Point your web browser to http://<This-AP-IP>/H to turn the LED on or http://<This-AP-IP>/L to turn it off\n       (<This-AP-IP> should be replaced with the IP got in terminal/SerialPort, see Note 1)\n     OR\n     Run raw TCP "GET /H" and "GET /L" on PuTTY terminal with IP address (see Note 1) and 80 as port\n\n    Created for arduino-esp32 on 04 July, 2018\n    by Elochukwu Ifediora (fedy0)\n*/\n\n#include <rpcWiFi.h>\n#include <WiFiClient.h>\n#include <WiFiAP.h>\n\n#define LED_BUILTIN 2   // Set the GPIO pin where you connected your test LED\n                        // or comment this line out if your dev board has a built-in LED\n\n// Set these to your desired credentials.\nconst char* ssid = "yourAP";\nconst char* password = "yourPassword";\n\nWiFiServer server(80);\n\n\nvoid setup() {\n    pinMode(LED_BUILTIN, OUTPUT);\n\n    Serial.begin(115200);\n    while(!Serial); // Wait for Serial to be ready\n    delay(1000);\n    Serial.println();\n    Serial.println("Configuring access point...");\n\n    // You can remove the password parameter if you want the AP to be open.\n    WiFi.softAP(ssid, password);\n    IPAddress myIP = WiFi.softAPIP();\n    /*\n     * Note 1\n     * Record this IP, will used by Client (such as Web Browser)\n     */\n    Serial.print("AP IP address: ");\n    Serial.println(myIP);\n    server.begin();\n\n    Serial.println("Server started");\n}\n\nvoid loop() {\n    WiFiClient client = server.available();   // listen for incoming clients\n\n    if (client) {                             // if you get a client,\n        Serial.println("New Client.");           // print a message out the serial port\n        String currentLine = "";                // make a String to hold incoming data from the client\n        while (client.connected()) {            // loop while the client\'s connected\n            if (client.available()) {             // if there\'s bytes to read from the client,\n                char c = client.read();             // read a byte, then\n                Serial.write(c);                    // print it out the serial monitor\n                if (c == \'\\n\') {                    // if the byte is a newline character\n\n                    // if the current line is blank, you got two newline characters in a row.\n                    // that\'s the end of the client HTTP request, so send a response:\n                    if (currentLine.length() == 0) {\n                        // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\n                        // and a content-type so the client knows what\'s coming, then a blank line:\n                        client.println("HTTP/1.1 200 OK");\n                        client.println("Content-type:text/html");\n                        client.println();\n\n                        // the content of the HTTP response follows the header:\n                        client.print("Click <a href=\\"/H\\">here</a> to turn ON the LED.<br>");\n                        client.print("Click <a href=\\"/L\\">here</a> to turn OFF the LED.<br>");\n\n                        // The HTTP response ends with another blank line:\n                        client.println();\n                        // break out of the while loop:\n                        break;\n                    } else {    // if you got a newline, then clear currentLine:\n                        currentLine = "";\n                    }\n                } else if (c != \'\\r\') {  // if you got anything else but a carriage return character,\n                    currentLine += c;      // add it to the end of the currentLine\n                }\n\n                // Check to see if the client request was "GET /H" or "GET /L":\n                if (currentLine.endsWith("GET /H")) {\n                    digitalWrite(LED_BUILTIN, HIGH);               // GET /H turns the LED on\n                }\n                if (currentLine.endsWith("GET /L")) {\n                    digitalWrite(LED_BUILTIN, LOW);                // GET /L turns the LED off\n                }\n            }\n        }\n        // close the connection:\n        client.stop();\n        Serial.println("Client Disconnected.");\n    }\n}\n')),(0,r.yg)("h2",{id:"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54"},"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"\u5728Arduino\u4ee3\u7801\u4e2d\u5982\u4f55\u68c0\u67e5RTL8720\u56fa\u4ef6\u7248\u672c\uff1f")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "rpcWiFi.h"\n\nvoid setup() {\n    Serial.begin(115200);\n    while(!Serial); // Wait to open Serial Monitor\n    Serial.printf("RTL8720 Firmware Version: %s", rpc_system_version());\n}\n\nvoid loop() {\n}\n')),(0,r.yg)("h2",{id:"\u6280\u672f\u652f\u6301--\u4ea7\u54c1\u8ba8\u8bba"},"\u6280\u672f\u652f\u6301 & \u4ea7\u54c1\u8ba8\u8bba"),(0,r.yg)("p",null,"\u611f\u8c22\u60a8\u9009\u62e9\u6211\u4eec\u7684\u4ea7\u54c1\uff01\u6211\u4eec\u5728\u8fd9\u91cc\u4e3a\u60a8\u63d0\u4f9b\u4e0d\u540c\u7684\u652f\u6301\uff0c\u4ee5\u786e\u4fdd\u60a8\u5bf9\u6211\u4eec\u7684\u4ea7\u54c1\u7684\u4f53\u9a8c\u5c3d\u53ef\u80fd\u987a\u7545\u3002\u6211\u4eec\u63d0\u4f9b\u591a\u79cd\u6c9f\u901a\u6e20\u9053\uff0c\u4ee5\u6ee1\u8db3\u4e0d\u540c\u7684\u504f\u597d\u548c\u9700\u6c42\u3002"),(0,r.yg)("div",{class:"button_tech_support_container"},(0,r.yg)("a",{href:"https://forum.seeedstudio.com/",class:"button_forum"}),(0,r.yg)("a",{href:"https://www.seeedstudio.com/contacts",class:"button_email"})),(0,r.yg)("div",{class:"button_tech_support_container"},(0,r.yg)("a",{href:"https://discord.gg/eWkprNDMU7",class:"button_discord"}),(0,r.yg)("a",{href:"https://github.com/Seeed-Studio/wiki-documents/discussions/69",class:"button_discussion"})))}u.isMDXComponent=!0}}]);