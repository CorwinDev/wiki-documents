"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5338],{15680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>S});var t=r(96540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),d=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},p=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(r),m=i,S=u["".concat(s,".").concat(m)]||u[m]||g[m]||a;return r?t.createElement(S,l(l({ref:n},p),{},{components:r})):t.createElement(S,l({ref:n},p))}));function S(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<a;d++)l[d]=r[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},75969:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=r(58168),i=(r(96540),r(15680));const a={description:"FreeRTOS with Wio Terminal",title:"Wio Terminal\u4e0a\u7684FreeRTOS",keywords:["Sorftware"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Software-FreeRTOS",last_update:{date:"3/06/2024",author:"jessie"}},l="\u5982\u4f55\u5728Arduino\u4e2d\u4f7f\u7528FreeRTOS\u8fdb\u884c\u591a\u4efb\u52a1\u5904\u7406",o={unversionedId:"zh-CN/Sensor/Wio_Terminal/CN-Software-FreeRTOS",id:"zh-CN/Sensor/Wio_Terminal/CN-Software-FreeRTOS",title:"Wio Terminal\u4e0a\u7684FreeRTOS",description:"FreeRTOS with Wio Terminal",source:"@site/docs/zh-CN/Sensor/Wio_Terminal/CN-Software-FreeRTOS.md",sourceDirName:"zh-CN/Sensor/Wio_Terminal",slug:"/cn/Software-FreeRTOS",permalink:"/cn/Software-FreeRTOS",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/Wio_Terminal/CN-Software-FreeRTOS.md",tags:[],version:"current",lastUpdatedBy:"jessie",lastUpdatedAt:1709683200,formattedLastUpdatedAt:"Mar 6, 2024",frontMatter:{description:"FreeRTOS with Wio Terminal",title:"Wio Terminal\u4e0a\u7684FreeRTOS",keywords:["Sorftware"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Software-FreeRTOS",last_update:{date:"3/06/2024",author:"jessie"}},sidebar:"CNSidebar",previous:{title:"Wio Terminal\u4e0a\u7684CircuitPython",permalink:"/cn/Wio-Terminal-CircuitPython"},next:{title:"Wio Terminal \u5e38\u89c1\u95ee\u9898\u89e3\u7b54",permalink:"/cn/wio_terminal_faq"}},s={},d=[{value:"\u4ec0\u4e48\u662f RTOS",id:"\u4ec0\u4e48\u662f-rtos",level:2},{value:"RTOS \u5de5\u4f5c\u539f\u7406",id:"rtos-\u5de5\u4f5c\u539f\u7406",level:2},{value:"\u4ec0\u4e48\u662f FreeRTOS",id:"\u4ec0\u4e48\u662f-freertos",level:2},{value:"\u5728Arduino\u4e2d\u5feb\u901f\u5f00\u59cb\u4f7f\u7528FreeRTOS",id:"\u5728arduino\u4e2d\u5feb\u901f\u5f00\u59cb\u4f7f\u7528freertos",level:2},{value:"\u5b89\u88c5FreeRTOS Arduino\u5e93",id:"\u5b89\u88c5freertos-arduino\u5e93",level:3},{value:"\u652f\u6301\u7684\u5f00\u53d1\u677f",id:"\u652f\u6301\u7684\u5f00\u53d1\u677f",level:3},{value:"FreeRTOS Arduino \u793a\u4f8b",id:"freertos-arduino-\u793a\u4f8b",level:2},{value:"Hello World \u793a\u4f8b",id:"hello-world-\u793a\u4f8b",level:3},{value:"Blink \u793a\u4f8b",id:"blink-\u793a\u4f8b",level:3},{value:"LCD \u793a\u4f8b",id:"lcd-\u793a\u4f8b",level:3},{value:"\u7528\u4e8e Arduino \u7684 Cpp FreeRTOS",id:"\u7528\u4e8e-arduino-\u7684-cpp-freertos",level:2},{value:"\u5b89\u88c5 FreeRTOS Cpp Arduino \u5e93",id:"\u5b89\u88c5-freertos-cpp-arduino-\u5e93",level:3},{value:"Cpp \u4e2d\u7684 Blink \u793a\u4f8b",id:"cpp-\u4e2d\u7684-blink-\u793a\u4f8b",level:3},{value:"\u53c2\u8003\u8d44\u6599",id:"\u53c2\u8003\u8d44\u6599",level:2}],p={toc:d},u="wrapper";function g(e){let{components:n,...r}=e;return(0,i.yg)(u,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"\u5982\u4f55\u5728arduino\u4e2d\u4f7f\u7528freertos\u8fdb\u884c\u591a\u4efb\u52a1\u5904\u7406"},"\u5982\u4f55\u5728Arduino\u4e2d\u4f7f\u7528FreeRTOS\u8fdb\u884c\u591a\u4efb\u52a1\u5904\u7406"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/FreeRTOS/full.gif"})),(0,i.yg)("h2",{id:"\u4ec0\u4e48\u662f-rtos"},"\u4ec0\u4e48\u662f RTOS"),(0,i.yg)("p",null,"\u5982\u4eca\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u6700\u91cd\u8981\u7684\u7ec4\u6210\u90e8\u5206\u4e4b\u4e00\u662f ",(0,i.yg)("strong",{parentName:"p"},"RTOS"),"  ",(0,i.yg)("strong",{parentName:"p"},"\uff08\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff09"),", \u5b83\u8d1f\u8d23\u4ece\u4efb\u52a1\u8c03\u5ea6\u5230\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u5207\u3002"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"RTOS")," \u65e8\u5728\u63d0\u4f9b\u53ef\u9884\u6d4b\u7684\u6267\u884c\u6a21\u5f0f\u3002\u5f53\u5904\u7406\u5fc5\u987b\u6ee1\u8db3\u7cfb\u7edf\u7684\u65f6\u95f4\u9650\u5236\u65f6\uff0c\u4f7f\u7528RTOS\u3002\u56e0\u6b64\uff0c\u4e0e\u901a\u7528\u64cd\u4f5c\u7cfb\u7edf\uff08GPOS\uff09\u76f8\u6bd4\uff0cRTOS\u901a\u5e38\u8f7b\u91cf\u4e14\u4f53\u79ef\u5c0f\uff0c\u901a\u5e38\u4ec5\u63d0\u4f9b\u7279\u5b9a\u7c7b\u578b\u5e94\u7528\u7a0b\u5e8f\u5728\u7279\u5b9a\u786c\u4ef6\u4e0a\u8fd0\u884c\u6240\u9700\u7684\u529f\u80fd\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4fee\u6539\u73b0\u6709\u7684RTOS\uff0c\u5c06\u5176\u7f29\u5c0f\u4e3a\u4ec5\u63d0\u4f9b\u7279\u5b9a\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u529f\u80fd\uff0c\u5e76/\u6216\u81ea\u5b9a\u4e49\u5176\u529f\u80fd\u6216\u6027\u80fd\u7279\u5f81\u3002"),(0,i.yg)("h2",{id:"rtos-\u5de5\u4f5c\u539f\u7406"},"RTOS \u5de5\u4f5c\u539f\u7406"),(0,i.yg)("p",null," ",(0,i.yg)("strong",{parentName:"p"},"\u5185\u6838")," \u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u6838\u5fc3\u7ec4\u4ef6\u3002\u50cfLinux\u8fd9\u6837\u7684\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\u5185\u6838\uff0c\u5141\u8bb8\u7528\u6237\u540c\u65f6\u8bbf\u95ee\u8ba1\u7b97\u673a\u3002\u6bcf\u4e2a\u6b63\u5728\u6267\u884c\u7684\u7a0b\u5e8f\u90fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u63a7\u5236\u4e0b\u7684\u4efb\u52a1\uff08\u6216\u7ebf\u7a0b\uff09\u3002\u5982\u679c\u64cd\u4f5c\u7cfb\u7edf\u80fd\u591f\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6267\u884c\u591a\u4e2a\u4efb\u52a1, \u5c31\u53ef\u4ee5\u8bf4\u5b83\u662f ",(0,i.yg)("strong",{parentName:"p"},"\u591a\u4efb\u52a1\u5904\u7406"),"\u3002"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"\u591a\u4efb\u52a1\u5904\u7406"))),(0,i.yg)("p",null,"\u4f20\u7edf\u5904\u7406\u5668\u4e00\u6b21\u53ea\u80fd\u6267\u884c ",(0,i.yg)("strong",{parentName:"p"},"\u4e00\u4e2a\u4efb\u52a1")," \uff0c\u4f46\u662f\u591a\u4efb\u52a1\u5904\u7406\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u901a\u8fc7\u5feb\u901f\u5728\u4efb\u52a1\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\u6765\u4f7f\u6bcf\u4e2a\u4efb\u52a1\u770b\u8d77\u6765\u540c\u65f6\u6267\u884c\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u4e09\u4e2a\u4efb\u52a1\u7684\u6267\u884c\u6a21\u5f0f\u4e0e\u65f6\u95f4\u7684\u5173\u7cfb"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/FreeRTOS/TaskExecution.gif"})),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"\u8c03\u5ea6"))),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"\u8c03\u5ea6\u5668")," \u662f\u5185\u6838\u7684\u4e00\u90e8\u5206\uff0c\u8d1f\u8d23\u5728\u4efb\u4f55\u7279\u5b9a\u65f6\u95f4\u51b3\u5b9a\u6267\u884c\u54ea\u4e2a\u4efb\u52a1\u3002\u5185\u6838\u53ef\u4ee5\u5728\u4efb\u52a1\u7684\u751f\u547d\u5468\u671f\u4e2d\u591a\u6b21\u6682\u505c\u548c\u6062\u590d\u4efb\u52a1\u3002"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"\u8c03\u5ea6\u7b56\u7565")," \u8c03\u5ea6\u5668\u7528\u4e8e\u51b3\u5b9a\u4efb\u4f55\u65f6\u523b\u6267\u884c\u54ea\u4e2a\u4efb\u52a1\u7684\u7b97\u6cd5\u3002\u975e\u5b9e\u65f6\u591a\u7528\u6237\u7cfb\u7edf\u7b56\u7565\u53ef\u80fd\u4f1a\u4e3a\u6bcf\u4e2a\u4efb\u52a1\u63d0\u4f9b\u201c\u516c\u5e73\u201d\u7684\u5904\u7406\u5668\u65f6\u95f4\u4efd\u989d\u3002"),(0,i.yg)("p",null,"\u9664\u4e86\u88ab\u5185\u6838\u5f3a\u5236\u6682\u505c\u4e4b\u5916\uff0c\u4efb\u52a1\u8fd8\u53ef\u4ee5\u9009\u62e9\u81ea\u884c\u6682\u505c\u3002\u5982\u679c\u5b83\u60f3\u8981 ",(0,i.yg)("strong",{parentName:"p"},"\u5ef6\u8fdf\uff08\u7761\u7720\uff09")," \u4e00\u6bb5\u65f6\u95f4\uff0c\u6216\u8005 ",(0,i.yg)("strong",{parentName:"p"},"\u7b49\u5f85\uff08\u963b\u585e\uff09")," \u67d0\u4e2a\u8d44\u6e90\u53ef\u7528\uff08\u4f8b\u5982\u4e32\u53e3\uff09\u6216\u4e8b\u4ef6\uff08\u4f8b\u5982\u6309\u952e\u6309\u4e0b\uff09\uff0c\u5b83\u4f1a\u8fd9\u6837\u505a\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/FreeRTOS/suspending.gif"})),(0,i.yg)("p",null,(0,i.yg)("em",{parentName:"p"},"\u53c2\u8003: ",(0,i.yg)("a",{parentName:"em",href:"https://www.freertos.org/implementation/a00002.html"},(0,i.yg)("strong",{parentName:"a"},"FreeRTOS Fundamentals")))),(0,i.yg)("h2",{id:"\u4ec0\u4e48\u662f-freertos"},"\u4ec0\u4e48\u662f FreeRTOS"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:"{400}",src:"https://files.seeedstudio.com/wiki/FreeRTOS/FreeRTOS-logo.png"})),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://www.freertos.org/"},(0,i.yg)("strong",{parentName:"a"},"FreeRTOS"))," \u662f\u4e00\u79cd\u8bbe\u8ba1\u6210\u8db3\u591f\u5c0f\u4ee5\u5728\u5fae\u63a7\u5236\u5668\u4e0a\u8fd0\u884c\u7684RTOS\u7c7b\u522b\uff0c\u5c3d\u7ba1\u5b83\u7684\u4f7f\u7528\u4e0d\u9650\u4e8e\u5fae\u63a7\u5236\u5668\u5e94\u7528\u3002FreeRTOS\u5305\u62ec\u4e00\u4e2a\u5185\u6838\u548c\u4e00\u4e2a\u9002\u7528\u4e8e\u5404\u884c\u4e1a\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u4e0d\u65ad\u589e\u957f\u7684\u8f6f\u4ef6\u5e93\u96c6\u5408\u3002\u501f\u52a9FreeRTOS\u7684\u5e2e\u52a9\uff0c\u60a8\u53ef\u4ee5\u5728\u57fa\u4e8e\u5fae\u63a7\u5236\u5668\u7684\u786c\u4ef6\u4e0a\u8fdb\u884c\u591a\u4efb\u52a1\u5904\u7406\uff01"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"\u4e3a\u4e86\u4e0eArduino\u517c\u5bb9"),", \u6211\u4eec\u5c06FreeRTOS\u79fb\u690d\u5230\u4e86Arduino\u6846\u67b6\u4e2d\uff0c\u4ee5\u4fbf\u60a8\u80fd\u591f\u8f7b\u677e\u5730\u5728\u559c\u7231\u7684Arduino\u677f\u4e0a\u4f7f\u7528FreeRTOS\uff01"),(0,i.yg)("p",null,":::\u6ce8\n2017\u5e74, ",(0,i.yg)("a",{parentName:"p",href:"https://aws.amazon.com/freertos/"},"Amazon")," \u63a5\u7ba1\u4e86FreeRTOS\u7684\u7ba1\u7406\u6743\uff0c\u4f7f\u5176\u5728\u5d4c\u5165\u5f0f\u9886\u57df\u66f4\u52a0\u53ef\u9760\u548c\u5b89\u5168\u3002\n:::"),(0,i.yg)("h2",{id:"\u5728arduino\u4e2d\u5feb\u901f\u5f00\u59cb\u4f7f\u7528freertos"},"\u5728Arduino\u4e2d\u5feb\u901f\u5f00\u59cb\u4f7f\u7528FreeRTOS"),(0,i.yg)("h3",{id:"\u5b89\u88c5freertos-arduino\u5e93"},"\u5b89\u88c5FreeRTOS Arduino\u5e93"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"\u8bbf\u95ee ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_FreeRTOS"},(0,i.yg)("strong",{parentName:"a"},"Seeed_Arduino_FreeRTOS"))," \u5b58\u50a8\u5e93\uff0c\u5e76\u5c06\u6574\u4e2a\u5b58\u50a8\u5e93\u4e0b\u8f7d\u5230\u672c\u5730\u9a71\u52a8\u5668\u4e0a\u3002")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"\u73b0\u5728\uff0c\u53ef\u4ee5\u5c06Seeed_Arduino_FreeRTOS\u5e93\u5b89\u88c5\u5230Arduino IDE\u4e2d\u3002\u6253\u5f00Arduino IDE\uff0c\u70b9\u51fb ",(0,i.yg)("inlineCode",{parentName:"p"},"sketch")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Include Library")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Add .ZIP Library"),", \u9009\u62e9\u521a\u521a\u4e0b\u8f7d\u7684 ",(0,i.yg)("inlineCode",{parentName:"p"},"Seeed_Arduino_FreeRTOS")," \u6587\u4ef6\u3002"))),(0,i.yg)("p",null,(0,i.yg)("img",{parentName:"p",src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/Xnip2019-11-21_15-50-13.jpg",alt:"InstallLibrary"})),(0,i.yg)("p",null,":::\u6ce8\n\u8be5\u5e93\u5c06\u6700\u65b0\u7684FreeRTOS\uff0810.2.1\uff09\u79fb\u690d\u8fc7\u6765\uff0c\u5e76\u5141\u8bb8\u60a8\u5728Arduino IDE\u4e2d\u521b\u5efaFreeRTOS\u9879\u76ee\u3002\n:::"),(0,i.yg)("h3",{id:"\u652f\u6301\u7684\u5f00\u53d1\u677f"},"\u652f\u6301\u7684\u5f00\u53d1\u677f"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_FreeRTOS"},(0,i.yg)("strong",{parentName:"a"},"Seeed_Arduino_FreeRTOS"))," \u652f\u6301 Seeed \u7684\u6240\u6709 SAMD \u5f00\u53d1\u677f\uff1a"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Wio-Terminal-p-4509.html"},"Wio Terminal")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Seeeduino-XIAO-Arduino-Microcontroller-SAMD21-Cortex-M0+-p-4426.html"},"Seeeduino XIAO")),(0,i.yg)("li",{parentName:"ul"},"Seeeduino Zero \u7cfb\u5217:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Seeeduino-Cortex-M0-p-4070.html"},"Seeeduino Cortex-M0+")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Seeeduino-Lotus-Cortex-M0-p-2896.html"},"Seeeduino Lotus Cortex-M0+")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Wio-Lite-W600-p-4155.html"},"Wio Lite W600 - ATSAMD21 Cortex-M0 \u65e0\u7ebf\u5f00\u53d1\u677f")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Wio-Lite-MG126-p-4189.html"},"Wio Lite MG126 - ATSAMD21 Cortex-M0 \u84dd\u7259\u65e0\u7ebf\u5f00\u53d1\u677f")))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.seeedstudio.com/Seeeduino-LoRaWAN-p-2780.html"},"Seeeduino LoRaWAN"))),(0,i.yg)("h2",{id:"freertos-arduino-\u793a\u4f8b"},"FreeRTOS Arduino \u793a\u4f8b"),(0,i.yg)("p",null,"FreeRTOS \u63d0\u4f9b\u4e86\u5fae\u63a7\u5236\u5668\u7684  ",(0,i.yg)("strong",{parentName:"p"},"\u5b9e\u65f6\u8c03\u5ea6\u529f\u80fd,\u4efb\u52a1\u95f4\u901a\u4fe1,\u5b9a\u65f6\u548c\u540c\u6b65\u539f\u8bed"),"\u7b49\u529f\u80fd\uff0c\u975e\u5e38\u5f3a\u5927"),(0,i.yg)("p",null,"\u4e3a\u4e86\u5e2e\u52a9\u60a8\u8f7b\u677e\u5165\u95e8 FreeRTOS\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e9b\u793a\u4f8b\u4f9b\u53c2\u8003\u3002\u4ee5\u4e0b\u793a\u4f8b\u662f\u5728 Wio Terminal \u4e0a\u6784\u5efa\u548c\u8fd0\u884c\u7684\u3002"),(0,i.yg)("h3",{id:"hello-world-\u793a\u4f8b"},"Hello World \u793a\u4f8b"),(0,i.yg)("p",null,"\u8fd9\u4e2a\u793a\u4f8b\u7b80\u5355\u5730\u521b\u5efa\u4e86 ",(0,i.yg)("strong",{parentName:"p"},"\u4e24\u4e2a\u7ebf\u7a0b")," \u4ee5\u4e0d\u540c\u7684\u901f\u7387\u5411\u4e32\u53e3\u76d1\u89c6\u5668\u6253\u5370\u4e0d\u540c\u7684 ",(0,i.yg)("inlineCode",{parentName:"p"},"\u5b57\u7b26\u4e32")," \u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{src:"https://files.seeedstudio.com/wiki/FreeRTOS/helloworld.png"})),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <Seeed_Arduino_FreeRTOS.h>\n\nTaskHandle_t Handle_aTask;\nTaskHandle_t Handle_bTask;\n\nstatic void ThreadA(void* pvParameters) {\n    Serial.println("Thread A: Started");\n\n    while (1) {\n        Serial.println("Hello World!");\n        delay(1000);\n    }\n}\n\nstatic void ThreadB(void* pvParameters) {\n    Serial.println("Thread B: Started");\n\n    for (int i = 0; i < 10; i++) {\n        Serial.println("---This is Thread B---");\n        delay(2000);\n    }\n    Serial.println("Thread B: Deleting");\n    vTaskDelete(NULL);\n}\n\nvoid setup() {\n\n    Serial.begin(115200);\n\n    vNopDelayMS(1000); // prevents usb driver crash on startup, do not omit this\n    while(!Serial);  // Wait for Serial terminal to open port before starting program\n\n    Serial.println("");\n    Serial.println("******************************");\n    Serial.println("        Program start         ");\n    Serial.println("******************************");\n\n    // Create the threads that will be managed by the rtos\n    // Sets the stack size and priority of each task\n    // Also initializes a handler pointer to each task, which are important to communicate with and retrieve info from tasks\n    xTaskCreate(ThreadA,     "Task A",       256, NULL, tskIDLE_PRIORITY + 2, &Handle_aTask);\n    xTaskCreate(ThreadB,     "Task B",       256, NULL, tskIDLE_PRIORITY + 1, &Handle_bTask);\n\n    // Start the RTOS, this function will never return and will schedule the tasks.\n    vTaskStartScheduler();\n}\n\nvoid loop() {\n    // NOTHING\n}\n')),(0,i.yg)("h3",{id:"blink-\u793a\u4f8b"},"Blink \u793a\u4f8b"),(0,i.yg)("p",null,"\u8fd9\u4e2a\u793a\u4f8b\u4e5f\u521b\u5efa\u4e86\u4e24\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u8f93\u51fa\u4fe1\u53f7\u4ee5\u70b9\u4eae LED\u3002\u5176\u4e2d\u4e00\u4e2a\u7ebf\u7a0b\u662f\u7b80\u5355\u5730\u95ea\u70c1 LED\uff0c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u662f\u547c\u5438\u706f\u6548\u679c\u3002"),(0,i.yg)("p",null,":::\u6ce8\n\u786e\u4fdd\u547c\u5438\u706f\u8fde\u63a5\u5728 PWM \u5f15\u811a\u4e0a\u3002\n:::"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/FreeRTOS/Blink.gif"})),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <Seeed_Arduino_FreeRTOS.h>\n\n#define LEDPIN_1 PIN_WIRE_SCL // Left side of Grove Port of Wio Terminal\n#define LEDPIN_2 D0 // Right side of Grove Port of Wio Terminal\n\nTaskHandle_t Handle_aTask;\nTaskHandle_t Handle_bTask;\n\n// Blinking LED\nstatic void LED_1(void* pvParameters) {\n    while (1) {\n        digitalWrite(LEDPIN_1, HIGH);\n        delay(1000);\n        digitalWrite(LEDPIN_1, LOW);\n        delay(1000);\n    }\n}\n\n// Breathing LED\nstatic void LED_2(void* pvParameters) {\n    int cnt = 5;\n    while (1) {\n        for (byte value = 0 ; value < 255; value+=cnt) {\n            analogWrite(LEDPIN_2, value);\n            delay(20);\n        }\n        delay(200);\n        for (byte value = 255 ; value > 0; value-=cnt) {\n            analogWrite(LEDPIN_2, value);\n            delay(20);\n        }\n    }\n}\n\nvoid setup() {\n    Serial.begin(115200);\n\n    vNopDelayMS(1000); // prevents usb driver crash on startup, do not omit this\n//    while(!Serial);  // Wait for serial terminal to open port before starting program\n\n    pinMode(LEDPIN_1, OUTPUT);\n    pinMode(LEDPIN_2, OUTPUT);\n\n    xTaskCreate(LED_1,     "Task A",       256, NULL, tskIDLE_PRIORITY + 2, &Handle_aTask);\n    xTaskCreate(LED_2,     "Task B",       256, NULL, tskIDLE_PRIORITY + 1, &Handle_bTask);\n\n    // Start the RTOS, this function will never return and will schedule the tasks.\n    vTaskStartScheduler();\n}\n\nvoid loop() {\n\n}\n')),(0,i.yg)("h3",{id:"lcd-\u793a\u4f8b"},"LCD \u793a\u4f8b"),(0,i.yg)("p",null,"\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86 FreeRTOS \u4e0e Wio Terminal \u4e2d\u7684\u5176\u4ed6 Arduino \u5e93\u7684\u7ed3\u5408\uff0c\u5982 LCD Sprites\u3002\u8fd9\u4e2a\u793a\u4f8b\u521b\u5efa\u4e86\u4e24\u4e2a\u7ebf\u7a0b\u4e2d\u7684\u4e24\u4e2a\u7cbe\u7075\uff0c\u4ee5\u76f8\u53cd\u7684\u65b9\u5f0f\u8ba1\u6570\u3002 ",(0,i.yg)("inlineCode",{parentName:"p"},"taskMonitor")," \u662f\u4e00\u4e2a\u7528\u4e8e\u76d1\u89c6\u7ebf\u7a0b\u5e76\u6253\u5370\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u5806\u6808\u4fe1\u606f\u7684\u51fd\u6570\u3002"),(0,i.yg)("div",{align:"center"},(0,i.yg)("img",{width:"{600}",src:"https://files.seeedstudio.com/wiki/FreeRTOS/FreeRTOS-LCD.gif"})),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <Seeed_Arduino_FreeRTOS.h>\n#include <TFT_eSPI.h>\n\nTaskHandle_t Handle_aTask;\nTaskHandle_t Handle_bTask;\nTaskHandle_t Handle_monitorTask;\n\nTFT_eSPI tft = TFT_eSPI();\nTFT_eSprite img = TFT_eSprite(&tft);\nTFT_eSprite img2 = TFT_eSprite(&tft);\n\nstatic void LCD_TASK_1 (void* pvParameters) {\n    Serial.println("Thread A: Started");\n    img.createSprite(100, 100);\n    img.fillSprite(tft.color565(229,58,64)); // RED\n    img.setTextSize(8);\n    img.setTextColor(TFT_WHITE);\n    for(int i = 0; i < 100; i++) {\n        img.drawNumber(i, 10, 25);\n        img.pushSprite(30, 70);\n        img.fillSprite(tft.color565(229,58,64));\n        delay(1000);\n        if(i== 99) i = 0;\n    }\n}\n\nstatic void LCD_TASK_2 (void* pvParameters) {\n    Serial.println("Thread B: Started");\n    img2.createSprite(100, 100);\n    img2.fillSprite(tft.color565(48,179,222)); // BLUE\n    img2.setTextSize(8);\n    img2.setTextColor(TFT_WHITE);\n    for(int x = 99; x >= 0; x--) {\n        img2.drawNumber(x, 10, 25);\n        img2.pushSprite(190, 70);\n        img2.fillSprite(tft.color565(48,179,222));\n        delay(500);\n        if(x== 0) x = 99;\n    }\n}\n\nvoid taskMonitor(void* pvParameters) {\n    int x;\n    int measurement;\n\n    Serial.println("Task Monitor: Started");\n\n    // run this task a few times before exiting forever\n    for (x = 0; x < 10; ++x) {\n\n        Serial.println("");\n        Serial.println("******************************");\n        Serial.println("[Stacks Free Bytes Remaining] ");\n\n        measurement = uxTaskGetStackHighWaterMark(Handle_aTask);\n        Serial.print("Thread A: ");\n        Serial.println(measurement);\n\n        measurement = uxTaskGetStackHighWaterMark(Handle_bTask);\n        Serial.print("Thread B: ");\n        Serial.println(measurement);\n\n        measurement = uxTaskGetStackHighWaterMark(Handle_monitorTask);\n        Serial.print("Monitor Stack: ");\n        Serial.println(measurement);\n\n        Serial.println("******************************");\n\n        delay(10000); // print every 10 seconds\n    }\n\n    // delete ourselves.\n    // Have to call this or the system crashes when you reach the end bracket and then get scheduled.\n    Serial.println("Task Monitor: Deleting");\n    vTaskDelete(NULL);\n}\n\nvoid setup() {\n\n    Serial.begin(115200);\n\n    vNopDelayMS(1000); // prevents usb driver crash on startup, do not omit this\n    while (!Serial) ;  // Wait for Serial terminal to open port before starting program\n\n    tft.begin();\n    tft.setRotation(3);\n    tft.fillScreen(tft.color565(9,7,7)); // BLACK background\n    tft.setTextColor(tft.color565(239,220,5)); // YELLOW text\n    tft.setTextSize(2);\n    tft.drawString("Thread A", 30, 50);\n    tft.drawString("Thread B", 190, 50);\n\n    Serial.println("");\n    Serial.println("******************************");\n    Serial.println("        Program start         ");\n    Serial.println("******************************");\n\n    // Create the threads that will be managed by the rtos\n    // Sets the stack size and priority of each task\n    // Also initializes a handler pointer to each task, which are important to communicate with and retrieve info from tasks\n    xTaskCreate(LCD_TASK_1,     "Task A",       256, NULL, tskIDLE_PRIORITY + 3, &Handle_aTask);\n    xTaskCreate(LCD_TASK_2,     "Task B",       256, NULL, tskIDLE_PRIORITY + 2, &Handle_bTask);\n    xTaskCreate(taskMonitor, "Task Monitor",    128, NULL, tskIDLE_PRIORITY + 1, &Handle_monitorTask);\n\n    // Start the RTOS, this function will never return and will schedule the tasks.\n    vTaskStartScheduler();\n}\n\nvoid loop() {\n    //NOTHING\n}\n')),(0,i.yg)("h2",{id:"\u7528\u4e8e-arduino-\u7684-cpp-freertos"},"\u7528\u4e8e Arduino \u7684 Cpp FreeRTOS"),(0,i.yg)("p",null,"\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86 ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_ooFreeRTOS"},(0,i.yg)("strong",{parentName:"a"},"Seeed_Arduino_ooFreeRTOS")),", \u5b83\u662f ",(0,i.yg)("strong",{parentName:"p"},"\u4e00\u4e2a\u5728 Arduino \u6846\u67b6\u4e0b\u5de5\u4f5c\u7684\u5c01\u88c5\u4e86 FreeRTOS \u529f\u80fd\u7684 C++ \u5305\u88c5\u5e93\u96c6\u5408\u3002")),(0,i.yg)("h3",{id:"\u5b89\u88c5-freertos-cpp-arduino-\u5e93"},"\u5b89\u88c5 FreeRTOS Cpp Arduino \u5e93"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"\u8bbf\u95ee ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_ooFreeRTOS"},(0,i.yg)("strong",{parentName:"a"},"Seeed_Arduino_ooFreeRTOS"))," \u4ed3\u5e93\uff0c\u5e76\u5c06\u6574\u4e2a\u4ed3\u5e93\u4e0b\u8f7d\u5230\u60a8\u7684\u672c\u5730\u9a71\u52a8\u5668\u4e0a\u3002")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"\u73b0\u5728\uff0c\u53ef\u4ee5\u5c06 Seeed_Arduino_ooFreeRTOS \u5e93\u5b89\u88c5\u5230 Arduino IDE \u4e2d\u3002\u6253\u5f00 Arduino IDE\uff0c\u70b9\u51fb ",(0,i.yg)("inlineCode",{parentName:"p"},"sketch")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Include Library")," -> ",(0,i.yg)("inlineCode",{parentName:"p"},"Add .ZIP Library"),", \u9009\u62e9\u521a\u521a\u4e0b\u8f7d\u7684  ",(0,i.yg)("inlineCode",{parentName:"p"},"Seeed_Arduino_ooFreeRTOS")," \u6587\u4ef6\u3002"))),(0,i.yg)("h3",{id:"cpp-\u4e2d\u7684-blink-\u793a\u4f8b"},"Cpp \u4e2d\u7684 Blink \u793a\u4f8b"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <Seeed_Arduino_ooFreeRTOS.h>\n#include "thread.hpp"\n#include "ticks.hpp"\n\nusing namespace cpp_freertos;\n\nclass BlinkThread : public Thread {\n  \npublic:\n  \n  BlinkThread(int i, int delayInSeconds)\n    : Thread( 256, 1), \n      Id (i), \n      DelayInSeconds(delayInSeconds)\n  {\n    Start();\n  };\n  \nprotected:\n\n  virtual void Run() {\n    while (true) {\n      Serial.printf("Blink Therad: %d\\n\\r", Id);\n      digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)\n      Delay(Ticks::SecondsToTicks(DelayInSeconds));\n      digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW\n      Delay(Ticks::SecondsToTicks(DelayInSeconds));      \n    }\n  };\n\nprivate:\n  int Id;\n  int DelayInSeconds;\n};\n\n\n\nvoid setup (void)\n{\n  \n  // start up the serial interface\n  Serial.begin(115200);\n  Serial.println("Testing FreeRTOS C++ wrappers");\n  Serial.println("Simple Tasks");\n\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n  \n  static BlinkThread p1(1, 3);\n  static BlinkThread p2(2, 5);\n\n  Thread::StartScheduler();\n  \n  //\n  //  We shouldn\'t ever get here unless someone calls \n  //  Thread::EndScheduler()\n  //  \n  Serial.println("Scheduler ended!");\n\n}\n\nvoid loop()\n{\n  // Empty. Things are done in Tasks.\n}\n\n')),(0,i.yg)("h2",{id:"\u53c2\u8003\u8d44\u6599"},"\u53c2\u8003\u8d44\u6599"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.freertos.org/FreeRTOS-quick-start-guide.html"},"\u5b98\u65b9 FreeRTOS \u5165\u95e8\u6307\u5357"))))}g.isMDXComponent=!0}}]);