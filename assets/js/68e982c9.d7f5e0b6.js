"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[50281],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>m});var i=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),g=r,m=d["".concat(s,".").concat(g)]||d[g]||c[g]||a;return n?i.createElement(m,o(o({ref:t},u),{},{components:n})):i.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},75226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(58168),r=(n(96540),n(15680));const a={description:"I2S RGB with XIAO ESP32S3",title:"I2S RGB Usage",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/reSpeaker_i2s_rgb",last_update:{date:"7/1/2024",author:"Jessie"}},o=void 0,l={unversionedId:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/i2s_rgb",id:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/i2s_rgb",title:"I2S RGB Usage",description:"I2S RGB with XIAO ESP32S3",source:"@site/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/i2s_rgb.md",sourceDirName:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3",slug:"/reSpeaker_i2s_rgb",permalink:"/reSpeaker_i2s_rgb",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/i2s_rgb.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:1719792e3,formattedLastUpdatedAt:"Jul 1, 2024",frontMatter:{description:"I2S RGB with XIAO ESP32S3",title:"I2S RGB Usage",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/reSpeaker_i2s_rgb",last_update:{date:"7/1/2024",author:"Jessie"}}},s={},p=[{value:"Hardware Requirements",id:"hardware-requirements",level:3},{value:"Wiring",id:"wiring",level:3},{value:"Functionality",id:"functionality",level:3},{value:"Code",id:"code",level:3},{value:"Customization",id:"customization",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.yg)(d,(0,i.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"This project demonstrates how to use the reSpeaker board to control a NeoPixel LED strip based on the intensity of audio input received through the I2S interface. The LED strip reacts to the audio by adjusting its brightness and color according to the average intensity of the audio samples."),(0,r.yg)("h3",{id:"hardware-requirements"},"Hardware Requirements"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"ReSpeaker Lite board (with integrated XIAO ESP32S3 microcontroller)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"https://www.seeedstudio.com/Grove-RGB-LED-Stick-10-WS2813-Mini.html"},"Grove - RGB LED Stick"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Jumper wires"))),(0,r.yg)("h3",{id:"wiring"},"Wiring"),(0,r.yg)("p",null,"Connect the NeoPixel LED strip to the reSpeaker board:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Data pin of the LED strip to pin D2 of the reSpeaker")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Power and ground pins of the LED strip to the appropriate power supply"))),(0,r.yg)("p",null,"The I2S microphone is already integrated on the reSpeaker board, so no additional wiring is needed for audio input."),(0,r.yg)("p",null,"Modify the following constants in the sketch if needed:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"PIN"),": The pin number connected to the data pin of the NeoPixel strip (default: D2)\n",(0,r.yg)("inlineCode",{parentName:"p"},"NUMPIXELS"),": The number of pixels in the NeoPixel strip (default: 10)\n",(0,r.yg)("inlineCode",{parentName:"p"},"sampleRate"),": The sample rate of the I2S audio input (default: 16000 Hz)"),(0,r.yg)("p",null,"Open the ",(0,r.yg)("inlineCode",{parentName:"p"},"Serial Monitor")," to view the average audio intensity values."),(0,r.yg)("h3",{id:"functionality"},"Functionality"),(0,r.yg)("p",null,"The sketch performs the following tasks:"),(0,r.yg)("p",null,"Initializes the NeoPixel LED strip and sets its brightness."),(0,r.yg)("p",null,"Configures the I2S interface."),(0,r.yg)("p",null,"Continuously reads audio samples from the I2S interface in blocks of 1024 samples."),(0,r.yg)("p",null,"Calculates the absolute value sum of the non-zero audio samples and determines the average intensity."),(0,r.yg)("p",null,"Maps the average intensity to the number of active LEDs on the NeoPixel strip."),(0,r.yg)("p",null,"Updates the color and brightness of each LED based on its position and the mapped intensity value."),(0,r.yg)("p",null,"The color transitions from blue to green along the length of the strip.\nInactive LEDs are turned off.\nDisplays the updated LED colors on the NeoPixel strip."),(0,r.yg)("p",null,"Prints the average audio intensity value to the Serial Monitor for debugging purposes."),(0,r.yg)("p",null,"Repeats the process with a delay of 100 milliseconds between each iteration."),(0,r.yg)("h3",{id:"code"},"Code"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'/**\n * @file i2s_rgb.ino\n * @author Seeed Studio\n * @brief Making a music spectrometer\n * @version 1.0\n * @date 2024-06-28\n *\n * @copyright Copyright (c) 2024\n */\n\n#include <ESP_I2S.h>\n#include <wav_header.h>\n#include <Adafruit_NeoPixel.h>\n\nI2SClass I2S;\n\n#define PIN        D2\n#define NUMPIXELS  10\nAdafruit_NeoPixel strip = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);\n#define DELAYVAL   500                                // Time (in milliseconds) to pause between pixels\n\nconst int sampleRate = 16000;                         // sample rate in Hz\nconst int frequency = 440;                            // frequency of square wave in Hz\nconst int amplitude = 500;                            // amplitude of square wave\nint32_t sample = amplitude;                           // current sample value\nconst int halfWavelength = sampleRate / frequency;    // half wavelength of square wave\n\nbool i2s_rgb = true;\n\n\nvoid setup() {\n  Serial.begin(115200);\n//  while(!Serial);             // Wait for the serial port to connect\n\n  strip.begin();\n  strip.show();\n  strip.setBrightness(20);\n\n  I2S.setPins(8, 7, 43, 44);  // Configure I2S pins\n  if (!I2S.begin(I2S_MODE_STD, sampleRate, I2S_DATA_BIT_WIDTH_16BIT, I2S_SLOT_MODE_STEREO)){\n    Serial.println("Failed to initialize I2S!");\n    while(1);                 // Halt if failed to initialize\n  }\n}\n\nvoid loop() {\n  int32_t sample_read;\n  uint32_t sum = 0;\n  int count = 0;\n\n  // Reading audio data from I2S\n  for (int i = 0; i < 1024; i++) {\n    sample_read = I2S.read();\n    if (sample_read != 0 && sample_read != 0xFFFF){\n      sum += abs(sample_read);  // Calculating Absolute Value Sums\n      count++;\n    }\n  }\n\n  int average = sum / count;    // Calculation of average intensity\n  Serial.println(average);\n\n  int activeLEDs = map(average, 30000, 36000, 0, NUMPIXELS);  // Mapping average to LED quantity, value to map, value current range, value target range after mapping\n\n  // Update LED strip brightness and colour\n  for (int i = 0; i < NUMPIXELS; i++) {\n    if (i < activeLEDs) {\n      // Setting the colour according to the LED position\n      int colorIntensity = map(i, 0, NUMPIXELS - 1, 0, 255);\n      strip.setPixelColor(i, strip.Color(0, colorIntensity, 255 - colorIntensity));  // Transition from blue to green\n    } else {\n      strip.setPixelColor(i, strip.Color(0, 0, 0));  // Switching off inactive LEDs\n    }\n  }\n  strip.show();\n\n  delay(100);\n}\n')),(0,r.yg)("h3",{id:"customization"},"Customization"),(0,r.yg)("p",null,"You can customize the behavior of the audio reactive NeoPixel strip by modifying the following parameters:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"DELAYVAL"),": The delay time (in milliseconds) between each pixel update (default: 500)\n",(0,r.yg)("inlineCode",{parentName:"p"},"Mapping range for activeLEDs"),": Adjust the range of average intensity values to map to the number of active LEDs (default: 30000 to 36000)\n",(0,r.yg)("inlineCode",{parentName:"p"},"Color scheme"),": Modify the strip.setPixelColor() function to change the color transition or use different colors for the LEDs"))}c.isMDXComponent=!0}}]);