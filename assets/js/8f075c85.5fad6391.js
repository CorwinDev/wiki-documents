"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[36939],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>f});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},m="mdxType",S={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=d(t),u=r,f=m["".concat(s,".").concat(u)]||m[u]||S[u]||a;return t?i.createElement(f,l(l({ref:n},p),{},{components:t})):i.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<a;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},23113:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>S,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var i=t(9668),r=(t(96540),t(15680));const a={description:"\u8bfb\u53d6\u5199\u5165\u6570\u636e",title:"\u8bfb\u53d6\u5199\u5165\u6570\u636e",keywords:["Wio_terminal File_System"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-Terminal-FS-ReadWrite",last_update:{date:"3/09/2024",author:"\u91d1\u83ca"}},l="\u4eceSD\u5361\u8bfb\u53d6/\u5199\u5165\u6570\u636e",o={unversionedId:"zh-CN/Sensor/Wio_Terminal/Hardware_Overview/SD_Card/CN-Wio-Terminal-FS-ReadWrite",id:"zh-CN/Sensor/Wio_Terminal/Hardware_Overview/SD_Card/CN-Wio-Terminal-FS-ReadWrite",title:"\u8bfb\u53d6\u5199\u5165\u6570\u636e",description:"\u8bfb\u53d6\u5199\u5165\u6570\u636e",source:"@site/docs/zh-CN/Sensor/Wio_Terminal/Hardware_Overview/SD_Card/CN-Wio-Terminal-FS-ReadWrite.md",sourceDirName:"zh-CN/Sensor/Wio_Terminal/Hardware_Overview/SD_Card",slug:"/cn/Wio-Terminal-FS-ReadWrite",permalink:"/cn/Wio-Terminal-FS-ReadWrite",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/zh-CN/Sensor/Wio_Terminal/Hardware_Overview/SD_Card/CN-Wio-Terminal-FS-ReadWrite.md",tags:[],version:"current",lastUpdatedBy:"\u91d1\u83ca",lastUpdatedAt:1709942400,formattedLastUpdatedAt:"Mar 9, 2024",frontMatter:{description:"\u8bfb\u53d6\u5199\u5165\u6570\u636e",title:"\u8bfb\u53d6\u5199\u5165\u6570\u636e",keywords:["Wio_terminal File_System"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/cn/Wio-Terminal-FS-ReadWrite",last_update:{date:"3/09/2024",author:"\u91d1\u83ca"}},sidebar:"CNSidebar",previous:{title:"\u6982\u8ff0",permalink:"/cn/Wio-Terminal-FS-Overview"},next:{title:"Wio Terminal \u7f51\u7edc\u914d\u7f6e",permalink:"/cn/Wio-Terminal-Network-Overview"}},s={},d=[{value:"\u5728Wio Terminal\u4e0a\u521d\u59cb\u5316SD\u5361",id:"\u5728wio-terminal\u4e0a\u521d\u59cb\u5316sd\u5361",level:2},{value:"\u5199\u5165SD\u5361",id:"\u5199\u5165sd\u5361",level:2},{value:"\u4eceSD\u5361\u8bfb\u53d6",id:"\u4ecesd\u5361\u8bfb\u53d6",level:2},{value:"\u5b8c\u6574\u4ee3\u7801",id:"\u5b8c\u6574\u4ee3\u7801",level:2},{value:"\u4f7f\u7528QSPI\u8bfb\u5199Flash",id:"\u4f7f\u7528qspi\u8bfb\u5199flash",level:2},{value:"\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801",id:"\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801",level:3}],p={toc:d},m="wrapper";function S(e){let{components:n,...t}=e;return(0,r.yg)(m,(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u4ecesd\u5361\u8bfb\u53d6\u5199\u5165\u6570\u636e"},"\u4eceSD\u5361\u8bfb\u53d6/\u5199\u5165\u6570\u636e"),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/Xnip2019-12-16_13-53-10.jpg"})),(0,r.yg)("p",null,"\u8fd9\u4e2a\u5b58\u50a8\u5e93\u63cf\u8ff0\u4e86\u5982\u4f55\u4eceSD\u5361\u8bfb\u53d6/\u5199\u5165\u6570\u636e\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u4eceSD\u5361\u52a0\u8f7d\u6570\u636e\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u6f14\u793a\u5c06\u662f\u5c06\u4f20\u611f\u5668\u8bfb\u6570\u5b58\u50a8\u5230SD\u5361\u4e2d\u3002"),(0,r.yg)("h2",{id:"\u5728wio-terminal\u4e0a\u521d\u59cb\u5316sd\u5361"},"\u5728Wio Terminal\u4e0a\u521d\u59cb\u5316SD\u5361"),(0,r.yg)("p",null,"\u5728\u4ee3\u7801\u4e2d\u5305\u542b",(0,r.yg)("inlineCode",{parentName:"p"},"Seeed_FS")," \u5e93\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u521d\u59cb\u5316SD\u5361\uff1a",(0,r.yg)("inlineCode",{parentName:"p"},"SD.begin(SDCARD_SS_PIN, SDCARD_SPI)"),"\uff0c\u5176\u4e2dSPI\u7528\u4e8e\u5728Wio Terminal\u4e0a\u4e0eSD\u5361\u8fdb\u884c\u901a\u4fe1\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n#include <Seeed_FS.h>\n#include "SD/Seeed_SD.h"\n\nFile myFile; //Intialise the file Class and named it myFile\n\nvoid setup() {\n  Serial.begin(115200);\n  while (!Serial) {\n  }\n\n  Serial.print("Initializing SD card...");\n  if (!SD.begin(SDCARD_SS_PIN, SDCARD_SPI)) {\n    Serial.println("initialization failed!");\n    while (1);\n  }\n  Serial.println("initialization done.");\n')),(0,r.yg)("h2",{id:"\u5199\u5165sd\u5361"},"\u5199\u5165SD\u5361"),(0,r.yg)("p",null,"\u8981\u5728SD\u5361\u4e2d\u5199\u5165\u6570\u636e\uff0c\u9996\u5148\u9700\u8981\u6253\u5f00\u6587\u4ef6\u3002\u6587\u4ef6\u7cfb\u7edf\u6709\u4e0d\u540c\u7684\u6a21\u5f0f\uff0c\u56e0\u6b64\u5728\u6253\u5f00\u6587\u4ef6\u65f6\u9700\u8981\u6307\u5b9a\u8981\u4f7f\u7528\u7684\u6a21\u5f0f\uff0c\u6a21\u5f0f\u5982\u4e0b\u6240\u793a\uff1a"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"\u6587\u4ef6\u6a21\u5f0f"),(0,r.yg)("th",{parentName:"tr",align:null},"\u5b9a\u4e49\u540d\u79f0"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"\u5199\u5165"),(0,r.yg)("td",{parentName:"tr",align:null},"FILE_WRITE")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"\u8bfb\u53d6"),(0,r.yg)("td",{parentName:"tr",align:null},"FILE_READ")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"\u8ffd\u52a0"),(0,r.yg)("td",{parentName:"tr",align:null},"FILE_APPEND")))),(0,r.yg)("p",null,"\u8981\u6253\u5f00\u6587\u4ef6\uff0c\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"open")," \u6587\u4ef6\u7c7b\u6210\u5458\u51fd\u6570\uff0c\u5e76\u4f20\u51652\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},"open(const char *filepath, uint8_t mode = FILE_READ) //default mode is READ\n")),(0,r.yg)("p",null,"In this case, open a txt file name ",(0,r.yg)("inlineCode",{parentName:"p"},"test.txt")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"FILE_WRITE")," is used. To write inside a txt file can use ",(0,r.yg)("inlineCode",{parentName:"p"},"println")," function(File Class):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'  // open the file. note that only one file can be open at a time,\n  // so you have to close this one before opening another.\n  myFile = SD.open("test.txt", FILE_WRITE); //Writing Mode\n\n  // if the file opened okay, write to it:\n  if (myFile) {\n    Serial.print("Writing to test.txt...");\n    myFile.println("testing 1, 2, 3."); //Writing this to the txt file\n    // close the file:\n    myFile.close();\n    Serial.println("done.");\n  } else {\n    // if the file didn\'t open, print an error:\n    Serial.println("error opening test.txt");\n  }\n')),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"\u6ce8:")," \u4e00\u6b21\u53ea\u80fd\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u8bf7\u5728\u4f7f\u7528\u5b8c\u6587\u4ef6\u540e\u5173\u95ed\u6587\u4ef6\u3002"),(0,r.yg)("h2",{id:"\u4ecesd\u5361\u8bfb\u53d6"},"\u4eceSD\u5361\u8bfb\u53d6"),(0,r.yg)("p",null,"\u8981\u4eceSD\u5361\u4e2d\u8bfb\u53d6\u6587\u4ef6\uff0c\u540c\u6837\u9700\u8981\u6253\u5f00\u6587\u4ef6\u3002\u8fd9\u6b21\uff0c\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"FILE_READ")," \u6a21\u5f0f\u53ea\u8bfb\u53d6\u6587\u4ef6\u3002"),(0,r.yg)("p",null,"\u4f7f\u7528\u6587\u4ef6\u6210\u5458\u51fd\u6570 ",(0,r.yg)("inlineCode",{parentName:"p"},"availble()")," \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u53ef\u7528\uff0c\u5e76\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"read()")," \u6253\u5370\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'myFile = SD.open("test.txt", FILE_READ); //Read Mode\n  if (myFile) {\n    Serial.println("test.txt:");\n\n    // read from the file until there\'s nothing else in it:\n    while (myFile.available()) {\n      Serial.write(myFile.read());\n    }\n    // close the file:\n    myFile.close();\n  } else {\n    // if the file didn\'t open, print an error:\n    Serial.println("error opening test.txt");\n  }\n}\n')),(0,r.yg)("h2",{id:"\u5b8c\u6574\u4ee3\u7801"},"\u5b8c\u6574\u4ee3\u7801"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <SPI.h>\n#include <Seeed_FS.h>\n#include "SD/Seeed_SD.h"\n\nFile myFile;\n\nvoid setup() {\n  Serial.begin(115200);\n  while (!Serial) {\n  }\n  Serial.print("Initializing SD card...");\n  if (!SD.begin(SDCARD_SS_PIN, SDCARD_SPI)) {\n    Serial.println("initialization failed!");\n    while (1);\n  }\n  Serial.println("initialization done.");\n\n  // open the file. note that only one file can be open at a time,\n  // so you have to close this one before opening another.\n  myFile = SD.open("test.txt", FILE_WRITE);\n\n  // if the file opened okay, write to it:\n  if (myFile) {\n    Serial.print("Writing to test.txt...");\n    myFile.println("testing 1, 2, 3.");\n    // close the file:\n    myFile.close();\n    Serial.println("done.");\n  } else {\n    // if the file didn\'t open, print an error:\n    Serial.println("error opening test.txt");\n  }\n\n  // re-open the file for reading:\n  myFile = SD.open("test.txt", FILE_READ);\n  if (myFile) {\n    Serial.println("test.txt:");\n\n    // read from the file until there\'s nothing else in it:\n    while (myFile.available()) {\n      Serial.write(myFile.read());\n    }\n    // close the file:\n    myFile.close();\n  } else {\n    // if the file didn\'t open, print an error:\n    Serial.println("error opening test.txt");\n  }\n}\n\nvoid loop() {\n  // nothing happens after setup\n}\n')),(0,r.yg)("h2",{id:"\u4f7f\u7528qspi\u8bfb\u5199flash"},"\u4f7f\u7528QSPI\u8bfb\u5199Flash"),(0,r.yg)("p",null,"\u968f\u7740FS\u5e93\u7684\u66f4\u65b0\uff0c\u6211\u4eec\u5728\u7cfb\u7edf\u4e2d\u5f15\u5165\u4e86 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/Seeed-Studio/Seeed_Arduino_SFUD"},(0,r.yg)("strong",{parentName:"a"},"SFUD"))," \u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528QSPI\u8bbf\u95eeWio Terminal\u4e0a\u7684Flash\u3002"),(0,r.yg)("h3",{id:"\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801"},"\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801"),(0,r.yg)("p",null,"\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86 ",(0,r.yg)("strong",{parentName:"p"},"\u8bfb\u53d6/\u64e6\u9664/\u5199\u5165")," \u64cd\u4f5c:"),(0,r.yg)("div",{align:"center"},(0,r.yg)("img",{src:"https://files.seeedstudio.com/wiki/Wio-Terminal/img/SFUD.png"})),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'#include <sfud.h>\n\n#define SFUD_DEMO_TEST_BUFFER_SIZE                     1024\nstatic uint8_t sfud_demo_test_buf[SFUD_DEMO_TEST_BUFFER_SIZE];\nstatic void sfud_demo(uint32_t addr, size_t size, uint8_t *data);\n \n#define SERIAL Serial\n\nvoid setup()\n{\n    SERIAL.begin(115200);\n    while(!SERIAL) {};\n    while(!(sfud_init() == SFUD_SUCCESS));\n    #ifdef SFUD_USING_QSPI\n    sfud_qspi_fast_read_enable(sfud_get_device(SFUD_W25Q32_DEVICE_INDEX), 2);\n    #endif\n    sfud_demo(0, sizeof(sfud_demo_test_buf), sfud_demo_test_buf);\n}\n\nvoid loop()\n{\n\n}\n/**\n * SFUD demo for the first flash device test.\n *\n * @param addr flash start address\n * @param size test flash size\n * @param size test flash data buffer\n */\nstatic void sfud_demo(uint32_t addr, size_t size, uint8_t *data) {\n    sfud_err result = SFUD_SUCCESS;\n    const sfud_flash *flash = sfud_get_device_table() + 0;\n    size_t i;\n    /* prepare write data */\n    for (i = 0; i < size; i++) {\n        data[i] = i;\n    }\n    /* erase test */\n    result = sfud_erase(flash, addr, size);\n    if (result == SFUD_SUCCESS) {\n        SERIAL.println("Erase the flash data finish");\n    } else {\n        SERIAL.println("Erase flash data failed");\n        return;\n    }\n    /* write test */\n    result = sfud_write(flash, addr, size, data);\n    if (result == SFUD_SUCCESS) {\n        SERIAL.println("Write the flash data finish");\n    } else {\n        SERIAL.println("Write the flash data failed");\n        return;\n    }\n    /* read test */\n    size_t BaseTime = micros();\n    result = sfud_read(flash, addr, size, data);\n    size_t CostTime = micros() - BaseTime;\n    if (result == SFUD_SUCCESS) {\n        SERIAL.println("Read the flash data success.");\n        SERIAL.println("Offset (h) 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\\r\\n");\n        for (i = 0; i < size; i++) {\n            if (i % 16 == 0) {\n                SERIAL.print("0x");\n                SERIAL.print(addr + i,HEX);\n                SERIAL.print("\\t");\n            }\n            SERIAL.print(data[i],HEX);\n            SERIAL.print("\\t");\n            if (((i + 1) % 16 == 0) || i == size - 1) {\n                SERIAL.println("");\n            }\n        }\n        SERIAL.println(" ");\n    } else {\n        SERIAL.println("Read the flash data failed.");\n    }\n    /* data check */\n    for (i = 0; i < size; i++) {\n        if (data[i] != i % 256) {\n            SERIAL.println("Read and check write data has an error.");\n   break;\n        }\n    }\n    if (i == size) {\n        SERIAL.println("The flash test is success.\\r\\n");\n        SERIAL.print("read costTime: ");\n        SERIAL.print(CostTime);\n        SERIAL.println(" us");\n    }\n}\n')))}S.isMDXComponent=!0}}]);