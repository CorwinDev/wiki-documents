"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[31447],{15680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>f});var n=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=a,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},94710:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(58168),a=(r(96540),r(15680));const o={description:"I2S to CSV Converter with ReSpeaker Lite",title:"CSV Converter",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/respeaker_streams_print",last_update:{date:"7/1/2024",author:"Jessie"}},i=void 0,s={unversionedId:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_streams_print",id:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_streams_print",title:"CSV Converter",description:"I2S to CSV Converter with ReSpeaker Lite",source:"@site/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_streams_print.md",sourceDirName:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3",slug:"/respeaker_streams_print",permalink:"/respeaker_streams_print",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_streams_print.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:1719792e3,formattedLastUpdatedAt:"Jul 1, 2024",frontMatter:{description:"I2S to CSV Converter with ReSpeaker Lite",title:"CSV Converter",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/respeaker_streams_print",last_update:{date:"7/1/2024",author:"Jessie"}},sidebar:"ProductSidebar",previous:{title:"Sine Wave Generator with ReSpeaker Lite",permalink:"/respeaker_streams_generator"},next:{title:"Star Wars Theme Player",permalink:"/respeaker_streams_memory"}},p={},l=[{value:"Functionality",id:"functionality",level:3},{value:"Code",id:"code",level:3},{value:"Configuration",id:"configuration",level:3}],c={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.yg)(u,(0,n.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This project demonstrates how to capture audio data from the I2S interface using the reSpeaker Lite board and convert it to CSV format for further analysis or processing. The reSpeaker Lite is an audio board with an integrated XIAO ESP32S3 microcontroller, featuring a dual-channel microphone and speaker."),(0,a.yg)("h3",{id:"functionality"},"Functionality"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Captures audio data from the I2S interface"),(0,a.yg)("li",{parentName:"ul"},"Converts the captured audio data to CSV format"),(0,a.yg)("li",{parentName:"ul"},"Streams the CSV data over the serial interface for further processing"),(0,a.yg)("li",{parentName:"ul"},"Utilizes the AudioTools framework for audio processing and streaming"),(0,a.yg)("li",{parentName:"ul"},"Easy-to-use AudioLogger for debugging and monitoring")),(0,a.yg)("h3",{id:"code"},"Code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "AudioTools.h"\n\nAudioInfo info(16000, 2, 32);\nI2SStream i2sStream; // Access I2S as stream\nCsvOutput<int32_t> csvStream(Serial);\nStreamCopy copier(csvStream, i2sStream); // copy i2sStream to csvStream\n\n// Arduino Setup\nvoid setup(void) {\n    Serial.begin(115200);\n    AudioLogger::instance().begin(Serial, AudioLogger::Info);\n    \n    auto cfg = i2sStream.defaultConfig(RX_MODE);\n    cfg.copyFrom(info);\n    cfg.i2s_format = I2S_STD_FORMAT; // or try with I2S_LSB_FORMAT\n    cfg.is_master = false;  // this module nees a master clock if the ESP32 is master\n    cfg.use_apll = false;   // try with yes\n    i2sStream.begin(cfg);\n\n    // make sure that we have the correct channels set up\n    csvStream.begin(info);\n\n}\n\n// Arduino loop - copy data\nvoid loop() {\n    copier.copy();\n}\n')),(0,a.yg)("h3",{id:"configuration"},"Configuration"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"info"),": Defines the audio configuration, including the sample rate, number of channels (2 for stereo, 1 for mono), and the number of bits per sample (32 bits)."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"i2sStream"),": Creates an instance of the ",(0,a.yg)("inlineCode",{parentName:"p"},"I2SStream")," class to access the I2S interface as a stream."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"csvStream"),": Creates a ",(0,a.yg)("inlineCode",{parentName:"p"},"CsvOutput")," object to convert the audio data to CSV format and stream it over the serial interface."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"copier"),": Creates a ",(0,a.yg)("inlineCode",{parentName:"p"},"StreamCopy")," object to copy the audio data from the I2S stream to the CSV stream."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"cfg"),": Configures the I2S stream with the desired settings, such as the audio format, master/slave mode, and APLL usage."),(0,a.yg)("p",null,"Open the ",(0,a.yg)("inlineCode",{parentName:"p"},"Serial Plotter")," to view the output waves."),(0,a.yg)("p",{style:{textAlign:"center"}},(0,a.yg)("img",{src:"https://files.seeedstudio.com/wiki/SenseCAP/respeaker/waves.gif",alt:"pir",width:600,height:"auto"})))}m.isMDXComponent=!0}}]);