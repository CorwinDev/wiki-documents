"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[66016],{15680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>f});var n=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(r),y=a,f=d["".concat(s,".").concat(y)]||d[y]||c[y]||i;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},87898:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(9668),a=(r(96540),r(15680));const i={description:"MP3 Player with XIAO ESP32S3",title:"MP3 Player",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/respeaker_player_spiffs",last_update:{date:"7/1/2024",author:"Jessie"}},o=void 0,l={unversionedId:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_player_spiffs",id:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_player_spiffs",title:"MP3 Player",description:"MP3 Player with XIAO ESP32S3",source:"@site/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_player_spiffs.md",sourceDirName:"Sensor/ReSpeaker_Lite/XIAO_ESP32_S3",slug:"/respeaker_player_spiffs",permalink:"/respeaker_player_spiffs",draft:!1,editUrl:"https://github.com/Seeed-Studio/wiki-documents/blob/docusaurus-version/docs/Sensor/ReSpeaker_Lite/XIAO_ESP32_S3/respeaker_player_spiffs.md",tags:[],version:"current",lastUpdatedBy:"Jessie",lastUpdatedAt:1719792e3,formattedLastUpdatedAt:"Jul 1, 2024",frontMatter:{description:"MP3 Player with XIAO ESP32S3",title:"MP3 Player",keywords:["ESP32S3","XIAO","ReSpeaker"],image:"https://files.seeedstudio.com/wiki/wiki-platform/S-tempor.png",slug:"/respeaker_player_spiffs",last_update:{date:"7/1/2024",author:"Jessie"}},sidebar:"ProductSidebar",previous:{title:"Star Wars Theme Player",permalink:"/respeaker_streams_memory"},next:{title:"MQTT Audio Streaming",permalink:"/respeaker_steams_mqtt"}},s={},p=[{value:"Library Required",id:"library-required",level:3},{value:"Functionality",id:"functionality",level:3},{value:"Code",id:"code",level:3},{value:"Configuration",id:"configuration",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...r}=e;return(0,a.yg)(d,(0,n.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This project demonstrates how to use the reSpeaker Lite board to play MP3 files stored in the SPIFFS file system."),(0,a.yg)("h3",{id:"library-required"},"Library Required"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://github.com/limengdu/reSpeaker_Lite-arduino-libhelix"},"ReSpeaker Lite arduino libhelix"))),(0,a.yg)("h3",{id:"functionality"},"Functionality"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Plays MP3 files from the SPIFFS file system"),(0,a.yg)("li",{parentName:"ul"},"Utilizes the I2S interface for audio output"),(0,a.yg)("li",{parentName:"ul"},"Supports metadata extraction and callback"),(0,a.yg)("li",{parentName:"ul"},"Easy-to-use AudioPlayer class for seamless audio playback")),(0,a.yg)("h3",{id:"code"},"Code"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'#include "AudioTools.h"\n#include "AudioLibs/AudioSourceSPIFFS.h"\n#include "AudioCodecs/CodecMP3Helix.h"\n\nconst char *startFilePath="/";\nconst char* ext="mp3";\nAudioSourceSPIFFS source(startFilePath, ext);\nI2SStream i2s;\nMP3DecoderHelix decoder;\nAudioPlayer player(source, i2s, decoder);\n\nvoid printMetaData(MetaDataType type, const char* str, int len){\n  Serial.print("==> ");\n  Serial.print(toStr(type));\n  Serial.print(": ");\n  Serial.println(str);\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  AudioLogger::instance().begin(Serial, AudioLogger::Info);\n\n  // setup output\n  auto cfg = i2s.defaultConfig(TX_MODE);\n  i2s.begin(cfg);\n\n  // setup player\n  //source.setFileFilter("*Bob Dylan*");\n  player.setMetadataCallback(printMetaData);\n  player.begin();\n}\n\nvoid loop() {\n  player.copy();\n}\n')),(0,a.yg)("h3",{id:"configuration"},"Configuration"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Uploading Files to SPIFFS")),(0,a.yg)("p",null,"SPIFFS is a file system intended for SPI NOR flash devices on embedded targets. It supports wear levelling, file system consistency checks, and more."),(0,a.yg)("p",null,"Make sure you have the necessary tools to upload files to SPIFFS.\nYou can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"ESP32 Sketch Data Upload")," tool in the Arduino IDE 1.x or other tools."),(0,a.yg)("admonition",{title:"For Arduino IDE 2.x",type:"tip"},(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("strong",{parentName:"p"},"Install"),":"),(0,a.yg)("p",{parentName:"admonition"},"Copy the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/earlephilhower/arduino-littlefs-upload/releases"},"VSIX file")," to ",(0,a.yg)("inlineCode",{parentName:"p"},"~/.arduinoIDE/plugins/")," on Mac and Linux ",(0,a.yg)("br",null),"\nor ",(0,a.yg)("inlineCode",{parentName:"p"},"C:\\Users\\<username>\\.arduinoIDE\\plugins\\")," on Windows (you may need to make this directory yourself beforehand). ",(0,a.yg)("br",null),"\nThen restart the IDE."),(0,a.yg)("p",{parentName:"admonition"},(0,a.yg)("strong",{parentName:"p"},"Usage"),":"),(0,a.yg)("p",{parentName:"admonition"},"For windows: ","[Ctrl]"," + ","[Shift]"," + ","[P]",", then ",(0,a.yg)("inlineCode",{parentName:"p"},"Upload LittleFS to Pico/ESP8266/ESP32"),".",(0,a.yg)("br",null),"\nFor macOS, ","[\u2318]"," + ","[Shift]"," + ","[P]",", then ",(0,a.yg)("inlineCode",{parentName:"p"},"Upload LittleFS to Pico/ESP8266/ESP32"),".")),(0,a.yg)("p",null,'Create a folder named "data" in your sketch directory and place the MP3 files you want to play inside it.'),(0,a.yg)("p",null,"Upload the files to SPIFFS using the chosen tool."))}c.isMDXComponent=!0}}]);